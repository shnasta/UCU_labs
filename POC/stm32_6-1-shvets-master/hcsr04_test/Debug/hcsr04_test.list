
hcsr04_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d8  08009a78  08009a78  00019a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a250  0800a250  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800a250  0800a250  0001a250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a258  0800a258  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a258  0800a258  0001a258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a25c  0800a25c  0001a25c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a260  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008bc  20000090  0800a2f0  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000094c  0800a2f0  0002094c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dc7f  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000458d  00000000  00000000  0003dd3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e8  00000000  00000000  000422d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001728  00000000  00000000  00043bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b6ab  00000000  00000000  000452e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f46f  00000000  00000000  0006098b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098fea  00000000  00000000  0007fdfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00118de4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006dac  00000000  00000000  00118e34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009a60 	.word	0x08009a60

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08009a60 	.word	0x08009a60

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <LCD5110_refresh>:
	LCD5110_canvas_t def_scr;
} LCD5110_display;


inline void LCD5110_refresh(LCD5110_display* lcd_conf)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	LCD5110_refresh_ll(&lcd_conf->hw_conf);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4618      	mov	r0, r3
 8000590:	f000 fbdb 	bl	8000d4a <LCD5110_refresh_ll>
}
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <LCD5110_set_cursor>:
void LCD5110_wset_cursor(int x, int y, LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
point_t LCD5110_wget_cursor(LCD5110_canvas_t* win, LCD5110_display* lcd_conf);

// Regarding inline -- C also lcd5110.c.
inline void LCD5110_set_cursor(int x, int y, LCD5110_display* lcd_conf)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
	LCD5110_wset_cursor(x, y, &lcd_conf->def_scr, lcd_conf);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	f503 7205 	add.w	r2, r3, #532	; 0x214
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	68b9      	ldr	r1, [r7, #8]
 80005b2:	68f8      	ldr	r0, [r7, #12]
 80005b4:	f000 f880 	bl	80006b8 <LCD5110_wset_cursor>
}
 80005b8:	bf00      	nop
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <LCD5110_clear_scr>:
inline point_t LCD5110_get_cursor(LCD5110_display* lcd_conf)
{
	return LCD5110_wget_cursor(&lcd_conf->def_scr, lcd_conf);
}

inline void LCD5110_clear_scr(LCD5110_display* lcd_conf){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	LCD5110_clrscr(&lcd_conf->hw_conf);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 f95f 	bl	800088e <LCD5110_clrscr>
	LCD5110_set_cursor(0, 0, lcd_conf);
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	2100      	movs	r1, #0
 80005d4:	2000      	movs	r0, #0
 80005d6:	f7ff ffe1 	bl	800059c <LCD5110_set_cursor>
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <LCD5110_print>:

void LCD5110_wprint(const char* str, int color,
						LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
int LCD5110_wprintf( LCD5110_display* lcd_conf, int color, LCD5110_canvas_t* win, char *fmt, ...);

inline void LCD5110_print(const char* str, int color, LCD5110_display* lcd_conf){
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b084      	sub	sp, #16
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	60f8      	str	r0, [r7, #12]
 80005ea:	60b9      	str	r1, [r7, #8]
 80005ec:	607a      	str	r2, [r7, #4]
	LCD5110_wprint(str, color, &lcd_conf->def_scr, lcd_conf);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	f503 7205 	add.w	r2, r3, #532	; 0x214
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	68b9      	ldr	r1, [r7, #8]
 80005f8:	68f8      	ldr	r0, [r7, #12]
 80005fa:	f000 f893 	bl	8000724 <LCD5110_wprint>
}
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <LCD5110_wputchar>:
	LCD5110_drawBitmap(px, py, fontpointer + ch * base_font_width,
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}

void LCD5110_wputchar(int px, int py, char ch, int color,
		LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 8000608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800060a:	b08b      	sub	sp, #44	; 0x2c
 800060c:	af04      	add	r7, sp, #16
 800060e:	60f8      	str	r0, [r7, #12]
 8000610:	60b9      	str	r1, [r7, #8]
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	4613      	mov	r3, r2
 8000616:	71fb      	strb	r3, [r7, #7]
	if (win->cursor.y < 0 || win->cursor.x < 0)
 8000618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800061a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800061e:	2b00      	cmp	r3, #0
 8000620:	db41      	blt.n	80006a6 <LCD5110_wputchar+0x9e>
 8000622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000624:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000628:	2b00      	cmp	r3, #0
 800062a:	db3c      	blt.n	80006a6 <LCD5110_wputchar+0x9e>
		return;
	if ( win->cursor.x + base_font_width > win->frame.width ||
 800062c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800062e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000632:	461a      	mov	r2, r3
 8000634:	2306      	movs	r3, #6
 8000636:	4413      	add	r3, r2
 8000638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800063a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800063e:	4293      	cmp	r3, r2
 8000640:	d833      	bhi.n	80006aa <LCD5110_wputchar+0xa2>
		 win->cursor.y + base_font_height > win->frame.height )
 8000642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000644:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000648:	461a      	mov	r2, r3
 800064a:	2308      	movs	r3, #8
 800064c:	4413      	add	r3, r2
 800064e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000650:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
	if ( win->cursor.x + base_font_width > win->frame.width ||
 8000654:	4293      	cmp	r3, r2
 8000656:	d828      	bhi.n	80006aa <LCD5110_wputchar+0xa2>
		return;
//! TODO: Print part of char
	const unsigned char *fontpointer = base_font;
 8000658:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <LCD5110_wputchar+0xac>)
 800065a:	617b      	str	r3, [r7, #20]
	LCD5110_drawBitmap(px + win->frame.x0, py + win->frame.y0, fontpointer + ch * base_font_width,
 800065c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800065e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000662:	461a      	mov	r2, r3
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	18d0      	adds	r0, r2, r3
 8000668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800066a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800066e:	461a      	mov	r2, r3
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	18d1      	adds	r1, r2, r3
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	2206      	movs	r2, #6
 8000678:	fb02 f303 	mul.w	r3, r2, r3
 800067c:	697a      	ldr	r2, [r7, #20]
 800067e:	441a      	add	r2, r3
 8000680:	2306      	movs	r3, #6
 8000682:	461e      	mov	r6, r3
 8000684:	2308      	movs	r3, #8
 8000686:	461c      	mov	r4, r3
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	bf0c      	ite	eq
 800068e:	2301      	moveq	r3, #1
 8000690:	2300      	movne	r3, #0
 8000692:	b2db      	uxtb	r3, r3
 8000694:	461d      	mov	r5, r3
 8000696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000698:	9302      	str	r3, [sp, #8]
 800069a:	9501      	str	r5, [sp, #4]
 800069c:	9400      	str	r4, [sp, #0]
 800069e:	4633      	mov	r3, r6
 80006a0:	f000 f950 	bl	8000944 <LCD5110_drawBitmap>
 80006a4:	e002      	b.n	80006ac <LCD5110_wputchar+0xa4>
		return;
 80006a6:	bf00      	nop
 80006a8:	e000      	b.n	80006ac <LCD5110_wputchar+0xa4>
		return;
 80006aa:	bf00      	nop
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}
 80006ac:	371c      	adds	r7, #28
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006b2:	bf00      	nop
 80006b4:	08009af4 	.word	0x08009af4

080006b8 <LCD5110_wset_cursor>:
	LCD5110_wclear_str(x, y, len, color, &lcd_conf->def_scr, lcd_conf);
}


void LCD5110_wset_cursor(int x, int y, LCD5110_canvas_t* win, LCD5110_display* lcd_conf)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
 80006c4:	603b      	str	r3, [r7, #0]
	win->cursor.x = x;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	b21a      	sxth	r2, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	811a      	strh	r2, [r3, #8]
	win->cursor.y = y;
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	b21a      	sxth	r2, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	815a      	strh	r2, [r3, #10]
}
 80006d6:	bf00      	nop
 80006d8:	3714      	adds	r7, #20
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr

080006e2 <LCD5110_wendl>:

point_t LCD5110_wget_cursor(LCD5110_canvas_t* win, LCD5110_display* lcd_conf){
	return win->cursor;
}

void LCD5110_wendl(LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b082      	sub	sp, #8
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
 80006ea:	6039      	str	r1, [r7, #0]
	win->cursor.y += base_font_height + 1;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	2308      	movs	r3, #8
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	4413      	add	r3, r2
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	3301      	adds	r3, #1
 80006fe:	b29b      	uxth	r3, r3
 8000700:	b21a      	sxth	r2, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	815a      	strh	r2, [r3, #10]
	win->cursor.x = 2;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2202      	movs	r2, #2
 800070a:	811a      	strh	r2, [r3, #8]
	if (win->refresh_on_endl)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	7b1b      	ldrb	r3, [r3, #12]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d002      	beq.n	800071a <LCD5110_wendl+0x38>
		LCD5110_refresh(lcd_conf);
 8000714:	6838      	ldr	r0, [r7, #0]
 8000716:	f7ff ff35 	bl	8000584 <LCD5110_refresh>
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <LCD5110_wprint>:



void LCD5110_wprint(const char* str, int color, LCD5110_canvas_t* win,
		LCD5110_display* lcd_conf) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af02      	add	r7, sp, #8
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
 8000730:	603b      	str	r3, [r7, #0]
	while (*str != 0) {
 8000732:	e053      	b.n	80007dc <LCD5110_wprint+0xb8>
		if (*str != '\n') {
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b0a      	cmp	r3, #10
 800073a:	d010      	beq.n	800075e <LCD5110_wprint+0x3a>
			LCD5110_wputchar(win->cursor.x, win->cursor.y, *str, color, win, lcd_conf);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000742:	4618      	mov	r0, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800074a:	4619      	mov	r1, r3
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	781a      	ldrb	r2, [r3, #0]
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	9301      	str	r3, [sp, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	f7ff ff55 	bl	8000608 <LCD5110_wputchar>
		}
		win->cursor.x += base_font_width;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000764:	b29a      	uxth	r2, r3
 8000766:	2306      	movs	r3, #6
 8000768:	b29b      	uxth	r3, r3
 800076a:	4413      	add	r3, r2
 800076c:	b29b      	uxth	r3, r3
 800076e:	b21a      	sxth	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	811a      	strh	r2, [r3, #8]

		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800077a:	461a      	mov	r2, r3
 800077c:	2306      	movs	r3, #6
 800077e:	4413      	add	r3, r2
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000786:	4293      	cmp	r3, r2
 8000788:	d904      	bls.n	8000794 <LCD5110_wprint+0x70>
				*(str + 1) != '\n') || *str == '\n')
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	3301      	adds	r3, #1
 800078e:	781b      	ldrb	r3, [r3, #0]
		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 8000790:	2b0a      	cmp	r3, #10
 8000792:	d103      	bne.n	800079c <LCD5110_wprint+0x78>
				*(str + 1) != '\n') || *str == '\n')
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b0a      	cmp	r3, #10
 800079a:	d111      	bne.n	80007c0 <LCD5110_wprint+0x9c>
		{
			LCD5110_wendl(win, lcd_conf);
 800079c:	6839      	ldr	r1, [r7, #0]
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f7ff ff9f 	bl	80006e2 <LCD5110_wendl>
			if( isspace(*(str + 1)) )
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	3301      	adds	r3, #1
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	3301      	adds	r3, #1
 80007ac:	4a10      	ldr	r2, [pc, #64]	; (80007f0 <LCD5110_wprint+0xcc>)
 80007ae:	4413      	add	r3, r2
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	f003 0308 	and.w	r3, r3, #8
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d002      	beq.n	80007c0 <LCD5110_wprint+0x9c>
				++str;
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	3301      	adds	r3, #1
 80007be:	60fb      	str	r3, [r7, #12]
		}
		if (win->cursor.y + base_font_height > win->frame.height)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80007c6:	461a      	mov	r2, r3
 80007c8:	2308      	movs	r3, #8
 80007ca:	4413      	add	r3, r2
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d807      	bhi.n	80007e6 <LCD5110_wprint+0xc2>
			break;
		str++;
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	3301      	adds	r3, #1
 80007da:	60fb      	str	r3, [r7, #12]
	while (*str != 0) {
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d1a7      	bne.n	8000734 <LCD5110_wprint+0x10>

	}
}
 80007e4:	e000      	b.n	80007e8 <LCD5110_wprint+0xc4>
			break;
 80007e6:	bf00      	nop
}
 80007e8:	bf00      	nop
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	0800a11c 	.word	0x0800a11c

080007f4 <LCD5110_printf>:
	return res;
}


int LCD5110_printf( LCD5110_display* lcd_conf, int color, char *fmt, ...)
{
 80007f4:	b40c      	push	{r2, r3}
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b09e      	sub	sp, #120	; 0x78
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
 80007fe:	6039      	str	r1, [r7, #0]
	char buf[100];
	int res;

	va_list vargs;
	va_start(vargs, fmt);
 8000800:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000804:	60fb      	str	r3, [r7, #12]

	res = vsnprintf(buf, sizeof(buf), fmt, vargs);
 8000806:	f107 0010 	add.w	r0, r7, #16
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000810:	2164      	movs	r1, #100	; 0x64
 8000812:	f008 fdb9 	bl	8009388 <vsniprintf>
 8000816:	6778      	str	r0, [r7, #116]	; 0x74
	LCD5110_print(buf, color, lcd_conf);
 8000818:	f107 0310 	add.w	r3, r7, #16
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	6839      	ldr	r1, [r7, #0]
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fede 	bl	80005e2 <LCD5110_print>

	if (lcd_conf->def_scr.refresh_on_endl)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800082c:	2b00      	cmp	r3, #0
 800082e:	d002      	beq.n	8000836 <LCD5110_printf+0x42>
		LCD5110_refresh(lcd_conf);
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f7ff fea7 	bl	8000584 <LCD5110_refresh>

	va_end(vargs);

	return res;
 8000836:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8000838:	4618      	mov	r0, r3
 800083a:	3778      	adds	r7, #120	; 0x78
 800083c:	46bd      	mov	sp, r7
 800083e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000842:	b002      	add	sp, #8
 8000844:	4770      	bx	lr

08000846 <xy_to_pix>:
	unsigned int adr;
	unsigned char mask;
} pix_coord;

static inline pix_coord xy_to_pix(int x, int y)
{
 8000846:	b480      	push	{r7}
 8000848:	b087      	sub	sp, #28
 800084a:	af00      	add	r7, sp, #0
 800084c:	60f8      	str	r0, [r7, #12]
 800084e:	60b9      	str	r1, [r7, #8]
 8000850:	607a      	str	r2, [r7, #4]
	pix_coord res;
	res.adr = (y >> 3) * LCD_WIDTH + x;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	10db      	asrs	r3, r3, #3
 8000856:	2254      	movs	r2, #84	; 0x54
 8000858:	fb03 f202 	mul.w	r2, r3, r2
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	4413      	add	r3, r2
 8000860:	613b      	str	r3, [r7, #16]
	res.mask = (1 << (y & 0x07));
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f003 0307 	and.w	r3, r3, #7
 8000868:	2201      	movs	r2, #1
 800086a:	fa02 f303 	lsl.w	r3, r2, r3
 800086e:	b2db      	uxtb	r3, r3
 8000870:	753b      	strb	r3, [r7, #20]

	return res;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	461a      	mov	r2, r3
 8000876:	f107 0310 	add.w	r3, r7, #16
 800087a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800087e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000882:	68f8      	ldr	r0, [r7, #12]
 8000884:	371c      	adds	r7, #28
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <LCD5110_clrscr>:

void LCD5110_clrscr(LCD5110_conf* lcd_conf) {
 800088e:	b480      	push	{r7}
 8000890:	b085      	sub	sp, #20
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	e008      	b.n	80008ae <LCD5110_clrscr+0x20>
		lcd_conf->video_buffer[i] = 0;
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	4413      	add	r3, r2
 80008a2:	331c      	adds	r3, #28
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	3301      	adds	r3, #1
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80008b4:	dbf2      	blt.n	800089c <LCD5110_clrscr+0xe>
	}
}
 80008b6:	bf00      	nop
 80008b8:	bf00      	nop
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <LCD5110_putpix>:
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
		lcd_conf->video_buffer[i] = 0xFF;
	}
}

void LCD5110_putpix(int x, int y, int color, LCD5110_conf* lcd_conf) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
 80008d0:	603b      	str	r3, [r7, #0]
	if ( (x < 0) || (y < 0) || (x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	db31      	blt.n	800093c <LCD5110_putpix+0x78>
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	db2e      	blt.n	800093c <LCD5110_putpix+0x78>
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	2b53      	cmp	r3, #83	; 0x53
 80008e2:	dc2b      	bgt.n	800093c <LCD5110_putpix+0x78>
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	2b2f      	cmp	r3, #47	; 0x2f
 80008e8:	dc28      	bgt.n	800093c <LCD5110_putpix+0x78>
		return;
	pix_coord  c = xy_to_pix(x, y);
 80008ea:	f107 0310 	add.w	r3, r7, #16
 80008ee:	68ba      	ldr	r2, [r7, #8]
 80008f0:	68f9      	ldr	r1, [r7, #12]
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff ffa7 	bl	8000846 <xy_to_pix>

	if (color)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d00c      	beq.n	8000918 <LCD5110_putpix+0x54>
		lcd_conf->video_buffer[c.adr] |= c.mask;
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	683a      	ldr	r2, [r7, #0]
 8000902:	4413      	add	r3, r2
 8000904:	7f19      	ldrb	r1, [r3, #28]
 8000906:	7d3a      	ldrb	r2, [r7, #20]
 8000908:	693b      	ldr	r3, [r7, #16]
 800090a:	430a      	orrs	r2, r1
 800090c:	b2d1      	uxtb	r1, r2
 800090e:	683a      	ldr	r2, [r7, #0]
 8000910:	4413      	add	r3, r2
 8000912:	460a      	mov	r2, r1
 8000914:	771a      	strb	r2, [r3, #28]
 8000916:	e012      	b.n	800093e <LCD5110_putpix+0x7a>
	else
		lcd_conf->video_buffer[c.adr] &= ~c.mask;
 8000918:	693b      	ldr	r3, [r7, #16]
 800091a:	683a      	ldr	r2, [r7, #0]
 800091c:	4413      	add	r3, r2
 800091e:	7f1b      	ldrb	r3, [r3, #28]
 8000920:	b25a      	sxtb	r2, r3
 8000922:	7d3b      	ldrb	r3, [r7, #20]
 8000924:	b25b      	sxtb	r3, r3
 8000926:	43db      	mvns	r3, r3
 8000928:	b25b      	sxtb	r3, r3
 800092a:	4013      	ands	r3, r2
 800092c:	b25a      	sxtb	r2, r3
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	b2d1      	uxtb	r1, r2
 8000932:	683a      	ldr	r2, [r7, #0]
 8000934:	4413      	add	r3, r2
 8000936:	460a      	mov	r2, r1
 8000938:	771a      	strb	r2, [r3, #28]
 800093a:	e000      	b.n	800093e <LCD5110_putpix+0x7a>
		return;
 800093c:	bf00      	nop
}
 800093e:	3718      	adds	r7, #24
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <LCD5110_drawBitmap>:
}

//! TODO: optimize! Slow!
//! TODO: add different bitmap modes -- OR/AND/XOR
void LCD5110_drawBitmap(int x, int y, const unsigned char* bitmap, int cols, int rows, int invert, LCD5110_conf* lcd_conf)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
 8000950:	603b      	str	r3, [r7, #0]
	for(int cx=0; cx<cols; cx++)
 8000952:	2300      	movs	r3, #0
 8000954:	61fb      	str	r3, [r7, #28]
 8000956:	e042      	b.n	80009de <LCD5110_drawBitmap+0x9a>
	{
		for (int cy=0; cy<rows; cy++)
 8000958:	2300      	movs	r3, #0
 800095a:	61bb      	str	r3, [r7, #24]
 800095c:	e038      	b.n	80009d0 <LCD5110_drawBitmap+0x8c>
		{
			unsigned char temp = bitmap[(cy/8)*cols + cx];
 800095e:	69bb      	ldr	r3, [r7, #24]
 8000960:	2b00      	cmp	r3, #0
 8000962:	da00      	bge.n	8000966 <LCD5110_drawBitmap+0x22>
 8000964:	3307      	adds	r3, #7
 8000966:	10db      	asrs	r3, r3, #3
 8000968:	461a      	mov	r2, r3
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	fb03 f202 	mul.w	r2, r3, r2
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	4413      	add	r3, r2
 8000974:	461a      	mov	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	75fb      	strb	r3, [r7, #23]
			temp &= 1<<(cy%8);
 800097e:	69bb      	ldr	r3, [r7, #24]
 8000980:	425a      	negs	r2, r3
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	f002 0207 	and.w	r2, r2, #7
 800098a:	bf58      	it	pl
 800098c:	4253      	negpl	r3, r2
 800098e:	2201      	movs	r2, #1
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	b25a      	sxtb	r2, r3
 8000996:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800099a:	4013      	ands	r3, r2
 800099c:	b25b      	sxtb	r3, r3
 800099e:	75fb      	strb	r3, [r7, #23]
			LCD5110_putpix(x+cx, y+cy,  invert ? !temp : temp, lcd_conf);
 80009a0:	68fa      	ldr	r2, [r7, #12]
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	18d0      	adds	r0, r2, r3
 80009a6:	68ba      	ldr	r2, [r7, #8]
 80009a8:	69bb      	ldr	r3, [r7, #24]
 80009aa:	18d1      	adds	r1, r2, r3
 80009ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d007      	beq.n	80009c2 <LCD5110_drawBitmap+0x7e>
 80009b2:	7dfb      	ldrb	r3, [r7, #23]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	bf0c      	ite	eq
 80009b8:	2301      	moveq	r3, #1
 80009ba:	2300      	movne	r3, #0
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	461a      	mov	r2, r3
 80009c0:	e000      	b.n	80009c4 <LCD5110_drawBitmap+0x80>
 80009c2:	7dfa      	ldrb	r2, [r7, #23]
 80009c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009c6:	f7ff ff7d 	bl	80008c4 <LCD5110_putpix>
		for (int cy=0; cy<rows; cy++)
 80009ca:	69bb      	ldr	r3, [r7, #24]
 80009cc:	3301      	adds	r3, #1
 80009ce:	61bb      	str	r3, [r7, #24]
 80009d0:	69ba      	ldr	r2, [r7, #24]
 80009d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d4:	429a      	cmp	r2, r3
 80009d6:	dbc2      	blt.n	800095e <LCD5110_drawBitmap+0x1a>
	for(int cx=0; cx<cols; cx++)
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	3301      	adds	r3, #1
 80009dc:	61fb      	str	r3, [r7, #28]
 80009de:	69fa      	ldr	r2, [r7, #28]
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	429a      	cmp	r2, r3
 80009e4:	dbb8      	blt.n	8000958 <LCD5110_drawBitmap+0x14>
		}
	}
}
 80009e6:	bf00      	nop
 80009e8:	bf00      	nop
 80009ea:	3720      	adds	r7, #32
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <send_byte_to_LCD5110>:
#include <stdio.h>

#define SUPPRESS_WARNING(x) (void)x

static inline HAL_StatusTypeDef send_byte_to_LCD5110(uint8_t dat, LCD5110_conf* lcd_conf)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	6039      	str	r1, [r7, #0]
 80009fa:	71fb      	strb	r3, [r7, #7]
	//! HAL_SPI_Transmit takes care about waiting transmission to finish.
	//! Details: https://habrahabr.ru/post/276605/ -- do not turn command mode off
	//! before transmission finished. (Check BSY flag before DC_on/off, if directly
	//! manipulating SPIx_DR.
	return HAL_SPI_Transmit(lcd_conf->spi_handle, &dat, 1, 1000);
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	6818      	ldr	r0, [r3, #0]
 8000a00:	1df9      	adds	r1, r7, #7
 8000a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a06:	2201      	movs	r2, #1
 8000a08:	f004 fbe1 	bl	80051ce <HAL_SPI_Transmit>
 8000a0c:	4603      	mov	r3, r0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <send_data_to_LCD5110>:

static inline HAL_StatusTypeDef send_data_to_LCD5110(uint8_t data[], uint16_t size, LCD5110_conf* lcd_conf)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b084      	sub	sp, #16
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	60f8      	str	r0, [r7, #12]
 8000a1e:	460b      	mov	r3, r1
 8000a20:	607a      	str	r2, [r7, #4]
 8000a22:	817b      	strh	r3, [r7, #10]
	return HAL_SPI_Transmit(lcd_conf->spi_handle, data, size, 1000);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	6818      	ldr	r0, [r3, #0]
 8000a28:	897a      	ldrh	r2, [r7, #10]
 8000a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2e:	68f9      	ldr	r1, [r7, #12]
 8000a30:	f004 fbcd 	bl	80051ce <HAL_SPI_Transmit>
 8000a34:	4603      	mov	r3, r0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <LCD5110_CE_off>:

static inline void LCD5110_CE_on(LCD5110_conf* lcd_conf) {
	SUPPRESS_WARNING(LCD5110_CE_on);
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_SET);
}
static inline void LCD5110_CE_off(LCD5110_conf* lcd_conf) {
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_RESET);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6898      	ldr	r0, [r3, #8]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	889b      	ldrh	r3, [r3, #4]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	4619      	mov	r1, r3
 8000a52:	f001 fb3f 	bl	80020d4 <HAL_GPIO_WritePin>
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <LCD5110_DC_on>:
//! Data mode on
static inline void LCD5110_DC_on(LCD5110_conf* lcd_conf) {
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_SET);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6998      	ldr	r0, [r3, #24]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	8a9b      	ldrh	r3, [r3, #20]
 8000a6e:	2201      	movs	r2, #1
 8000a70:	4619      	mov	r1, r3
 8000a72:	f001 fb2f 	bl	80020d4 <HAL_GPIO_WritePin>
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <LCD5110_DC_off>:
//! Commands mode on
static inline void LCD5110_DC_off(LCD5110_conf* lcd_conf) {
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b082      	sub	sp, #8
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_RESET);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6998      	ldr	r0, [r3, #24]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	8a9b      	ldrh	r3, [r3, #20]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	4619      	mov	r1, r3
 8000a92:	f001 fb1f 	bl	80020d4 <HAL_GPIO_WritePin>
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <LCD5110_RST_on>:
static inline void LCD5110_RST_on(LCD5110_conf* lcd_conf) {
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b082      	sub	sp, #8
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_SET);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6918      	ldr	r0, [r3, #16]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	899b      	ldrh	r3, [r3, #12]
 8000aae:	2201      	movs	r2, #1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f001 fb0f 	bl	80020d4 <HAL_GPIO_WritePin>
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <LCD5110_RST_off>:
static inline void LCD5110_RST_off(LCD5110_conf* lcd_conf) {
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b082      	sub	sp, #8
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_RESET);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6918      	ldr	r0, [r3, #16]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	899b      	ldrh	r3, [r3, #12]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	f001 faff 	bl	80020d4 <HAL_GPIO_WritePin>
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <LCD5110_set_function>:

#define FN_SET_MASK (1<<5)

//! Code: 0010 0PVH, accepts both 00100PVH and 0PVH, but no other.
static int LCD5110_set_function(uint8_t fn_byte, LCD5110_conf* lcd_conf)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	6039      	str	r1, [r7, #0]
 8000ae8:	71fb      	strb	r3, [r7, #7]
	if ( (fn_byte & ~FN_SET_MASK) > 7) //0b111
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	f023 0320 	bic.w	r3, r3, #32
 8000af0:	2b07      	cmp	r3, #7
 8000af2:	dd01      	ble.n	8000af8 <LCD5110_set_function+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_opcode;
 8000af4:	2301      	movs	r3, #1
 8000af6:	e008      	b.n	8000b0a <LCD5110_set_function+0x2c>
	}
	//printf("Seq: %i, dbg: %i \n", fn_byte | FN_SET_MASK, fn_byte );
	send_byte_to_LCD5110(fn_byte | FN_SET_MASK, lcd_conf);
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	f043 0320 	orr.w	r3, r3, #32
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	6839      	ldr	r1, [r7, #0]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff ff74 	bl	80009f0 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <LCD5110_set_mode_base>:

//! H==0
static int LCD5110_set_mode_base(LCD5110_modes mode_byte, LCD5110_conf* lcd_conf)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b082      	sub	sp, #8
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	4603      	mov	r3, r0
 8000b1a:	6039      	str	r1, [r7, #0]
 8000b1c:	71fb      	strb	r3, [r7, #7]
	if ( (mode_byte & (~LCD5110_INVERTED_MODE) ) != 0) //0b10x0y -- only possible values
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	f023 030d 	bic.w	r3, r3, #13
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <LCD5110_set_mode_base+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_dmode;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	e005      	b.n	8000b38 <LCD5110_set_mode_base+0x26>
	}
	//printf("Seq: %i\n", mode_byte);
	send_byte_to_LCD5110(mode_byte, lcd_conf);
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	6839      	ldr	r1, [r7, #0]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ff5d 	bl	80009f0 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <LCD5110_set_voltage_ext>:

#define LCD5110_VOLTAGE_MASK (1<<7)

//! H==1
static int LCD5110_set_voltage_ext(uint8_t voltage, LCD5110_conf* lcd_conf)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	6039      	str	r1, [r7, #0]
 8000b4a:	71fb      	strb	r3, [r7, #7]
	if ( voltage > 127)
 8000b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	da01      	bge.n	8000b58 <LCD5110_set_voltage_ext+0x18>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_voltage;
 8000b54:	2303      	movs	r3, #3
 8000b56:	e008      	b.n	8000b6a <LCD5110_set_voltage_ext+0x2a>
	}
	//printf("Seq: %i\n", voltage | LCD5110_VOLTAGE_MASK);
	send_byte_to_LCD5110(voltage | LCD5110_VOLTAGE_MASK, lcd_conf);
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	6839      	ldr	r1, [r7, #0]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff ff44 	bl	80009f0 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <LCD5110_set_temp_coef_ext>:

#define LCD5110_TEMP_COEFF_MASK (1<<2)
//! H==1
static int LCD5110_set_temp_coef_ext(uint8_t TC, LCD5110_conf* lcd_conf)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b082      	sub	sp, #8
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	4603      	mov	r3, r0
 8000b7a:	6039      	str	r1, [r7, #0]
 8000b7c:	71fb      	strb	r3, [r7, #7]
	if ( TC > 3)
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	2b03      	cmp	r3, #3
 8000b82:	d901      	bls.n	8000b88 <LCD5110_set_temp_coef_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_TC;
 8000b84:	2304      	movs	r3, #4
 8000b86:	e008      	b.n	8000b9a <LCD5110_set_temp_coef_ext+0x28>
	}
	//printf("Seq: %i\n", TC | LCD5110_TEMP_COEFF_MASK);
	send_byte_to_LCD5110(TC | LCD5110_TEMP_COEFF_MASK, lcd_conf);
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	f043 0304 	orr.w	r3, r3, #4
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	6839      	ldr	r1, [r7, #0]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff ff2c 	bl	80009f0 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <LCD5110_set_bias_ext>:
}

#define LCD5110_BIAS_MASK (1<<4)
//! H==1
static int LCD5110_set_bias_ext(uint8_t bias, LCD5110_conf* lcd_conf)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	4603      	mov	r3, r0
 8000baa:	6039      	str	r1, [r7, #0]
 8000bac:	71fb      	strb	r3, [r7, #7]
	if ( bias > 7)
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	2b07      	cmp	r3, #7
 8000bb2:	d901      	bls.n	8000bb8 <LCD5110_set_bias_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_bias;
 8000bb4:	2305      	movs	r3, #5
 8000bb6:	e008      	b.n	8000bca <LCD5110_set_bias_ext+0x28>
	}
	//printf("Seq: %i\n", bias | LCD5110_BIAS_MASK);
	send_byte_to_LCD5110(bias | LCD5110_BIAS_MASK, lcd_conf);
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	f043 0310 	orr.w	r3, r3, #16
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	6839      	ldr	r1, [r7, #0]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff ff14 	bl	80009f0 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <LCD5110_set_X_base>:
#define LCD5110_SET_Y_BIT 6
#define LCD5110_SET_Y_BIT_MASK (1<<LCD5110_SET_Y_BIT)


static inline int LCD5110_set_X_base(int16_t x, LCD5110_conf* lcd_conf)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	4603      	mov	r3, r0
 8000bda:	6039      	str	r1, [r7, #0]
 8000bdc:	80fb      	strh	r3, [r7, #6]
	if(x<0 || x>LCD_WIDTH-1)
 8000bde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	db03      	blt.n	8000bee <LCD5110_set_X_base+0x1c>
 8000be6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bea:	2b53      	cmp	r3, #83	; 0x53
 8000bec:	dd01      	ble.n	8000bf2 <LCD5110_set_X_base+0x20>
		return LCD5110_bad_coordinate;
 8000bee:	2307      	movs	r3, #7
 8000bf0:	e00a      	b.n	8000c08 <LCD5110_set_X_base+0x36>
	send_byte_to_LCD5110(x | LCD5110_SET_X_BIT_MASK, lcd_conf);
 8000bf2:	88fb      	ldrh	r3, [r7, #6]
 8000bf4:	b25b      	sxtb	r3, r3
 8000bf6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bfa:	b25b      	sxtb	r3, r3
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	6839      	ldr	r1, [r7, #0]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fef5 	bl	80009f0 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000c06:	2300      	movs	r3, #0
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <LCD5110_set_Y_base>:

//! Byte addresable!
static inline int LCD5110_set_Y_base(int16_t y, LCD5110_conf* lcd_conf)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	6039      	str	r1, [r7, #0]
 8000c1a:	80fb      	strh	r3, [r7, #6]
	if(y<0 || y>LCD_HEIGHT/8-1) // Byte addressable!
 8000c1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	db03      	blt.n	8000c2c <LCD5110_set_Y_base+0x1c>
 8000c24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c28:	2b05      	cmp	r3, #5
 8000c2a:	dd01      	ble.n	8000c30 <LCD5110_set_Y_base+0x20>
		return LCD5110_bad_coordinate;
 8000c2c:	2307      	movs	r3, #7
 8000c2e:	e00a      	b.n	8000c46 <LCD5110_set_Y_base+0x36>
	send_byte_to_LCD5110(y | LCD5110_SET_Y_BIT_MASK, lcd_conf);
 8000c30:	88fb      	ldrh	r3, [r7, #6]
 8000c32:	b25b      	sxtb	r3, r3
 8000c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c38:	b25b      	sxtb	r3, r3
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	6839      	ldr	r1, [r7, #0]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fed6 	bl	80009f0 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <LCD5110_set_XY_base>:

static inline int LCD5110_set_XY_base(int16_t x, int16_t y, LCD5110_conf* lcd_conf)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b084      	sub	sp, #16
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	4603      	mov	r3, r0
 8000c56:	603a      	str	r2, [r7, #0]
 8000c58:	80fb      	strh	r3, [r7, #6]
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	80bb      	strh	r3, [r7, #4]
	int res;
	res = LCD5110_set_X_base(x, lcd_conf);
 8000c5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c62:	6839      	ldr	r1, [r7, #0]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ffb4 	bl	8000bd2 <LCD5110_set_X_base>
 8000c6a:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <LCD5110_set_XY_base+0x28>
		return res;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	e00c      	b.n	8000c90 <LCD5110_set_XY_base+0x42>
	res = LCD5110_set_Y_base(y, lcd_conf);
 8000c76:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c7a:	6839      	ldr	r1, [r7, #0]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ffc7 	bl	8000c10 <LCD5110_set_Y_base>
 8000c82:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <LCD5110_set_XY_base+0x40>
		return res;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	e000      	b.n	8000c90 <LCD5110_set_XY_base+0x42>

	return LCD5110_OK;
 8000c8e:	2300      	movs	r3, #0
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <SPI_enable>:


static inline void SPI_enable(LCD5110_conf* lcd_conf)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	__HAL_SPI_ENABLE( (lcd_conf->spi_handle) );
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000cb2:	601a      	str	r2, [r3, #0]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <LCD5110_init>:
int LCD5110_init(LCD5110_conf* 		lcd_conf,
				 LCD5110_modes 		dmode,
				 uint8_t 	  	    voltage,
				 uint8_t		    temp_coeff,
				 uint8_t		    bias
){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	4608      	mov	r0, r1
 8000cca:	4611      	mov	r1, r2
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4603      	mov	r3, r0
 8000cd0:	70fb      	strb	r3, [r7, #3]
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	70bb      	strb	r3, [r7, #2]
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	707b      	strb	r3, [r7, #1]
	SPI_enable(lcd_conf);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff ffdc 	bl	8000c98 <SPI_enable>
	LCD5110_CE_off(lcd_conf);
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f7ff feac 	bl	8000a3e <LCD5110_CE_off>

	//LCD5110_VCC_on();
	LCD5110_RST_off(lcd_conf); // Minimum 100 ns, maximum not limited (tbl. 12 AC CHARACTERISTICS, pic. 16)
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff fee9 	bl	8000abe <LCD5110_RST_off>
	volatile int i = 100; // HAL_Delay() too slow, do not want to depend on some delay_us here.
 8000cec:	2364      	movs	r3, #100	; 0x64
 8000cee:	60fb      	str	r3, [r7, #12]
	while (--i){}
 8000cf0:	bf00      	nop
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d1fa      	bne.n	8000cf2 <LCD5110_init+0x32>
	LCD5110_RST_on(lcd_conf);
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff fece 	bl	8000a9e <LCD5110_RST_on>

	LCD5110_DC_off(lcd_conf); // Commands mode on
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff febb 	bl	8000a7e <LCD5110_DC_off>
	//! Extended commands (bit H==1), horizontal addressing
	LCD5110_set_function(LCD5110_FN_SET_H_MASK, lcd_conf);
 8000d08:	6879      	ldr	r1, [r7, #4]
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	f7ff fee7 	bl	8000ade <LCD5110_set_function>
	//! Set display voltage
	LCD5110_set_voltage_ext(voltage, lcd_conf);
 8000d10:	78bb      	ldrb	r3, [r7, #2]
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ff13 	bl	8000b40 <LCD5110_set_voltage_ext>
	//! Set temperature coefficient
	LCD5110_set_temp_coef_ext(temp_coeff, lcd_conf);
 8000d1a:	787b      	ldrb	r3, [r7, #1]
 8000d1c:	6879      	ldr	r1, [r7, #4]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff ff27 	bl	8000b72 <LCD5110_set_temp_coef_ext>
	//! Set bias
	LCD5110_set_bias_ext(bias, lcd_conf);
 8000d24:	7e3b      	ldrb	r3, [r7, #24]
 8000d26:	6879      	ldr	r1, [r7, #4]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff3a 	bl	8000ba2 <LCD5110_set_bias_ext>


	//! Basic commands (bit H==0), horizontal addressing
	LCD5110_set_function(0, lcd_conf);
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	2000      	movs	r0, #0
 8000d32:	f7ff fed4 	bl	8000ade <LCD5110_set_function>
	//! Set display mode
	LCD5110_set_mode_base(dmode, lcd_conf);
 8000d36:	78fb      	ldrb	r3, [r7, #3]
 8000d38:	6879      	ldr	r1, [r7, #4]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fee9 	bl	8000b12 <LCD5110_set_mode_base>

	return LCD5110_OK;
 8000d40:	2300      	movs	r3, #0
	//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <LCD5110_refresh_ll>:

//
void LCD5110_refresh_ll(LCD5110_conf* lcd_conf)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
	LCD5110_CE_off(lcd_conf);
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff fe73 	bl	8000a3e <LCD5110_CE_off>
	LCD5110_DC_off(lcd_conf);
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff fe90 	bl	8000a7e <LCD5110_DC_off>
	LCD5110_set_XY_base(0, 0, lcd_conf);
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	2100      	movs	r1, #0
 8000d62:	2000      	movs	r0, #0
 8000d64:	f7ff ff73 	bl	8000c4e <LCD5110_set_XY_base>
	LCD5110_DC_on(lcd_conf);
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff fe78 	bl	8000a5e <LCD5110_DC_on>

	send_data_to_LCD5110(lcd_conf->video_buffer, LCD_HEIGHT*LCD_WIDTH/8, lcd_conf);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	331c      	adds	r3, #28
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fe4c 	bl	8000a16 <send_data_to_LCD5110>
//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN PFP */
LCD5110_display lcd1;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if( htim->Instance == TIM10 )
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a06      	ldr	r2, [pc, #24]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d104      	bne.n	8000da4 <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
   ++tim10_overflows;
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000da2:	6013      	str	r3, [r2, #0]
  }
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	40014400 	.word	0x40014400
 8000db4:	20000240 	.word	0x20000240

08000db8 <TIM10_reinit>:


void TIM10_reinit()
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
 HAL_TIM_Base_Stop(&htim10);
 8000dbc:	4809      	ldr	r0, [pc, #36]	; (8000de4 <TIM10_reinit+0x2c>)
 8000dbe:	f004 fc5c 	bl	800567a <HAL_TIM_Base_Stop>
  __HAL_TIM_SET_PRESCALER( &htim10, (SystemCoreClockInMHz-1) );
 8000dc2:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <TIM10_reinit+0x2c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	225f      	movs	r2, #95	; 0x5f
 8000dc8:	629a      	str	r2, [r3, #40]	; 0x28
 __HAL_TIM_SET_COUNTER( &htim10, 0 );
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <TIM10_reinit+0x2c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	625a      	str	r2, [r3, #36]	; 0x24
 tim10_overflows = 0;
 8000dd2:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <TIM10_reinit+0x30>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 HAL_TIM_Base_Start_IT(&htim10);
 8000dd8:	4802      	ldr	r0, [pc, #8]	; (8000de4 <TIM10_reinit+0x2c>)
 8000dda:	f004 fc75 	bl	80056c8 <HAL_TIM_Base_Start_IT>
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200001f8 	.word	0x200001f8
 8000de8:	20000240 	.word	0x20000240

08000dec <get_tim10_us>:


uint32_t get_tim10_us()
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 __HAL_TIM_DISABLE_IT(&htim10, TIM_IT_UPDATE);
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <get_tim10_us+0x4c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	68da      	ldr	r2, [r3, #12]
 8000df8:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <get_tim10_us+0x4c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f022 0201 	bic.w	r2, r2, #1
 8000e00:	60da      	str	r2, [r3, #12]
 uint32_t res = tim10_overflows * OVERFLOW_VALUE + __HAL_TIM_GET_COUNTER(&htim10);
 8000e02:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <get_tim10_us+0x50>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e0a:	fb03 f202 	mul.w	r2, r3, r2
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <get_tim10_us+0x4c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e14:	4413      	add	r3, r2
 8000e16:	607b      	str	r3, [r7, #4]
 __HAL_TIM_ENABLE_IT(&htim10, TIM_IT_UPDATE);
 8000e18:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <get_tim10_us+0x4c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	68da      	ldr	r2, [r3, #12]
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <get_tim10_us+0x4c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f042 0201 	orr.w	r2, r2, #1
 8000e26:	60da      	str	r2, [r3, #12]
 return res;
 8000e28:	687b      	ldr	r3, [r7, #4]
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	200001f8 	.word	0x200001f8
 8000e3c:	20000240 	.word	0x20000240

08000e40 <udelay_TIM10>:


void udelay_TIM10(uint32_t useconds) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 uint32_t before = get_tim10_us();
 8000e48:	f7ff ffd0 	bl	8000dec <get_tim10_us>
 8000e4c:	60f8      	str	r0, [r7, #12]
 while( get_tim10_us() < before+useconds){}
 8000e4e:	bf00      	nop
 8000e50:	f7ff ffcc 	bl	8000dec <get_tim10_us>
 8000e54:	4601      	mov	r1, r0
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d3f7      	bcc.n	8000e50 <udelay_TIM10+0x10>
}
 8000e60:	bf00      	nop
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	80fb      	strh	r3, [r7, #6]
 if (GPIO_Pin == ECHO_Pin )
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e7c:	d12e      	bne.n	8000edc <HAL_GPIO_EXTI_Callback+0x70>
 {
  switch (state) {
 8000e7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ee8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d002      	beq.n	8000e8e <HAL_GPIO_EXTI_Callback+0x22>
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d009      	beq.n	8000ea0 <HAL_GPIO_EXTI_Callback+0x34>
 8000e8c:	e022      	b.n	8000ed4 <HAL_GPIO_EXTI_Callback+0x68>
  case WAITING_FOR_ECHO_START_S: {
   echo_start =  get_tim10_us();
 8000e8e:	f7ff ffad 	bl	8000dec <get_tim10_us>
 8000e92:	4603      	mov	r3, r0
 8000e94:	4a15      	ldr	r2, [pc, #84]	; (8000eec <HAL_GPIO_EXTI_Callback+0x80>)
 8000e96:	6013      	str	r3, [r2, #0]
   state = WAITING_FOR_ECHO_STOP_S;
 8000e98:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000e9a:	2202      	movs	r2, #2
 8000e9c:	701a      	strb	r2, [r3, #0]
   break;
 8000e9e:	e01e      	b.n	8000ede <HAL_GPIO_EXTI_Callback+0x72>
  }
  case WAITING_FOR_ECHO_STOP_S: {
   echo_finish = get_tim10_us();
 8000ea0:	f7ff ffa4 	bl	8000dec <get_tim10_us>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	4a12      	ldr	r2, [pc, #72]	; (8000ef0 <HAL_GPIO_EXTI_Callback+0x84>)
 8000ea8:	6013      	str	r3, [r2, #0]
   measured_time = echo_finish - echo_start;
 8000eaa:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <HAL_GPIO_EXTI_Callback+0x84>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <HAL_GPIO_EXTI_Callback+0x80>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	4a0f      	ldr	r2, [pc, #60]	; (8000ef4 <HAL_GPIO_EXTI_Callback+0x88>)
 8000eb6:	6013      	str	r3, [r2, #0]
   if(measured_time>=NO_RESULT_TIME){
 8000eb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <HAL_GPIO_EXTI_Callback+0x88>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f249 426f 	movw	r2, #37999	; 0x946f
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d903      	bls.n	8000ecc <HAL_GPIO_EXTI_Callback+0x60>
	   state = ECHO_TIMEOUT_S;
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	701a      	strb	r2, [r3, #0]
   } else {
	   state = READING_DATA_S;
   }
   break;
 8000eca:	e008      	b.n	8000ede <HAL_GPIO_EXTI_Callback+0x72>
	   state = READING_DATA_S;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000ece:	2204      	movs	r2, #4
 8000ed0:	701a      	strb	r2, [r3, #0]
   break;
 8000ed2:	e004      	b.n	8000ede <HAL_GPIO_EXTI_Callback+0x72>
  }
  default:
   state = ERROR_S;
 8000ed4:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000ed6:	2205      	movs	r2, #5
 8000ed8:	701a      	strb	r2, [r3, #0]
  }
 }
}
 8000eda:	e000      	b.n	8000ede <HAL_GPIO_EXTI_Callback+0x72>
 }
 8000edc:	bf00      	nop
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000244 	.word	0x20000244
 8000eec:	20000248 	.word	0x20000248
 8000ef0:	2000024c 	.word	0x2000024c
 8000ef4:	20000250 	.word	0x20000250

08000ef8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 8000efe:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f00:	f000 fdbc 	bl	8001a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f04:	f000 f8e2 	bl	80010cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f08:	f000 fa36 	bl	8001378 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f0c:	f000 f946 	bl	800119c <MX_I2C1_Init>
  MX_I2S3_Init();
 8000f10:	f000 f972 	bl	80011f8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000f14:	f000 f9a0 	bl	8001258 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000f18:	f007 fdd0 	bl	8008abc <MX_USB_HOST_Init>
  MX_SPI2_Init();
 8000f1c:	f000 f9d2 	bl	80012c4 <MX_SPI2_Init>
  MX_TIM10_Init();
 8000f20:	f000 fa06 	bl	8001330 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  LCD5110_display lcd;

  lcd.hw_conf.spi_handle = &hspi2;
 8000f24:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000f28:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8000f2c:	4a5a      	ldr	r2, [pc, #360]	; (8001098 <main+0x1a0>)
 8000f2e:	601a      	str	r2, [r3, #0]
  lcd.hw_conf.spi_cs_pin =  LCD_CE_Pin;
 8000f30:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000f34:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8000f38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f3c:	809a      	strh	r2, [r3, #4]
  lcd.hw_conf.spi_cs_port = LCD_CE_GPIO_Port;
 8000f3e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000f42:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8000f46:	4a55      	ldr	r2, [pc, #340]	; (800109c <main+0x1a4>)
 8000f48:	609a      	str	r2, [r3, #8]
  lcd.hw_conf.rst_pin =  LCD_RST_Pin;
 8000f4a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000f4e:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8000f52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f56:	819a      	strh	r2, [r3, #12]
  lcd.hw_conf.rst_port = LCD_RST_GPIO_Port;
 8000f58:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000f5c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8000f60:	4a4e      	ldr	r2, [pc, #312]	; (800109c <main+0x1a4>)
 8000f62:	611a      	str	r2, [r3, #16]
  lcd.hw_conf.dc_pin =  LCD_DC_Pin;
 8000f64:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000f68:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8000f6c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f70:	829a      	strh	r2, [r3, #20]
  lcd.hw_conf.dc_port = LCD_DC_GPIO_Port;
 8000f72:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000f76:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8000f7a:	4a49      	ldr	r2, [pc, #292]	; (80010a0 <main+0x1a8>)
 8000f7c:	619a      	str	r2, [r3, #24]
  lcd.def_scr = lcd5110_def_scr;
 8000f7e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000f82:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8000f86:	4a47      	ldr	r2, [pc, #284]	; (80010a4 <main+0x1ac>)
 8000f88:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8000f8c:	4614      	mov	r4, r2
 8000f8e:	6820      	ldr	r0, [r4, #0]
 8000f90:	6861      	ldr	r1, [r4, #4]
 8000f92:	68a2      	ldr	r2, [r4, #8]
 8000f94:	c307      	stmia	r3!, {r0, r1, r2}
 8000f96:	89a2      	ldrh	r2, [r4, #12]
 8000f98:	801a      	strh	r2, [r3, #0]
  LCD5110_init(&lcd.hw_conf, LCD5110_NORMAL_MODE, 0x40, 2, 3);
 8000f9a:	4638      	mov	r0, r7
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	2240      	movs	r2, #64	; 0x40
 8000fa4:	210c      	movs	r1, #12
 8000fa6:	f7ff fe8b 	bl	8000cc0 <LCD5110_init>

  TIM10_reinit();
 8000faa:	f7ff ff05 	bl	8000db8 <TIM10_reinit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fb4:	483c      	ldr	r0, [pc, #240]	; (80010a8 <main+0x1b0>)
 8000fb6:	f001 f88d 	bl	80020d4 <HAL_GPIO_WritePin>
	 udelay_TIM10(TRIGGER_TIME);
 8000fba:	200a      	movs	r0, #10
 8000fbc:	f7ff ff40 	bl	8000e40 <udelay_TIM10>
	 HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fc6:	4838      	ldr	r0, [pc, #224]	; (80010a8 <main+0x1b0>)
 8000fc8:	f001 f884 	bl	80020d4 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fcc:	b672      	cpsid	i
}
 8000fce:	bf00      	nop

	 __disable_irq();
	 state = WAITING_FOR_ECHO_START_S;
 8000fd0:	4b36      	ldr	r3, [pc, #216]	; (80010ac <main+0x1b4>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000fd6:	b662      	cpsie	i
}
 8000fd8:	bf00      	nop
	 __enable_irq();

	 while( state == WAITING_FOR_ECHO_START_S && state != ERROR_S )
 8000fda:	bf00      	nop
 8000fdc:	4b33      	ldr	r3, [pc, #204]	; (80010ac <main+0x1b4>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d104      	bne.n	8000ff0 <main+0xf8>
 8000fe6:	4b31      	ldr	r3, [pc, #196]	; (80010ac <main+0x1b4>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	2b05      	cmp	r3, #5
 8000fee:	d1f5      	bne.n	8000fdc <main+0xe4>
	 {}
	 if ( state == ERROR_S )
 8000ff0:	4b2e      	ldr	r3, [pc, #184]	; (80010ac <main+0x1b4>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b05      	cmp	r3, #5
 8000ff8:	d10a      	bne.n	8001010 <main+0x118>
	 {
		 LCD5110_clear_scr(&lcd);
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fadf 	bl	80005c0 <LCD5110_clear_scr>
		 LCD5110_printf(&lcd, BLACK,"Error while waiting for ECHO to start.\n");
 8001002:	463b      	mov	r3, r7
 8001004:	4a2a      	ldr	r2, [pc, #168]	; (80010b0 <main+0x1b8>)
 8001006:	2101      	movs	r1, #1
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fbf3 	bl	80007f4 <LCD5110_printf>
	     continue;
 800100e:	e042      	b.n	8001096 <main+0x19e>
	 }

	 while( state == WAITING_FOR_ECHO_STOP_S && state != ERROR_S )
 8001010:	bf00      	nop
 8001012:	4b26      	ldr	r3, [pc, #152]	; (80010ac <main+0x1b4>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d104      	bne.n	8001026 <main+0x12e>
 800101c:	4b23      	ldr	r3, [pc, #140]	; (80010ac <main+0x1b4>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b05      	cmp	r3, #5
 8001024:	d1f5      	bne.n	8001012 <main+0x11a>
	 {}
	 if ( state == ERROR_S )
 8001026:	4b21      	ldr	r3, [pc, #132]	; (80010ac <main+0x1b4>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b05      	cmp	r3, #5
 800102e:	d10a      	bne.n	8001046 <main+0x14e>
	 {
		 LCD5110_clear_scr(&lcd);
 8001030:	463b      	mov	r3, r7
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fac4 	bl	80005c0 <LCD5110_clear_scr>
		 LCD5110_printf(&lcd, BLACK,"Error while waiting for ECHO to stop.\n");
 8001038:	463b      	mov	r3, r7
 800103a:	4a1e      	ldr	r2, [pc, #120]	; (80010b4 <main+0x1bc>)
 800103c:	2101      	movs	r1, #1
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fbd8 	bl	80007f4 <LCD5110_printf>
	     continue;
 8001044:	e027      	b.n	8001096 <main+0x19e>
	 }

	 if(state == ECHO_TIMEOUT_S) {
 8001046:	4b19      	ldr	r3, [pc, #100]	; (80010ac <main+0x1b4>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2b03      	cmp	r3, #3
 800104e:	d10a      	bne.n	8001066 <main+0x16e>
		 LCD5110_clear_scr(&lcd);
 8001050:	463b      	mov	r3, r7
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fab4 	bl	80005c0 <LCD5110_clear_scr>
		 LCD5110_printf(&lcd, BLACK,"Unable to\n measure\n");
 8001058:	463b      	mov	r3, r7
 800105a:	4a17      	ldr	r2, [pc, #92]	; (80010b8 <main+0x1c0>)
 800105c:	2101      	movs	r1, #1
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fbc8 	bl	80007f4 <LCD5110_printf>
 8001064:	e012      	b.n	800108c <main+0x194>
	 }
	 else{
		 uint32_t distance = measured_time/CONVERT_FROM_USECONDS_TO_DISTANCE_CM;
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <main+0x1c4>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a15      	ldr	r2, [pc, #84]	; (80010c0 <main+0x1c8>)
 800106c:	fba2 2303 	umull	r2, r3, r2, r3
 8001070:	095b      	lsrs	r3, r3, #5
 8001072:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
		 LCD5110_clear_scr(&lcd);
 8001076:	463b      	mov	r3, r7
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff faa1 	bl	80005c0 <LCD5110_clear_scr>
		 LCD5110_printf(&lcd, BLACK,"Distance: %lu cm\n", distance);
 800107e:	4638      	mov	r0, r7
 8001080:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001084:	4a0f      	ldr	r2, [pc, #60]	; (80010c4 <main+0x1cc>)
 8001086:	2101      	movs	r1, #1
 8001088:	f7ff fbb4 	bl	80007f4 <LCD5110_printf>
	 }

	 udelay_TIM10(REFRESH_DELAY);
 800108c:	480e      	ldr	r0, [pc, #56]	; (80010c8 <main+0x1d0>)
 800108e:	f7ff fed7 	bl	8000e40 <udelay_TIM10>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001092:	f007 fd39 	bl	8008b08 <MX_USB_HOST_Process>
	 HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 8001096:	e78a      	b.n	8000fae <main+0xb6>
 8001098:	200001a0 	.word	0x200001a0
 800109c:	40020c00 	.word	0x40020c00
 80010a0:	40020400 	.word	0x40020400
 80010a4:	0800a0f4 	.word	0x0800a0f4
 80010a8:	40021000 	.word	0x40021000
 80010ac:	20000244 	.word	0x20000244
 80010b0:	08009a78 	.word	0x08009a78
 80010b4:	08009aa0 	.word	0x08009aa0
 80010b8:	08009ac8 	.word	0x08009ac8
 80010bc:	20000250 	.word	0x20000250
 80010c0:	8d3dcb09 	.word	0x8d3dcb09
 80010c4:	08009adc 	.word	0x08009adc
 80010c8:	0007a120 	.word	0x0007a120

080010cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b094      	sub	sp, #80	; 0x50
 80010d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d2:	f107 0320 	add.w	r3, r7, #32
 80010d6:	2230      	movs	r2, #48	; 0x30
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f008 f830 	bl	8009140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	4b27      	ldr	r3, [pc, #156]	; (8001194 <SystemClock_Config+0xc8>)
 80010f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f8:	4a26      	ldr	r2, [pc, #152]	; (8001194 <SystemClock_Config+0xc8>)
 80010fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001100:	4b24      	ldr	r3, [pc, #144]	; (8001194 <SystemClock_Config+0xc8>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800110c:	2300      	movs	r3, #0
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	4b21      	ldr	r3, [pc, #132]	; (8001198 <SystemClock_Config+0xcc>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a20      	ldr	r2, [pc, #128]	; (8001198 <SystemClock_Config+0xcc>)
 8001116:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800111a:	6013      	str	r3, [r2, #0]
 800111c:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <SystemClock_Config+0xcc>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001128:	2301      	movs	r3, #1
 800112a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800112c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001132:	2302      	movs	r3, #2
 8001134:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001136:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800113a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800113c:	2304      	movs	r3, #4
 800113e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001140:	23c0      	movs	r3, #192	; 0xc0
 8001142:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001144:	2304      	movs	r3, #4
 8001146:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001148:	2308      	movs	r3, #8
 800114a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114c:	f107 0320 	add.w	r3, r7, #32
 8001150:	4618      	mov	r0, r3
 8001152:	f003 f9df 	bl	8004514 <HAL_RCC_OscConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800115c:	f000 fa36 	bl	80015cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001160:	230f      	movs	r3, #15
 8001162:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001164:	2302      	movs	r3, #2
 8001166:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800116c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001170:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001176:	f107 030c 	add.w	r3, r7, #12
 800117a:	2103      	movs	r1, #3
 800117c:	4618      	mov	r0, r3
 800117e:	f003 fc41 	bl	8004a04 <HAL_RCC_ClockConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001188:	f000 fa20 	bl	80015cc <Error_Handler>
  }
}
 800118c:	bf00      	nop
 800118e:	3750      	adds	r7, #80	; 0x50
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40023800 	.word	0x40023800
 8001198:	40007000 	.word	0x40007000

0800119c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <MX_I2C1_Init+0x50>)
 80011a2:	4a13      	ldr	r2, [pc, #76]	; (80011f0 <MX_I2C1_Init+0x54>)
 80011a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011a6:	4b11      	ldr	r3, [pc, #68]	; (80011ec <MX_I2C1_Init+0x50>)
 80011a8:	4a12      	ldr	r2, [pc, #72]	; (80011f4 <MX_I2C1_Init+0x58>)
 80011aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011ac:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <MX_I2C1_Init+0x50>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <MX_I2C1_Init+0x50>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <MX_I2C1_Init+0x50>)
 80011ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c0:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <MX_I2C1_Init+0x50>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <MX_I2C1_Init+0x50>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011cc:	4b07      	ldr	r3, [pc, #28]	; (80011ec <MX_I2C1_Init+0x50>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <MX_I2C1_Init+0x50>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011d8:	4804      	ldr	r0, [pc, #16]	; (80011ec <MX_I2C1_Init+0x50>)
 80011da:	f002 fbb7 	bl	800394c <HAL_I2C_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011e4:	f000 f9f2 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	200000ac 	.word	0x200000ac
 80011f0:	40005400 	.word	0x40005400
 80011f4:	000186a0 	.word	0x000186a0

080011f8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <MX_I2S3_Init+0x54>)
 80011fe:	4a14      	ldr	r2, [pc, #80]	; (8001250 <MX_I2S3_Init+0x58>)
 8001200:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001202:	4b12      	ldr	r3, [pc, #72]	; (800124c <MX_I2S3_Init+0x54>)
 8001204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001208:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800120a:	4b10      	ldr	r3, [pc, #64]	; (800124c <MX_I2S3_Init+0x54>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001210:	4b0e      	ldr	r3, [pc, #56]	; (800124c <MX_I2S3_Init+0x54>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001216:	4b0d      	ldr	r3, [pc, #52]	; (800124c <MX_I2S3_Init+0x54>)
 8001218:	f44f 7200 	mov.w	r2, #512	; 0x200
 800121c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800121e:	4b0b      	ldr	r3, [pc, #44]	; (800124c <MX_I2S3_Init+0x54>)
 8001220:	4a0c      	ldr	r2, [pc, #48]	; (8001254 <MX_I2S3_Init+0x5c>)
 8001222:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001224:	4b09      	ldr	r3, [pc, #36]	; (800124c <MX_I2S3_Init+0x54>)
 8001226:	2200      	movs	r2, #0
 8001228:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800122a:	4b08      	ldr	r3, [pc, #32]	; (800124c <MX_I2S3_Init+0x54>)
 800122c:	2200      	movs	r2, #0
 800122e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <MX_I2S3_Init+0x54>)
 8001232:	2200      	movs	r2, #0
 8001234:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001236:	4805      	ldr	r0, [pc, #20]	; (800124c <MX_I2S3_Init+0x54>)
 8001238:	f002 fccc 	bl	8003bd4 <HAL_I2S_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001242:	f000 f9c3 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000100 	.word	0x20000100
 8001250:	40003c00 	.word	0x40003c00
 8001254:	00017700 	.word	0x00017700

08001258 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800125c:	4b17      	ldr	r3, [pc, #92]	; (80012bc <MX_SPI1_Init+0x64>)
 800125e:	4a18      	ldr	r2, [pc, #96]	; (80012c0 <MX_SPI1_Init+0x68>)
 8001260:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001262:	4b16      	ldr	r3, [pc, #88]	; (80012bc <MX_SPI1_Init+0x64>)
 8001264:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001268:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800126a:	4b14      	ldr	r3, [pc, #80]	; (80012bc <MX_SPI1_Init+0x64>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <MX_SPI1_Init+0x64>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <MX_SPI1_Init+0x64>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800127c:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <MX_SPI1_Init+0x64>)
 800127e:	2200      	movs	r2, #0
 8001280:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001282:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <MX_SPI1_Init+0x64>)
 8001284:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001288:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800128a:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <MX_SPI1_Init+0x64>)
 800128c:	2200      	movs	r2, #0
 800128e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001290:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <MX_SPI1_Init+0x64>)
 8001292:	2200      	movs	r2, #0
 8001294:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001296:	4b09      	ldr	r3, [pc, #36]	; (80012bc <MX_SPI1_Init+0x64>)
 8001298:	2200      	movs	r2, #0
 800129a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800129c:	4b07      	ldr	r3, [pc, #28]	; (80012bc <MX_SPI1_Init+0x64>)
 800129e:	2200      	movs	r2, #0
 80012a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <MX_SPI1_Init+0x64>)
 80012a4:	220a      	movs	r2, #10
 80012a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012a8:	4804      	ldr	r0, [pc, #16]	; (80012bc <MX_SPI1_Init+0x64>)
 80012aa:	f003 ff07 	bl	80050bc <HAL_SPI_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012b4:	f000 f98a 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000148 	.word	0x20000148
 80012c0:	40013000 	.word	0x40013000

080012c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012c8:	4b17      	ldr	r3, [pc, #92]	; (8001328 <MX_SPI2_Init+0x64>)
 80012ca:	4a18      	ldr	r2, [pc, #96]	; (800132c <MX_SPI2_Init+0x68>)
 80012cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012ce:	4b16      	ldr	r3, [pc, #88]	; (8001328 <MX_SPI2_Init+0x64>)
 80012d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012d6:	4b14      	ldr	r3, [pc, #80]	; (8001328 <MX_SPI2_Init+0x64>)
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <MX_SPI2_Init+0x64>)
 80012de:	2200      	movs	r2, #0
 80012e0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012e2:	4b11      	ldr	r3, [pc, #68]	; (8001328 <MX_SPI2_Init+0x64>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012e8:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <MX_SPI2_Init+0x64>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80012ee:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <MX_SPI2_Init+0x64>)
 80012f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012f4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80012f6:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <MX_SPI2_Init+0x64>)
 80012f8:	2210      	movs	r2, #16
 80012fa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012fc:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <MX_SPI2_Init+0x64>)
 80012fe:	2200      	movs	r2, #0
 8001300:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001302:	4b09      	ldr	r3, [pc, #36]	; (8001328 <MX_SPI2_Init+0x64>)
 8001304:	2200      	movs	r2, #0
 8001306:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001308:	4b07      	ldr	r3, [pc, #28]	; (8001328 <MX_SPI2_Init+0x64>)
 800130a:	2200      	movs	r2, #0
 800130c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <MX_SPI2_Init+0x64>)
 8001310:	220a      	movs	r2, #10
 8001312:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001314:	4804      	ldr	r0, [pc, #16]	; (8001328 <MX_SPI2_Init+0x64>)
 8001316:	f003 fed1 	bl	80050bc <HAL_SPI_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001320:	f000 f954 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}
 8001328:	200001a0 	.word	0x200001a0
 800132c:	40003800 	.word	0x40003800

08001330 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001334:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <MX_TIM10_Init+0x40>)
 8001336:	4a0f      	ldr	r2, [pc, #60]	; (8001374 <MX_TIM10_Init+0x44>)
 8001338:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 95;
 800133a:	4b0d      	ldr	r3, [pc, #52]	; (8001370 <MX_TIM10_Init+0x40>)
 800133c:	225f      	movs	r2, #95	; 0x5f
 800133e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001340:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <MX_TIM10_Init+0x40>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000;
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <MX_TIM10_Init+0x40>)
 8001348:	f242 7210 	movw	r2, #10000	; 0x2710
 800134c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800134e:	4b08      	ldr	r3, [pc, #32]	; (8001370 <MX_TIM10_Init+0x40>)
 8001350:	2200      	movs	r2, #0
 8001352:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <MX_TIM10_Init+0x40>)
 8001356:	2200      	movs	r2, #0
 8001358:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800135a:	4805      	ldr	r0, [pc, #20]	; (8001370 <MX_TIM10_Init+0x40>)
 800135c:	f004 f93e 	bl	80055dc <HAL_TIM_Base_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001366:	f000 f931 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200001f8 	.word	0x200001f8
 8001374:	40014400 	.word	0x40014400

08001378 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08c      	sub	sp, #48	; 0x30
 800137c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137e:	f107 031c 	add.w	r3, r7, #28
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
 800138c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	61bb      	str	r3, [r7, #24]
 8001392:	4b88      	ldr	r3, [pc, #544]	; (80015b4 <MX_GPIO_Init+0x23c>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a87      	ldr	r2, [pc, #540]	; (80015b4 <MX_GPIO_Init+0x23c>)
 8001398:	f043 0310 	orr.w	r3, r3, #16
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b85      	ldr	r3, [pc, #532]	; (80015b4 <MX_GPIO_Init+0x23c>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0310 	and.w	r3, r3, #16
 80013a6:	61bb      	str	r3, [r7, #24]
 80013a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
 80013ae:	4b81      	ldr	r3, [pc, #516]	; (80015b4 <MX_GPIO_Init+0x23c>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a80      	ldr	r2, [pc, #512]	; (80015b4 <MX_GPIO_Init+0x23c>)
 80013b4:	f043 0304 	orr.w	r3, r3, #4
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b7e      	ldr	r3, [pc, #504]	; (80015b4 <MX_GPIO_Init+0x23c>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0304 	and.w	r3, r3, #4
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	4b7a      	ldr	r3, [pc, #488]	; (80015b4 <MX_GPIO_Init+0x23c>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a79      	ldr	r2, [pc, #484]	; (80015b4 <MX_GPIO_Init+0x23c>)
 80013d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b77      	ldr	r3, [pc, #476]	; (80015b4 <MX_GPIO_Init+0x23c>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	4b73      	ldr	r3, [pc, #460]	; (80015b4 <MX_GPIO_Init+0x23c>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a72      	ldr	r2, [pc, #456]	; (80015b4 <MX_GPIO_Init+0x23c>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b70      	ldr	r3, [pc, #448]	; (80015b4 <MX_GPIO_Init+0x23c>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	4b6c      	ldr	r3, [pc, #432]	; (80015b4 <MX_GPIO_Init+0x23c>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a6b      	ldr	r2, [pc, #428]	; (80015b4 <MX_GPIO_Init+0x23c>)
 8001408:	f043 0302 	orr.w	r3, r3, #2
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b69      	ldr	r3, [pc, #420]	; (80015b4 <MX_GPIO_Init+0x23c>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	4b65      	ldr	r3, [pc, #404]	; (80015b4 <MX_GPIO_Init+0x23c>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a64      	ldr	r2, [pc, #400]	; (80015b4 <MX_GPIO_Init+0x23c>)
 8001424:	f043 0308 	orr.w	r3, r3, #8
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b62      	ldr	r3, [pc, #392]	; (80015b4 <MX_GPIO_Init+0x23c>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|TRIG_Pin, GPIO_PIN_RESET);
 8001436:	2200      	movs	r2, #0
 8001438:	f44f 6181 	mov.w	r1, #1032	; 0x408
 800143c:	485e      	ldr	r0, [pc, #376]	; (80015b8 <MX_GPIO_Init+0x240>)
 800143e:	f000 fe49 	bl	80020d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001442:	2201      	movs	r2, #1
 8001444:	2101      	movs	r1, #1
 8001446:	485d      	ldr	r0, [pc, #372]	; (80015bc <MX_GPIO_Init+0x244>)
 8001448:	f000 fe44 	bl	80020d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800144c:	2200      	movs	r2, #0
 800144e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001452:	485b      	ldr	r0, [pc, #364]	; (80015c0 <MX_GPIO_Init+0x248>)
 8001454:	f000 fe3e 	bl	80020d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_RST_Pin|LCD_CE_Pin|LD4_Pin|LD3_Pin
 8001458:	2200      	movs	r2, #0
 800145a:	f24f 3110 	movw	r1, #62224	; 0xf310
 800145e:	4859      	ldr	r0, [pc, #356]	; (80015c4 <MX_GPIO_Init+0x24c>)
 8001460:	f000 fe38 	bl	80020d4 <HAL_GPIO_WritePin>
                          |LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8001464:	2304      	movs	r3, #4
 8001466:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001468:	2300      	movs	r3, #0
 800146a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8001470:	f107 031c 	add.w	r3, r7, #28
 8001474:	4619      	mov	r1, r3
 8001476:	4850      	ldr	r0, [pc, #320]	; (80015b8 <MX_GPIO_Init+0x240>)
 8001478:	f000 fca8 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin TRIG_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|TRIG_Pin;
 800147c:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001480:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001482:	2301      	movs	r3, #1
 8001484:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	2300      	movs	r3, #0
 800148c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800148e:	f107 031c 	add.w	r3, r7, #28
 8001492:	4619      	mov	r1, r3
 8001494:	4848      	ldr	r0, [pc, #288]	; (80015b8 <MX_GPIO_Init+0x240>)
 8001496:	f000 fc99 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 800149a:	2332      	movs	r3, #50	; 0x32
 800149c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800149e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80014a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014a8:	f107 031c 	add.w	r3, r7, #28
 80014ac:	4619      	mov	r1, r3
 80014ae:	4842      	ldr	r0, [pc, #264]	; (80015b8 <MX_GPIO_Init+0x240>)
 80014b0:	f000 fc8c 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80014b4:	2301      	movs	r3, #1
 80014b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014c4:	f107 031c 	add.w	r3, r7, #28
 80014c8:	4619      	mov	r1, r3
 80014ca:	483c      	ldr	r0, [pc, #240]	; (80015bc <MX_GPIO_Init+0x244>)
 80014cc:	f000 fc7e 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80014d0:	2308      	movs	r3, #8
 80014d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d4:	2302      	movs	r3, #2
 80014d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	2300      	movs	r3, #0
 80014de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014e0:	2305      	movs	r3, #5
 80014e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80014e4:	f107 031c 	add.w	r3, r7, #28
 80014e8:	4619      	mov	r1, r3
 80014ea:	4834      	ldr	r0, [pc, #208]	; (80015bc <MX_GPIO_Init+0x244>)
 80014ec:	f000 fc6e 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014f0:	2301      	movs	r3, #1
 80014f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014f4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80014f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fe:	f107 031c 	add.w	r3, r7, #28
 8001502:	4619      	mov	r1, r3
 8001504:	4830      	ldr	r0, [pc, #192]	; (80015c8 <MX_GPIO_Init+0x250>)
 8001506:	f000 fc61 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 800150a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800150e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001510:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001514:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 800151a:	f107 031c 	add.w	r3, r7, #28
 800151e:	4619      	mov	r1, r3
 8001520:	4825      	ldr	r0, [pc, #148]	; (80015b8 <MX_GPIO_Init+0x240>)
 8001522:	f000 fc53 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001526:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800152a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001534:	2300      	movs	r3, #0
 8001536:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001538:	2305      	movs	r3, #5
 800153a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153c:	f107 031c 	add.w	r3, r7, #28
 8001540:	4619      	mov	r1, r3
 8001542:	481f      	ldr	r0, [pc, #124]	; (80015c0 <MX_GPIO_Init+0x248>)
 8001544:	f000 fc42 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8001548:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800154c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154e:	2301      	movs	r3, #1
 8001550:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001556:	2300      	movs	r3, #0
 8001558:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 800155a:	f107 031c 	add.w	r3, r7, #28
 800155e:	4619      	mov	r1, r3
 8001560:	4817      	ldr	r0, [pc, #92]	; (80015c0 <MX_GPIO_Init+0x248>)
 8001562:	f000 fc33 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_CE_Pin LD4_Pin LD3_Pin
                           LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_CE_Pin|LD4_Pin|LD3_Pin
 8001566:	f24f 3310 	movw	r3, #62224	; 0xf310
 800156a:	61fb      	str	r3, [r7, #28]
                          |LD5_Pin|LD6_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156c:	2301      	movs	r3, #1
 800156e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001574:	2300      	movs	r3, #0
 8001576:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001578:	f107 031c 	add.w	r3, r7, #28
 800157c:	4619      	mov	r1, r3
 800157e:	4811      	ldr	r0, [pc, #68]	; (80015c4 <MX_GPIO_Init+0x24c>)
 8001580:	f000 fc24 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001584:	2320      	movs	r3, #32
 8001586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001588:	2300      	movs	r3, #0
 800158a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001590:	f107 031c 	add.w	r3, r7, #28
 8001594:	4619      	mov	r1, r3
 8001596:	480b      	ldr	r0, [pc, #44]	; (80015c4 <MX_GPIO_Init+0x24c>)
 8001598:	f000 fc18 	bl	8001dcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800159c:	2200      	movs	r2, #0
 800159e:	2100      	movs	r1, #0
 80015a0:	2017      	movs	r0, #23
 80015a2:	f000 fbdc 	bl	8001d5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80015a6:	2017      	movs	r0, #23
 80015a8:	f000 fbf5 	bl	8001d96 <HAL_NVIC_EnableIRQ>

}
 80015ac:	bf00      	nop
 80015ae:	3730      	adds	r7, #48	; 0x30
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40020800 	.word	0x40020800
 80015c0:	40020400 	.word	0x40020400
 80015c4:	40020c00 	.word	0x40020c00
 80015c8:	40020000 	.word	0x40020000

080015cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80015d0:	b672      	cpsid	i
}
 80015d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <Error_Handler+0x8>
	...

080015d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	4b10      	ldr	r3, [pc, #64]	; (8001624 <HAL_MspInit+0x4c>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	4a0f      	ldr	r2, [pc, #60]	; (8001624 <HAL_MspInit+0x4c>)
 80015e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ec:	6453      	str	r3, [r2, #68]	; 0x44
 80015ee:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <HAL_MspInit+0x4c>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	603b      	str	r3, [r7, #0]
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <HAL_MspInit+0x4c>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	4a08      	ldr	r2, [pc, #32]	; (8001624 <HAL_MspInit+0x4c>)
 8001604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001608:	6413      	str	r3, [r2, #64]	; 0x40
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_MspInit+0x4c>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001612:	603b      	str	r3, [r7, #0]
 8001614:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001616:	2007      	movs	r0, #7
 8001618:	f000 fb96 	bl	8001d48 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40023800 	.word	0x40023800

08001628 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a19      	ldr	r2, [pc, #100]	; (80016ac <HAL_I2C_MspInit+0x84>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d12c      	bne.n	80016a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <HAL_I2C_MspInit+0x88>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a17      	ldr	r2, [pc, #92]	; (80016b0 <HAL_I2C_MspInit+0x88>)
 8001654:	f043 0302 	orr.w	r3, r3, #2
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <HAL_I2C_MspInit+0x88>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001666:	f44f 7310 	mov.w	r3, #576	; 0x240
 800166a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800166c:	2312      	movs	r3, #18
 800166e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001670:	2301      	movs	r3, #1
 8001672:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001678:	2304      	movs	r3, #4
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	4619      	mov	r1, r3
 8001682:	480c      	ldr	r0, [pc, #48]	; (80016b4 <HAL_I2C_MspInit+0x8c>)
 8001684:	f000 fba2 	bl	8001dcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <HAL_I2C_MspInit+0x88>)
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	4a07      	ldr	r2, [pc, #28]	; (80016b0 <HAL_I2C_MspInit+0x88>)
 8001692:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001696:	6413      	str	r3, [r2, #64]	; 0x40
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <HAL_I2C_MspInit+0x88>)
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016a4:	bf00      	nop
 80016a6:	3728      	adds	r7, #40	; 0x28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40005400 	.word	0x40005400
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40020400 	.word	0x40020400

080016b8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b090      	sub	sp, #64	; 0x40
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
 80016e0:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI3)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a32      	ldr	r2, [pc, #200]	; (80017b0 <HAL_I2S_MspInit+0xf8>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d15c      	bne.n	80017a6 <HAL_I2S_MspInit+0xee>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80016ec:	2301      	movs	r3, #1
 80016ee:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80016f0:	23c8      	movs	r3, #200	; 0xc8
 80016f2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80016f4:	2305      	movs	r3, #5
 80016f6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80016f8:	2302      	movs	r3, #2
 80016fa:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	4618      	mov	r0, r3
 8001702:	f003 fb8b 	bl	8004e1c <HAL_RCCEx_PeriphCLKConfig>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <HAL_I2S_MspInit+0x58>
    {
      Error_Handler();
 800170c:	f7ff ff5e 	bl	80015cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001710:	2300      	movs	r3, #0
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	4b27      	ldr	r3, [pc, #156]	; (80017b4 <HAL_I2S_MspInit+0xfc>)
 8001716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001718:	4a26      	ldr	r2, [pc, #152]	; (80017b4 <HAL_I2S_MspInit+0xfc>)
 800171a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800171e:	6413      	str	r3, [r2, #64]	; 0x40
 8001720:	4b24      	ldr	r3, [pc, #144]	; (80017b4 <HAL_I2S_MspInit+0xfc>)
 8001722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001724:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	4b20      	ldr	r3, [pc, #128]	; (80017b4 <HAL_I2S_MspInit+0xfc>)
 8001732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001734:	4a1f      	ldr	r2, [pc, #124]	; (80017b4 <HAL_I2S_MspInit+0xfc>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	6313      	str	r3, [r2, #48]	; 0x30
 800173c:	4b1d      	ldr	r3, [pc, #116]	; (80017b4 <HAL_I2S_MspInit+0xfc>)
 800173e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001748:	2300      	movs	r3, #0
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <HAL_I2S_MspInit+0xfc>)
 800174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001750:	4a18      	ldr	r2, [pc, #96]	; (80017b4 <HAL_I2S_MspInit+0xfc>)
 8001752:	f043 0304 	orr.w	r3, r3, #4
 8001756:	6313      	str	r3, [r2, #48]	; 0x30
 8001758:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <HAL_I2S_MspInit+0xfc>)
 800175a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001764:	2310      	movs	r3, #16
 8001766:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	2300      	movs	r3, #0
 8001772:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001774:	2306      	movs	r3, #6
 8001776:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001778:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800177c:	4619      	mov	r1, r3
 800177e:	480e      	ldr	r0, [pc, #56]	; (80017b8 <HAL_I2S_MspInit+0x100>)
 8001780:	f000 fb24 	bl	8001dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001784:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001788:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	2302      	movs	r3, #2
 800178c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001792:	2300      	movs	r3, #0
 8001794:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001796:	2306      	movs	r3, #6
 8001798:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800179a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800179e:	4619      	mov	r1, r3
 80017a0:	4806      	ldr	r0, [pc, #24]	; (80017bc <HAL_I2S_MspInit+0x104>)
 80017a2:	f000 fb13 	bl	8001dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80017a6:	bf00      	nop
 80017a8:	3740      	adds	r7, #64	; 0x40
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40003c00 	.word	0x40003c00
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40020000 	.word	0x40020000
 80017bc:	40020800 	.word	0x40020800

080017c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08c      	sub	sp, #48	; 0x30
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 031c 	add.w	r3, r7, #28
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a32      	ldr	r2, [pc, #200]	; (80018a8 <HAL_SPI_MspInit+0xe8>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d12c      	bne.n	800183c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	61bb      	str	r3, [r7, #24]
 80017e6:	4b31      	ldr	r3, [pc, #196]	; (80018ac <HAL_SPI_MspInit+0xec>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	4a30      	ldr	r2, [pc, #192]	; (80018ac <HAL_SPI_MspInit+0xec>)
 80017ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017f0:	6453      	str	r3, [r2, #68]	; 0x44
 80017f2:	4b2e      	ldr	r3, [pc, #184]	; (80018ac <HAL_SPI_MspInit+0xec>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017fa:	61bb      	str	r3, [r7, #24]
 80017fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
 8001802:	4b2a      	ldr	r3, [pc, #168]	; (80018ac <HAL_SPI_MspInit+0xec>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a29      	ldr	r2, [pc, #164]	; (80018ac <HAL_SPI_MspInit+0xec>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b27      	ldr	r3, [pc, #156]	; (80018ac <HAL_SPI_MspInit+0xec>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	617b      	str	r3, [r7, #20]
 8001818:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800181a:	23e0      	movs	r3, #224	; 0xe0
 800181c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001826:	2303      	movs	r3, #3
 8001828:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800182a:	2305      	movs	r3, #5
 800182c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182e:	f107 031c 	add.w	r3, r7, #28
 8001832:	4619      	mov	r1, r3
 8001834:	481e      	ldr	r0, [pc, #120]	; (80018b0 <HAL_SPI_MspInit+0xf0>)
 8001836:	f000 fac9 	bl	8001dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800183a:	e031      	b.n	80018a0 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a1c      	ldr	r2, [pc, #112]	; (80018b4 <HAL_SPI_MspInit+0xf4>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d12c      	bne.n	80018a0 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	4b18      	ldr	r3, [pc, #96]	; (80018ac <HAL_SPI_MspInit+0xec>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	4a17      	ldr	r2, [pc, #92]	; (80018ac <HAL_SPI_MspInit+0xec>)
 8001850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001854:	6413      	str	r3, [r2, #64]	; 0x40
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <HAL_SPI_MspInit+0xec>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <HAL_SPI_MspInit+0xec>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a10      	ldr	r2, [pc, #64]	; (80018ac <HAL_SPI_MspInit+0xec>)
 800186c:	f043 0302 	orr.w	r3, r3, #2
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <HAL_SPI_MspInit+0xec>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_CLK_Pin|LCD_DIN_Pin;
 800187e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001884:	2302      	movs	r3, #2
 8001886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188c:	2303      	movs	r3, #3
 800188e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001890:	2305      	movs	r3, #5
 8001892:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001894:	f107 031c 	add.w	r3, r7, #28
 8001898:	4619      	mov	r1, r3
 800189a:	4807      	ldr	r0, [pc, #28]	; (80018b8 <HAL_SPI_MspInit+0xf8>)
 800189c:	f000 fa96 	bl	8001dcc <HAL_GPIO_Init>
}
 80018a0:	bf00      	nop
 80018a2:	3730      	adds	r7, #48	; 0x30
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40013000 	.word	0x40013000
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020000 	.word	0x40020000
 80018b4:	40003800 	.word	0x40003800
 80018b8:	40020400 	.word	0x40020400

080018bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a0e      	ldr	r2, [pc, #56]	; (8001904 <HAL_TIM_Base_MspInit+0x48>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d115      	bne.n	80018fa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <HAL_TIM_Base_MspInit+0x4c>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	4a0c      	ldr	r2, [pc, #48]	; (8001908 <HAL_TIM_Base_MspInit+0x4c>)
 80018d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018dc:	6453      	str	r3, [r2, #68]	; 0x44
 80018de:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <HAL_TIM_Base_MspInit+0x4c>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2100      	movs	r1, #0
 80018ee:	2019      	movs	r0, #25
 80018f0:	f000 fa35 	bl	8001d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80018f4:	2019      	movs	r0, #25
 80018f6:	f000 fa4e 	bl	8001d96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80018fa:	bf00      	nop
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40014400 	.word	0x40014400
 8001908:	40023800 	.word	0x40023800

0800190c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001910:	e7fe      	b.n	8001910 <NMI_Handler+0x4>

08001912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001916:	e7fe      	b.n	8001916 <HardFault_Handler+0x4>

08001918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800191c:	e7fe      	b.n	800191c <MemManage_Handler+0x4>

0800191e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001922:	e7fe      	b.n	8001922 <BusFault_Handler+0x4>

08001924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001928:	e7fe      	b.n	8001928 <UsageFault_Handler+0x4>

0800192a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001958:	f000 f8e2 	bl	8001b20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}

08001960 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ECHO_Pin);
 8001964:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001968:	f000 fbce 	bl	8002108 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}

08001970 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001974:	4802      	ldr	r0, [pc, #8]	; (8001980 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001976:	f003 ff09 	bl	800578c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200001f8 	.word	0x200001f8

08001984 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001988:	4802      	ldr	r0, [pc, #8]	; (8001994 <OTG_FS_IRQHandler+0x10>)
 800198a:	f000 fe3f 	bl	800260c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000638 	.word	0x20000638

08001998 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019a0:	4a14      	ldr	r2, [pc, #80]	; (80019f4 <_sbrk+0x5c>)
 80019a2:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <_sbrk+0x60>)
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019ac:	4b13      	ldr	r3, [pc, #76]	; (80019fc <_sbrk+0x64>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d102      	bne.n	80019ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019b4:	4b11      	ldr	r3, [pc, #68]	; (80019fc <_sbrk+0x64>)
 80019b6:	4a12      	ldr	r2, [pc, #72]	; (8001a00 <_sbrk+0x68>)
 80019b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ba:	4b10      	ldr	r3, [pc, #64]	; (80019fc <_sbrk+0x64>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4413      	add	r3, r2
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d207      	bcs.n	80019d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019c8:	f007 fb80 	bl	80090cc <__errno>
 80019cc:	4603      	mov	r3, r0
 80019ce:	220c      	movs	r2, #12
 80019d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019d2:	f04f 33ff 	mov.w	r3, #4294967295
 80019d6:	e009      	b.n	80019ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019d8:	4b08      	ldr	r3, [pc, #32]	; (80019fc <_sbrk+0x64>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019de:	4b07      	ldr	r3, [pc, #28]	; (80019fc <_sbrk+0x64>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	4a05      	ldr	r2, [pc, #20]	; (80019fc <_sbrk+0x64>)
 80019e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ea:	68fb      	ldr	r3, [r7, #12]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20020000 	.word	0x20020000
 80019f8:	00000400 	.word	0x00000400
 80019fc:	20000254 	.word	0x20000254
 8001a00:	20000950 	.word	0x20000950

08001a04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <SystemInit+0x20>)
 8001a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a0e:	4a05      	ldr	r2, [pc, #20]	; (8001a24 <SystemInit+0x20>)
 8001a10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a2c:	480d      	ldr	r0, [pc, #52]	; (8001a64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a2e:	490e      	ldr	r1, [pc, #56]	; (8001a68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a30:	4a0e      	ldr	r2, [pc, #56]	; (8001a6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a34:	e002      	b.n	8001a3c <LoopCopyDataInit>

08001a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a3a:	3304      	adds	r3, #4

08001a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a40:	d3f9      	bcc.n	8001a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a42:	4a0b      	ldr	r2, [pc, #44]	; (8001a70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a44:	4c0b      	ldr	r4, [pc, #44]	; (8001a74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a48:	e001      	b.n	8001a4e <LoopFillZerobss>

08001a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a4c:	3204      	adds	r2, #4

08001a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a50:	d3fb      	bcc.n	8001a4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a52:	f7ff ffd7 	bl	8001a04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a56:	f007 fb3f 	bl	80090d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a5a:	f7ff fa4d 	bl	8000ef8 <main>
  bx  lr    
 8001a5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a68:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001a6c:	0800a260 	.word	0x0800a260
  ldr r2, =_sbss
 8001a70:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001a74:	2000094c 	.word	0x2000094c

08001a78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a78:	e7fe      	b.n	8001a78 <ADC_IRQHandler>
	...

08001a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a80:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <HAL_Init+0x40>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a0d      	ldr	r2, [pc, #52]	; (8001abc <HAL_Init+0x40>)
 8001a86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <HAL_Init+0x40>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a0a      	ldr	r2, [pc, #40]	; (8001abc <HAL_Init+0x40>)
 8001a92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <HAL_Init+0x40>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a07      	ldr	r2, [pc, #28]	; (8001abc <HAL_Init+0x40>)
 8001a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa4:	2003      	movs	r0, #3
 8001aa6:	f000 f94f 	bl	8001d48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aaa:	2000      	movs	r0, #0
 8001aac:	f000 f808 	bl	8001ac0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ab0:	f7ff fd92 	bl	80015d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40023c00 	.word	0x40023c00

08001ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ac8:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <HAL_InitTick+0x54>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <HAL_InitTick+0x58>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 f967 	bl	8001db2 <HAL_SYSTICK_Config>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e00e      	b.n	8001b0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b0f      	cmp	r3, #15
 8001af2:	d80a      	bhi.n	8001b0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001af4:	2200      	movs	r2, #0
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	f04f 30ff 	mov.w	r0, #4294967295
 8001afc:	f000 f92f 	bl	8001d5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b00:	4a06      	ldr	r2, [pc, #24]	; (8001b1c <HAL_InitTick+0x5c>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
 8001b08:	e000      	b.n	8001b0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000000 	.word	0x20000000
 8001b18:	20000008 	.word	0x20000008
 8001b1c:	20000004 	.word	0x20000004

08001b20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <HAL_IncTick+0x20>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <HAL_IncTick+0x24>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4413      	add	r3, r2
 8001b30:	4a04      	ldr	r2, [pc, #16]	; (8001b44 <HAL_IncTick+0x24>)
 8001b32:	6013      	str	r3, [r2, #0]
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	20000008 	.word	0x20000008
 8001b44:	20000258 	.word	0x20000258

08001b48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b4c:	4b03      	ldr	r3, [pc, #12]	; (8001b5c <HAL_GetTick+0x14>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	20000258 	.word	0x20000258

08001b60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b68:	f7ff ffee 	bl	8001b48 <HAL_GetTick>
 8001b6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b78:	d005      	beq.n	8001b86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <HAL_Delay+0x44>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4413      	add	r3, r2
 8001b84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b86:	bf00      	nop
 8001b88:	f7ff ffde 	bl	8001b48 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d8f7      	bhi.n	8001b88 <HAL_Delay+0x28>
  {
  }
}
 8001b98:	bf00      	nop
 8001b9a:	bf00      	nop
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000008 	.word	0x20000008

08001ba8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <__NVIC_SetPriorityGrouping+0x44>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bda:	4a04      	ldr	r2, [pc, #16]	; (8001bec <__NVIC_SetPriorityGrouping+0x44>)
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	60d3      	str	r3, [r2, #12]
}
 8001be0:	bf00      	nop
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf4:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <__NVIC_GetPriorityGrouping+0x18>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	0a1b      	lsrs	r3, r3, #8
 8001bfa:	f003 0307 	and.w	r3, r3, #7
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	db0b      	blt.n	8001c36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
 8001c20:	f003 021f 	and.w	r2, r3, #31
 8001c24:	4907      	ldr	r1, [pc, #28]	; (8001c44 <__NVIC_EnableIRQ+0x38>)
 8001c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2a:	095b      	lsrs	r3, r3, #5
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	e000e100 	.word	0xe000e100

08001c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	6039      	str	r1, [r7, #0]
 8001c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	db0a      	blt.n	8001c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	490c      	ldr	r1, [pc, #48]	; (8001c94 <__NVIC_SetPriority+0x4c>)
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	0112      	lsls	r2, r2, #4
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c70:	e00a      	b.n	8001c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	4908      	ldr	r1, [pc, #32]	; (8001c98 <__NVIC_SetPriority+0x50>)
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	3b04      	subs	r3, #4
 8001c80:	0112      	lsls	r2, r2, #4
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	440b      	add	r3, r1
 8001c86:	761a      	strb	r2, [r3, #24]
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000e100 	.word	0xe000e100
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b089      	sub	sp, #36	; 0x24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f1c3 0307 	rsb	r3, r3, #7
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	bf28      	it	cs
 8001cba:	2304      	movcs	r3, #4
 8001cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	2b06      	cmp	r3, #6
 8001cc4:	d902      	bls.n	8001ccc <NVIC_EncodePriority+0x30>
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3b03      	subs	r3, #3
 8001cca:	e000      	b.n	8001cce <NVIC_EncodePriority+0x32>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43da      	mvns	r2, r3
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	401a      	ands	r2, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	fa01 f303 	lsl.w	r3, r1, r3
 8001cee:	43d9      	mvns	r1, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf4:	4313      	orrs	r3, r2
         );
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3724      	adds	r7, #36	; 0x24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
	...

08001d04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d14:	d301      	bcc.n	8001d1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d16:	2301      	movs	r3, #1
 8001d18:	e00f      	b.n	8001d3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d1a:	4a0a      	ldr	r2, [pc, #40]	; (8001d44 <SysTick_Config+0x40>)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d22:	210f      	movs	r1, #15
 8001d24:	f04f 30ff 	mov.w	r0, #4294967295
 8001d28:	f7ff ff8e 	bl	8001c48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <SysTick_Config+0x40>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d32:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <SysTick_Config+0x40>)
 8001d34:	2207      	movs	r2, #7
 8001d36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	e000e010 	.word	0xe000e010

08001d48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff ff29 	bl	8001ba8 <__NVIC_SetPriorityGrouping>
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b086      	sub	sp, #24
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	4603      	mov	r3, r0
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	607a      	str	r2, [r7, #4]
 8001d6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d70:	f7ff ff3e 	bl	8001bf0 <__NVIC_GetPriorityGrouping>
 8001d74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	68b9      	ldr	r1, [r7, #8]
 8001d7a:	6978      	ldr	r0, [r7, #20]
 8001d7c:	f7ff ff8e 	bl	8001c9c <NVIC_EncodePriority>
 8001d80:	4602      	mov	r2, r0
 8001d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d86:	4611      	mov	r1, r2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff5d 	bl	8001c48 <__NVIC_SetPriority>
}
 8001d8e:	bf00      	nop
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff ff31 	bl	8001c0c <__NVIC_EnableIRQ>
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff ffa2 	bl	8001d04 <SysTick_Config>
 8001dc0:	4603      	mov	r3, r0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b089      	sub	sp, #36	; 0x24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]
 8001de6:	e159      	b.n	800209c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001de8:	2201      	movs	r2, #1
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	f040 8148 	bne.w	8002096 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d005      	beq.n	8001e1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d130      	bne.n	8001e80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	2203      	movs	r2, #3
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4013      	ands	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	68da      	ldr	r2, [r3, #12]
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e54:	2201      	movs	r2, #1
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	091b      	lsrs	r3, r3, #4
 8001e6a:	f003 0201 	and.w	r2, r3, #1
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 0303 	and.w	r3, r3, #3
 8001e88:	2b03      	cmp	r3, #3
 8001e8a:	d017      	beq.n	8001ebc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	2203      	movs	r2, #3
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d123      	bne.n	8001f10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	08da      	lsrs	r2, r3, #3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3208      	adds	r2, #8
 8001ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	220f      	movs	r2, #15
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	691a      	ldr	r2, [r3, #16]
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	08da      	lsrs	r2, r3, #3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3208      	adds	r2, #8
 8001f0a:	69b9      	ldr	r1, [r7, #24]
 8001f0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 0203 	and.w	r2, r3, #3
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f000 80a2 	beq.w	8002096 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	4b57      	ldr	r3, [pc, #348]	; (80020b4 <HAL_GPIO_Init+0x2e8>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	4a56      	ldr	r2, [pc, #344]	; (80020b4 <HAL_GPIO_Init+0x2e8>)
 8001f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f60:	6453      	str	r3, [r2, #68]	; 0x44
 8001f62:	4b54      	ldr	r3, [pc, #336]	; (80020b4 <HAL_GPIO_Init+0x2e8>)
 8001f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f6e:	4a52      	ldr	r2, [pc, #328]	; (80020b8 <HAL_GPIO_Init+0x2ec>)
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	089b      	lsrs	r3, r3, #2
 8001f74:	3302      	adds	r3, #2
 8001f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f003 0303 	and.w	r3, r3, #3
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	220f      	movs	r2, #15
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a49      	ldr	r2, [pc, #292]	; (80020bc <HAL_GPIO_Init+0x2f0>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d019      	beq.n	8001fce <HAL_GPIO_Init+0x202>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a48      	ldr	r2, [pc, #288]	; (80020c0 <HAL_GPIO_Init+0x2f4>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d013      	beq.n	8001fca <HAL_GPIO_Init+0x1fe>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a47      	ldr	r2, [pc, #284]	; (80020c4 <HAL_GPIO_Init+0x2f8>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d00d      	beq.n	8001fc6 <HAL_GPIO_Init+0x1fa>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a46      	ldr	r2, [pc, #280]	; (80020c8 <HAL_GPIO_Init+0x2fc>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d007      	beq.n	8001fc2 <HAL_GPIO_Init+0x1f6>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a45      	ldr	r2, [pc, #276]	; (80020cc <HAL_GPIO_Init+0x300>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d101      	bne.n	8001fbe <HAL_GPIO_Init+0x1f2>
 8001fba:	2304      	movs	r3, #4
 8001fbc:	e008      	b.n	8001fd0 <HAL_GPIO_Init+0x204>
 8001fbe:	2307      	movs	r3, #7
 8001fc0:	e006      	b.n	8001fd0 <HAL_GPIO_Init+0x204>
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e004      	b.n	8001fd0 <HAL_GPIO_Init+0x204>
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	e002      	b.n	8001fd0 <HAL_GPIO_Init+0x204>
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <HAL_GPIO_Init+0x204>
 8001fce:	2300      	movs	r3, #0
 8001fd0:	69fa      	ldr	r2, [r7, #28]
 8001fd2:	f002 0203 	and.w	r2, r2, #3
 8001fd6:	0092      	lsls	r2, r2, #2
 8001fd8:	4093      	lsls	r3, r2
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fe0:	4935      	ldr	r1, [pc, #212]	; (80020b8 <HAL_GPIO_Init+0x2ec>)
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	089b      	lsrs	r3, r3, #2
 8001fe6:	3302      	adds	r3, #2
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fee:	4b38      	ldr	r3, [pc, #224]	; (80020d0 <HAL_GPIO_Init+0x304>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	4313      	orrs	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002012:	4a2f      	ldr	r2, [pc, #188]	; (80020d0 <HAL_GPIO_Init+0x304>)
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002018:	4b2d      	ldr	r3, [pc, #180]	; (80020d0 <HAL_GPIO_Init+0x304>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4313      	orrs	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800203c:	4a24      	ldr	r2, [pc, #144]	; (80020d0 <HAL_GPIO_Init+0x304>)
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002042:	4b23      	ldr	r3, [pc, #140]	; (80020d0 <HAL_GPIO_Init+0x304>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	43db      	mvns	r3, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4013      	ands	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	4313      	orrs	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002066:	4a1a      	ldr	r2, [pc, #104]	; (80020d0 <HAL_GPIO_Init+0x304>)
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800206c:	4b18      	ldr	r3, [pc, #96]	; (80020d0 <HAL_GPIO_Init+0x304>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	43db      	mvns	r3, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4313      	orrs	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002090:	4a0f      	ldr	r2, [pc, #60]	; (80020d0 <HAL_GPIO_Init+0x304>)
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	3301      	adds	r3, #1
 800209a:	61fb      	str	r3, [r7, #28]
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	2b0f      	cmp	r3, #15
 80020a0:	f67f aea2 	bls.w	8001de8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020a4:	bf00      	nop
 80020a6:	bf00      	nop
 80020a8:	3724      	adds	r7, #36	; 0x24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40013800 	.word	0x40013800
 80020bc:	40020000 	.word	0x40020000
 80020c0:	40020400 	.word	0x40020400
 80020c4:	40020800 	.word	0x40020800
 80020c8:	40020c00 	.word	0x40020c00
 80020cc:	40021000 	.word	0x40021000
 80020d0:	40013c00 	.word	0x40013c00

080020d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	807b      	strh	r3, [r7, #2]
 80020e0:	4613      	mov	r3, r2
 80020e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020e4:	787b      	ldrb	r3, [r7, #1]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ea:	887a      	ldrh	r2, [r7, #2]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020f0:	e003      	b.n	80020fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020f2:	887b      	ldrh	r3, [r7, #2]
 80020f4:	041a      	lsls	r2, r3, #16
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	619a      	str	r2, [r3, #24]
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002112:	4b08      	ldr	r3, [pc, #32]	; (8002134 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002114:	695a      	ldr	r2, [r3, #20]
 8002116:	88fb      	ldrh	r3, [r7, #6]
 8002118:	4013      	ands	r3, r2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d006      	beq.n	800212c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800211e:	4a05      	ldr	r2, [pc, #20]	; (8002134 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002120:	88fb      	ldrh	r3, [r7, #6]
 8002122:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002124:	88fb      	ldrh	r3, [r7, #6]
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe fea0 	bl	8000e6c <HAL_GPIO_EXTI_Callback>
  }
}
 800212c:	bf00      	nop
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40013c00 	.word	0x40013c00

08002138 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800213a:	b08f      	sub	sp, #60	; 0x3c
 800213c:	af0a      	add	r7, sp, #40	; 0x28
 800213e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e054      	b.n	80021f4 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	d106      	bne.n	800216a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f006 fd07 	bl	8008b78 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2203      	movs	r2, #3
 800216e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217a:	2b00      	cmp	r3, #0
 800217c:	d102      	bne.n	8002184 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f003 fd35 	bl	8005bf8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	603b      	str	r3, [r7, #0]
 8002194:	687e      	ldr	r6, [r7, #4]
 8002196:	466d      	mov	r5, sp
 8002198:	f106 0410 	add.w	r4, r6, #16
 800219c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800219e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80021ac:	1d33      	adds	r3, r6, #4
 80021ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021b0:	6838      	ldr	r0, [r7, #0]
 80021b2:	f003 fcaf 	bl	8005b14 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2101      	movs	r1, #1
 80021bc:	4618      	mov	r0, r3
 80021be:	f003 fd2c 	bl	8005c1a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	603b      	str	r3, [r7, #0]
 80021c8:	687e      	ldr	r6, [r7, #4]
 80021ca:	466d      	mov	r5, sp
 80021cc:	f106 0410 	add.w	r4, r6, #16
 80021d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80021e0:	1d33      	adds	r3, r6, #4
 80021e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021e4:	6838      	ldr	r0, [r7, #0]
 80021e6:	f003 feb5 	bl	8005f54 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021fc <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80021fc:	b590      	push	{r4, r7, lr}
 80021fe:	b089      	sub	sp, #36	; 0x24
 8002200:	af04      	add	r7, sp, #16
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	4608      	mov	r0, r1
 8002206:	4611      	mov	r1, r2
 8002208:	461a      	mov	r2, r3
 800220a:	4603      	mov	r3, r0
 800220c:	70fb      	strb	r3, [r7, #3]
 800220e:	460b      	mov	r3, r1
 8002210:	70bb      	strb	r3, [r7, #2]
 8002212:	4613      	mov	r3, r2
 8002214:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800221c:	2b01      	cmp	r3, #1
 800221e:	d101      	bne.n	8002224 <HAL_HCD_HC_Init+0x28>
 8002220:	2302      	movs	r3, #2
 8002222:	e076      	b.n	8002312 <HAL_HCD_HC_Init+0x116>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800222c:	78fb      	ldrb	r3, [r7, #3]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	212c      	movs	r1, #44	; 0x2c
 8002232:	fb01 f303 	mul.w	r3, r1, r3
 8002236:	4413      	add	r3, r2
 8002238:	333d      	adds	r3, #61	; 0x3d
 800223a:	2200      	movs	r2, #0
 800223c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800223e:	78fb      	ldrb	r3, [r7, #3]
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	212c      	movs	r1, #44	; 0x2c
 8002244:	fb01 f303 	mul.w	r3, r1, r3
 8002248:	4413      	add	r3, r2
 800224a:	3338      	adds	r3, #56	; 0x38
 800224c:	787a      	ldrb	r2, [r7, #1]
 800224e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002250:	78fb      	ldrb	r3, [r7, #3]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	212c      	movs	r1, #44	; 0x2c
 8002256:	fb01 f303 	mul.w	r3, r1, r3
 800225a:	4413      	add	r3, r2
 800225c:	3340      	adds	r3, #64	; 0x40
 800225e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002260:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002262:	78fb      	ldrb	r3, [r7, #3]
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	212c      	movs	r1, #44	; 0x2c
 8002268:	fb01 f303 	mul.w	r3, r1, r3
 800226c:	4413      	add	r3, r2
 800226e:	3339      	adds	r3, #57	; 0x39
 8002270:	78fa      	ldrb	r2, [r7, #3]
 8002272:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002274:	78fb      	ldrb	r3, [r7, #3]
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	212c      	movs	r1, #44	; 0x2c
 800227a:	fb01 f303 	mul.w	r3, r1, r3
 800227e:	4413      	add	r3, r2
 8002280:	333f      	adds	r3, #63	; 0x3f
 8002282:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002286:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002288:	78fb      	ldrb	r3, [r7, #3]
 800228a:	78ba      	ldrb	r2, [r7, #2]
 800228c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002290:	b2d0      	uxtb	r0, r2
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	212c      	movs	r1, #44	; 0x2c
 8002296:	fb01 f303 	mul.w	r3, r1, r3
 800229a:	4413      	add	r3, r2
 800229c:	333a      	adds	r3, #58	; 0x3a
 800229e:	4602      	mov	r2, r0
 80022a0:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80022a2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	da09      	bge.n	80022be <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80022aa:	78fb      	ldrb	r3, [r7, #3]
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	212c      	movs	r1, #44	; 0x2c
 80022b0:	fb01 f303 	mul.w	r3, r1, r3
 80022b4:	4413      	add	r3, r2
 80022b6:	333b      	adds	r3, #59	; 0x3b
 80022b8:	2201      	movs	r2, #1
 80022ba:	701a      	strb	r2, [r3, #0]
 80022bc:	e008      	b.n	80022d0 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80022be:	78fb      	ldrb	r3, [r7, #3]
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	212c      	movs	r1, #44	; 0x2c
 80022c4:	fb01 f303 	mul.w	r3, r1, r3
 80022c8:	4413      	add	r3, r2
 80022ca:	333b      	adds	r3, #59	; 0x3b
 80022cc:	2200      	movs	r2, #0
 80022ce:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80022d0:	78fb      	ldrb	r3, [r7, #3]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	212c      	movs	r1, #44	; 0x2c
 80022d6:	fb01 f303 	mul.w	r3, r1, r3
 80022da:	4413      	add	r3, r2
 80022dc:	333c      	adds	r3, #60	; 0x3c
 80022de:	f897 2020 	ldrb.w	r2, [r7, #32]
 80022e2:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6818      	ldr	r0, [r3, #0]
 80022e8:	787c      	ldrb	r4, [r7, #1]
 80022ea:	78ba      	ldrb	r2, [r7, #2]
 80022ec:	78f9      	ldrb	r1, [r7, #3]
 80022ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80022f0:	9302      	str	r3, [sp, #8]
 80022f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80022f6:	9301      	str	r3, [sp, #4]
 80022f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	4623      	mov	r3, r4
 8002300:	f003 ffae 	bl	8006260 <USB_HC_Init>
 8002304:	4603      	mov	r3, r0
 8002306:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002310:	7bfb      	ldrb	r3, [r7, #15]
}
 8002312:	4618      	mov	r0, r3
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	bd90      	pop	{r4, r7, pc}

0800231a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b084      	sub	sp, #16
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
 8002322:	460b      	mov	r3, r1
 8002324:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002326:	2300      	movs	r3, #0
 8002328:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002330:	2b01      	cmp	r3, #1
 8002332:	d101      	bne.n	8002338 <HAL_HCD_HC_Halt+0x1e>
 8002334:	2302      	movs	r3, #2
 8002336:	e00f      	b.n	8002358 <HAL_HCD_HC_Halt+0x3e>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	78fa      	ldrb	r2, [r7, #3]
 8002346:	4611      	mov	r1, r2
 8002348:	4618      	mov	r0, r3
 800234a:	f004 f9fe 	bl	800674a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002356:	7bfb      	ldrb	r3, [r7, #15]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	4608      	mov	r0, r1
 800236a:	4611      	mov	r1, r2
 800236c:	461a      	mov	r2, r3
 800236e:	4603      	mov	r3, r0
 8002370:	70fb      	strb	r3, [r7, #3]
 8002372:	460b      	mov	r3, r1
 8002374:	70bb      	strb	r3, [r7, #2]
 8002376:	4613      	mov	r3, r2
 8002378:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800237a:	78fb      	ldrb	r3, [r7, #3]
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	212c      	movs	r1, #44	; 0x2c
 8002380:	fb01 f303 	mul.w	r3, r1, r3
 8002384:	4413      	add	r3, r2
 8002386:	333b      	adds	r3, #59	; 0x3b
 8002388:	78ba      	ldrb	r2, [r7, #2]
 800238a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	212c      	movs	r1, #44	; 0x2c
 8002392:	fb01 f303 	mul.w	r3, r1, r3
 8002396:	4413      	add	r3, r2
 8002398:	333f      	adds	r3, #63	; 0x3f
 800239a:	787a      	ldrb	r2, [r7, #1]
 800239c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800239e:	7c3b      	ldrb	r3, [r7, #16]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d112      	bne.n	80023ca <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	212c      	movs	r1, #44	; 0x2c
 80023aa:	fb01 f303 	mul.w	r3, r1, r3
 80023ae:	4413      	add	r3, r2
 80023b0:	3342      	adds	r3, #66	; 0x42
 80023b2:	2203      	movs	r2, #3
 80023b4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80023b6:	78fb      	ldrb	r3, [r7, #3]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	212c      	movs	r1, #44	; 0x2c
 80023bc:	fb01 f303 	mul.w	r3, r1, r3
 80023c0:	4413      	add	r3, r2
 80023c2:	333d      	adds	r3, #61	; 0x3d
 80023c4:	7f3a      	ldrb	r2, [r7, #28]
 80023c6:	701a      	strb	r2, [r3, #0]
 80023c8:	e008      	b.n	80023dc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023ca:	78fb      	ldrb	r3, [r7, #3]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	212c      	movs	r1, #44	; 0x2c
 80023d0:	fb01 f303 	mul.w	r3, r1, r3
 80023d4:	4413      	add	r3, r2
 80023d6:	3342      	adds	r3, #66	; 0x42
 80023d8:	2202      	movs	r2, #2
 80023da:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80023dc:	787b      	ldrb	r3, [r7, #1]
 80023de:	2b03      	cmp	r3, #3
 80023e0:	f200 80c6 	bhi.w	8002570 <HAL_HCD_HC_SubmitRequest+0x210>
 80023e4:	a201      	add	r2, pc, #4	; (adr r2, 80023ec <HAL_HCD_HC_SubmitRequest+0x8c>)
 80023e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ea:	bf00      	nop
 80023ec:	080023fd 	.word	0x080023fd
 80023f0:	0800255d 	.word	0x0800255d
 80023f4:	08002461 	.word	0x08002461
 80023f8:	080024df 	.word	0x080024df
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80023fc:	7c3b      	ldrb	r3, [r7, #16]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	f040 80b8 	bne.w	8002574 <HAL_HCD_HC_SubmitRequest+0x214>
 8002404:	78bb      	ldrb	r3, [r7, #2]
 8002406:	2b00      	cmp	r3, #0
 8002408:	f040 80b4 	bne.w	8002574 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800240c:	8b3b      	ldrh	r3, [r7, #24]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d108      	bne.n	8002424 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002412:	78fb      	ldrb	r3, [r7, #3]
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	212c      	movs	r1, #44	; 0x2c
 8002418:	fb01 f303 	mul.w	r3, r1, r3
 800241c:	4413      	add	r3, r2
 800241e:	3355      	adds	r3, #85	; 0x55
 8002420:	2201      	movs	r2, #1
 8002422:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002424:	78fb      	ldrb	r3, [r7, #3]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	212c      	movs	r1, #44	; 0x2c
 800242a:	fb01 f303 	mul.w	r3, r1, r3
 800242e:	4413      	add	r3, r2
 8002430:	3355      	adds	r3, #85	; 0x55
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d109      	bne.n	800244c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002438:	78fb      	ldrb	r3, [r7, #3]
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	212c      	movs	r1, #44	; 0x2c
 800243e:	fb01 f303 	mul.w	r3, r1, r3
 8002442:	4413      	add	r3, r2
 8002444:	3342      	adds	r3, #66	; 0x42
 8002446:	2200      	movs	r2, #0
 8002448:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800244a:	e093      	b.n	8002574 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	212c      	movs	r1, #44	; 0x2c
 8002452:	fb01 f303 	mul.w	r3, r1, r3
 8002456:	4413      	add	r3, r2
 8002458:	3342      	adds	r3, #66	; 0x42
 800245a:	2202      	movs	r2, #2
 800245c:	701a      	strb	r2, [r3, #0]
      break;
 800245e:	e089      	b.n	8002574 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002460:	78bb      	ldrb	r3, [r7, #2]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d11d      	bne.n	80024a2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002466:	78fb      	ldrb	r3, [r7, #3]
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	212c      	movs	r1, #44	; 0x2c
 800246c:	fb01 f303 	mul.w	r3, r1, r3
 8002470:	4413      	add	r3, r2
 8002472:	3355      	adds	r3, #85	; 0x55
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d109      	bne.n	800248e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800247a:	78fb      	ldrb	r3, [r7, #3]
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	212c      	movs	r1, #44	; 0x2c
 8002480:	fb01 f303 	mul.w	r3, r1, r3
 8002484:	4413      	add	r3, r2
 8002486:	3342      	adds	r3, #66	; 0x42
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800248c:	e073      	b.n	8002576 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800248e:	78fb      	ldrb	r3, [r7, #3]
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	212c      	movs	r1, #44	; 0x2c
 8002494:	fb01 f303 	mul.w	r3, r1, r3
 8002498:	4413      	add	r3, r2
 800249a:	3342      	adds	r3, #66	; 0x42
 800249c:	2202      	movs	r2, #2
 800249e:	701a      	strb	r2, [r3, #0]
      break;
 80024a0:	e069      	b.n	8002576 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80024a2:	78fb      	ldrb	r3, [r7, #3]
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	212c      	movs	r1, #44	; 0x2c
 80024a8:	fb01 f303 	mul.w	r3, r1, r3
 80024ac:	4413      	add	r3, r2
 80024ae:	3354      	adds	r3, #84	; 0x54
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d109      	bne.n	80024ca <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024b6:	78fb      	ldrb	r3, [r7, #3]
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	212c      	movs	r1, #44	; 0x2c
 80024bc:	fb01 f303 	mul.w	r3, r1, r3
 80024c0:	4413      	add	r3, r2
 80024c2:	3342      	adds	r3, #66	; 0x42
 80024c4:	2200      	movs	r2, #0
 80024c6:	701a      	strb	r2, [r3, #0]
      break;
 80024c8:	e055      	b.n	8002576 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024ca:	78fb      	ldrb	r3, [r7, #3]
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	212c      	movs	r1, #44	; 0x2c
 80024d0:	fb01 f303 	mul.w	r3, r1, r3
 80024d4:	4413      	add	r3, r2
 80024d6:	3342      	adds	r3, #66	; 0x42
 80024d8:	2202      	movs	r2, #2
 80024da:	701a      	strb	r2, [r3, #0]
      break;
 80024dc:	e04b      	b.n	8002576 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80024de:	78bb      	ldrb	r3, [r7, #2]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d11d      	bne.n	8002520 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80024e4:	78fb      	ldrb	r3, [r7, #3]
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	212c      	movs	r1, #44	; 0x2c
 80024ea:	fb01 f303 	mul.w	r3, r1, r3
 80024ee:	4413      	add	r3, r2
 80024f0:	3355      	adds	r3, #85	; 0x55
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d109      	bne.n	800250c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024f8:	78fb      	ldrb	r3, [r7, #3]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	212c      	movs	r1, #44	; 0x2c
 80024fe:	fb01 f303 	mul.w	r3, r1, r3
 8002502:	4413      	add	r3, r2
 8002504:	3342      	adds	r3, #66	; 0x42
 8002506:	2200      	movs	r2, #0
 8002508:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800250a:	e034      	b.n	8002576 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800250c:	78fb      	ldrb	r3, [r7, #3]
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	212c      	movs	r1, #44	; 0x2c
 8002512:	fb01 f303 	mul.w	r3, r1, r3
 8002516:	4413      	add	r3, r2
 8002518:	3342      	adds	r3, #66	; 0x42
 800251a:	2202      	movs	r2, #2
 800251c:	701a      	strb	r2, [r3, #0]
      break;
 800251e:	e02a      	b.n	8002576 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002520:	78fb      	ldrb	r3, [r7, #3]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	212c      	movs	r1, #44	; 0x2c
 8002526:	fb01 f303 	mul.w	r3, r1, r3
 800252a:	4413      	add	r3, r2
 800252c:	3354      	adds	r3, #84	; 0x54
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d109      	bne.n	8002548 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002534:	78fb      	ldrb	r3, [r7, #3]
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	212c      	movs	r1, #44	; 0x2c
 800253a:	fb01 f303 	mul.w	r3, r1, r3
 800253e:	4413      	add	r3, r2
 8002540:	3342      	adds	r3, #66	; 0x42
 8002542:	2200      	movs	r2, #0
 8002544:	701a      	strb	r2, [r3, #0]
      break;
 8002546:	e016      	b.n	8002576 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002548:	78fb      	ldrb	r3, [r7, #3]
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	212c      	movs	r1, #44	; 0x2c
 800254e:	fb01 f303 	mul.w	r3, r1, r3
 8002552:	4413      	add	r3, r2
 8002554:	3342      	adds	r3, #66	; 0x42
 8002556:	2202      	movs	r2, #2
 8002558:	701a      	strb	r2, [r3, #0]
      break;
 800255a:	e00c      	b.n	8002576 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800255c:	78fb      	ldrb	r3, [r7, #3]
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	212c      	movs	r1, #44	; 0x2c
 8002562:	fb01 f303 	mul.w	r3, r1, r3
 8002566:	4413      	add	r3, r2
 8002568:	3342      	adds	r3, #66	; 0x42
 800256a:	2200      	movs	r2, #0
 800256c:	701a      	strb	r2, [r3, #0]
      break;
 800256e:	e002      	b.n	8002576 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002570:	bf00      	nop
 8002572:	e000      	b.n	8002576 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002574:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002576:	78fb      	ldrb	r3, [r7, #3]
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	212c      	movs	r1, #44	; 0x2c
 800257c:	fb01 f303 	mul.w	r3, r1, r3
 8002580:	4413      	add	r3, r2
 8002582:	3344      	adds	r3, #68	; 0x44
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002588:	78fb      	ldrb	r3, [r7, #3]
 800258a:	8b3a      	ldrh	r2, [r7, #24]
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	202c      	movs	r0, #44	; 0x2c
 8002590:	fb00 f303 	mul.w	r3, r0, r3
 8002594:	440b      	add	r3, r1
 8002596:	334c      	adds	r3, #76	; 0x4c
 8002598:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800259a:	78fb      	ldrb	r3, [r7, #3]
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	212c      	movs	r1, #44	; 0x2c
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	3360      	adds	r3, #96	; 0x60
 80025a8:	2200      	movs	r2, #0
 80025aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80025ac:	78fb      	ldrb	r3, [r7, #3]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	212c      	movs	r1, #44	; 0x2c
 80025b2:	fb01 f303 	mul.w	r3, r1, r3
 80025b6:	4413      	add	r3, r2
 80025b8:	3350      	adds	r3, #80	; 0x50
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80025be:	78fb      	ldrb	r3, [r7, #3]
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	212c      	movs	r1, #44	; 0x2c
 80025c4:	fb01 f303 	mul.w	r3, r1, r3
 80025c8:	4413      	add	r3, r2
 80025ca:	3339      	adds	r3, #57	; 0x39
 80025cc:	78fa      	ldrb	r2, [r7, #3]
 80025ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80025d0:	78fb      	ldrb	r3, [r7, #3]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	212c      	movs	r1, #44	; 0x2c
 80025d6:	fb01 f303 	mul.w	r3, r1, r3
 80025da:	4413      	add	r3, r2
 80025dc:	3361      	adds	r3, #97	; 0x61
 80025de:	2200      	movs	r2, #0
 80025e0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6818      	ldr	r0, [r3, #0]
 80025e6:	78fb      	ldrb	r3, [r7, #3]
 80025e8:	222c      	movs	r2, #44	; 0x2c
 80025ea:	fb02 f303 	mul.w	r3, r2, r3
 80025ee:	3338      	adds	r3, #56	; 0x38
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	18d1      	adds	r1, r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	461a      	mov	r2, r3
 80025fc:	f003 ff52 	bl	80064a4 <USB_HC_StartXfer>
 8002600:	4603      	mov	r3, r0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop

0800260c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f003 fc53 	bl	8005ece <USB_GetMode>
 8002628:	4603      	mov	r3, r0
 800262a:	2b01      	cmp	r3, #1
 800262c:	f040 80f6 	bne.w	800281c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f003 fc37 	bl	8005ea8 <USB_ReadInterrupts>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 80ec 	beq.w	800281a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f003 fc2e 	bl	8005ea8 <USB_ReadInterrupts>
 800264c:	4603      	mov	r3, r0
 800264e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002652:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002656:	d104      	bne.n	8002662 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002660:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f003 fc1e 	bl	8005ea8 <USB_ReadInterrupts>
 800266c:	4603      	mov	r3, r0
 800266e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002672:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002676:	d104      	bne.n	8002682 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002680:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f003 fc0e 	bl	8005ea8 <USB_ReadInterrupts>
 800268c:	4603      	mov	r3, r0
 800268e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002692:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002696:	d104      	bne.n	80026a2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80026a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f003 fbfe 	bl	8005ea8 <USB_ReadInterrupts>
 80026ac:	4603      	mov	r3, r0
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d103      	bne.n	80026be <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2202      	movs	r2, #2
 80026bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f003 fbf0 	bl	8005ea8 <USB_ReadInterrupts>
 80026c8:	4603      	mov	r3, r0
 80026ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026d2:	d11c      	bne.n	800270e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80026dc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10f      	bne.n	800270e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80026ee:	2110      	movs	r1, #16
 80026f0:	6938      	ldr	r0, [r7, #16]
 80026f2:	f003 fadf 	bl	8005cb4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80026f6:	6938      	ldr	r0, [r7, #16]
 80026f8:	f003 fb10 	bl	8005d1c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2101      	movs	r1, #1
 8002702:	4618      	mov	r0, r3
 8002704:	f003 fce6 	bl	80060d4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f006 fab3 	bl	8008c74 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f003 fbc8 	bl	8005ea8 <USB_ReadInterrupts>
 8002718:	4603      	mov	r3, r0
 800271a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800271e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002722:	d102      	bne.n	800272a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f001 f89e 	bl	8003866 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f003 fbba 	bl	8005ea8 <USB_ReadInterrupts>
 8002734:	4603      	mov	r3, r0
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	2b08      	cmp	r3, #8
 800273c:	d106      	bne.n	800274c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f006 fa7c 	bl	8008c3c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2208      	movs	r2, #8
 800274a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f003 fba9 	bl	8005ea8 <USB_ReadInterrupts>
 8002756:	4603      	mov	r3, r0
 8002758:	f003 0310 	and.w	r3, r3, #16
 800275c:	2b10      	cmp	r3, #16
 800275e:	d101      	bne.n	8002764 <HAL_HCD_IRQHandler+0x158>
 8002760:	2301      	movs	r3, #1
 8002762:	e000      	b.n	8002766 <HAL_HCD_IRQHandler+0x15a>
 8002764:	2300      	movs	r3, #0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d012      	beq.n	8002790 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	699a      	ldr	r2, [r3, #24]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0210 	bic.w	r2, r2, #16
 8002778:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 ffa1 	bl	80036c2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	699a      	ldr	r2, [r3, #24]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0210 	orr.w	r2, r2, #16
 800278e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4618      	mov	r0, r3
 8002796:	f003 fb87 	bl	8005ea8 <USB_ReadInterrupts>
 800279a:	4603      	mov	r3, r0
 800279c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027a4:	d13a      	bne.n	800281c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f003 ffbc 	bl	8006728 <USB_HC_ReadInterrupt>
 80027b0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
 80027b6:	e025      	b.n	8002804 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	fa22 f303 	lsr.w	r3, r2, r3
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d018      	beq.n	80027fe <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	015a      	lsls	r2, r3, #5
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4413      	add	r3, r2
 80027d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027e2:	d106      	bne.n	80027f2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	4619      	mov	r1, r3
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f8ab 	bl	8002946 <HCD_HC_IN_IRQHandler>
 80027f0:	e005      	b.n	80027fe <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	4619      	mov	r1, r3
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 fbf9 	bl	8002ff0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	3301      	adds	r3, #1
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	429a      	cmp	r2, r3
 800280c:	d3d4      	bcc.n	80027b8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002816:	615a      	str	r2, [r3, #20]
 8002818:	e000      	b.n	800281c <HAL_HCD_IRQHandler+0x210>
      return;
 800281a:	bf00      	nop
    }
  }
}
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002830:	2b01      	cmp	r3, #1
 8002832:	d101      	bne.n	8002838 <HAL_HCD_Start+0x16>
 8002834:	2302      	movs	r3, #2
 8002836:	e013      	b.n	8002860 <HAL_HCD_Start+0x3e>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2101      	movs	r1, #1
 8002846:	4618      	mov	r0, r3
 8002848:	f003 fca8 	bl	800619c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f003 f9c0 	bl	8005bd6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002876:	2b01      	cmp	r3, #1
 8002878:	d101      	bne.n	800287e <HAL_HCD_Stop+0x16>
 800287a:	2302      	movs	r3, #2
 800287c:	e00d      	b.n	800289a <HAL_HCD_Stop+0x32>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f004 f896 	bl	80069bc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b082      	sub	sp, #8
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f003 fc4a 	bl	8006148 <USB_ResetPort>
 80028b4:	4603      	mov	r3, r0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	460b      	mov	r3, r1
 80028c8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80028ca:	78fb      	ldrb	r3, [r7, #3]
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	212c      	movs	r1, #44	; 0x2c
 80028d0:	fb01 f303 	mul.w	r3, r1, r3
 80028d4:	4413      	add	r3, r2
 80028d6:	3360      	adds	r3, #96	; 0x60
 80028d8:	781b      	ldrb	r3, [r3, #0]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
 80028ee:	460b      	mov	r3, r1
 80028f0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80028f2:	78fb      	ldrb	r3, [r7, #3]
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	212c      	movs	r1, #44	; 0x2c
 80028f8:	fb01 f303 	mul.w	r3, r1, r3
 80028fc:	4413      	add	r3, r2
 80028fe:	3350      	adds	r3, #80	; 0x50
 8002900:	681b      	ldr	r3, [r3, #0]
}
 8002902:	4618      	mov	r0, r3
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f003 fc8e 	bl	800623c <USB_GetCurrentFrame>
 8002920:	4603      	mov	r3, r0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b082      	sub	sp, #8
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f003 fc69 	bl	800620e <USB_GetHostSpeed>
 800293c:	4603      	mov	r3, r0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b086      	sub	sp, #24
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
 800294e:	460b      	mov	r3, r1
 8002950:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800295c:	78fb      	ldrb	r3, [r7, #3]
 800295e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	015a      	lsls	r2, r3, #5
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	4413      	add	r3, r2
 8002968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 0304 	and.w	r3, r3, #4
 8002972:	2b04      	cmp	r3, #4
 8002974:	d11a      	bne.n	80029ac <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	015a      	lsls	r2, r3, #5
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	4413      	add	r3, r2
 800297e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002982:	461a      	mov	r2, r3
 8002984:	2304      	movs	r3, #4
 8002986:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	212c      	movs	r1, #44	; 0x2c
 800298e:	fb01 f303 	mul.w	r3, r1, r3
 8002992:	4413      	add	r3, r2
 8002994:	3361      	adds	r3, #97	; 0x61
 8002996:	2206      	movs	r2, #6
 8002998:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	4611      	mov	r1, r2
 80029a4:	4618      	mov	r0, r3
 80029a6:	f003 fed0 	bl	800674a <USB_HC_Halt>
 80029aa:	e0af      	b.n	8002b0c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	015a      	lsls	r2, r3, #5
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	4413      	add	r3, r2
 80029b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029c2:	d11b      	bne.n	80029fc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	015a      	lsls	r2, r3, #5
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	4413      	add	r3, r2
 80029cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d0:	461a      	mov	r2, r3
 80029d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	212c      	movs	r1, #44	; 0x2c
 80029de:	fb01 f303 	mul.w	r3, r1, r3
 80029e2:	4413      	add	r3, r2
 80029e4:	3361      	adds	r3, #97	; 0x61
 80029e6:	2207      	movs	r2, #7
 80029e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	4611      	mov	r1, r2
 80029f4:	4618      	mov	r0, r3
 80029f6:	f003 fea8 	bl	800674a <USB_HC_Halt>
 80029fa:	e087      	b.n	8002b0c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	015a      	lsls	r2, r3, #5
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 0320 	and.w	r3, r3, #32
 8002a0e:	2b20      	cmp	r3, #32
 8002a10:	d109      	bne.n	8002a26 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	015a      	lsls	r2, r3, #5
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	4413      	add	r3, r2
 8002a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1e:	461a      	mov	r2, r3
 8002a20:	2320      	movs	r3, #32
 8002a22:	6093      	str	r3, [r2, #8]
 8002a24:	e072      	b.n	8002b0c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	015a      	lsls	r2, r3, #5
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f003 0308 	and.w	r3, r3, #8
 8002a38:	2b08      	cmp	r3, #8
 8002a3a:	d11a      	bne.n	8002a72 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	015a      	lsls	r2, r3, #5
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a48:	461a      	mov	r2, r3
 8002a4a:	2308      	movs	r3, #8
 8002a4c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	212c      	movs	r1, #44	; 0x2c
 8002a54:	fb01 f303 	mul.w	r3, r1, r3
 8002a58:	4413      	add	r3, r2
 8002a5a:	3361      	adds	r3, #97	; 0x61
 8002a5c:	2205      	movs	r2, #5
 8002a5e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	4611      	mov	r1, r2
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f003 fe6d 	bl	800674a <USB_HC_Halt>
 8002a70:	e04c      	b.n	8002b0c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	015a      	lsls	r2, r3, #5
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4413      	add	r3, r2
 8002a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a88:	d11b      	bne.n	8002ac2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	015a      	lsls	r2, r3, #5
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	4413      	add	r3, r2
 8002a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a96:	461a      	mov	r2, r3
 8002a98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a9c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	212c      	movs	r1, #44	; 0x2c
 8002aa4:	fb01 f303 	mul.w	r3, r1, r3
 8002aa8:	4413      	add	r3, r2
 8002aaa:	3361      	adds	r3, #97	; 0x61
 8002aac:	2208      	movs	r2, #8
 8002aae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	4611      	mov	r1, r2
 8002aba:	4618      	mov	r0, r3
 8002abc:	f003 fe45 	bl	800674a <USB_HC_Halt>
 8002ac0:	e024      	b.n	8002b0c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	015a      	lsls	r2, r3, #5
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	4413      	add	r3, r2
 8002aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad4:	2b80      	cmp	r3, #128	; 0x80
 8002ad6:	d119      	bne.n	8002b0c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	015a      	lsls	r2, r3, #5
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	4413      	add	r3, r2
 8002ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	2380      	movs	r3, #128	; 0x80
 8002ae8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	212c      	movs	r1, #44	; 0x2c
 8002af0:	fb01 f303 	mul.w	r3, r1, r3
 8002af4:	4413      	add	r3, r2
 8002af6:	3361      	adds	r3, #97	; 0x61
 8002af8:	2206      	movs	r2, #6
 8002afa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	4611      	mov	r1, r2
 8002b06:	4618      	mov	r0, r3
 8002b08:	f003 fe1f 	bl	800674a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	015a      	lsls	r2, r3, #5
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	4413      	add	r3, r2
 8002b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b22:	d112      	bne.n	8002b4a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	4611      	mov	r1, r2
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f003 fe0b 	bl	800674a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b40:	461a      	mov	r2, r3
 8002b42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b46:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002b48:	e24e      	b.n	8002fe8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	015a      	lsls	r2, r3, #5
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	4413      	add	r3, r2
 8002b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	f040 80df 	bne.w	8002d20 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d019      	beq.n	8002b9e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	212c      	movs	r1, #44	; 0x2c
 8002b70:	fb01 f303 	mul.w	r3, r1, r3
 8002b74:	4413      	add	r3, r2
 8002b76:	3348      	adds	r3, #72	; 0x48
 8002b78:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	0159      	lsls	r1, r3, #5
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	440b      	add	r3, r1
 8002b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002b8c:	1ad2      	subs	r2, r2, r3
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	202c      	movs	r0, #44	; 0x2c
 8002b94:	fb00 f303 	mul.w	r3, r0, r3
 8002b98:	440b      	add	r3, r1
 8002b9a:	3350      	adds	r3, #80	; 0x50
 8002b9c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	212c      	movs	r1, #44	; 0x2c
 8002ba4:	fb01 f303 	mul.w	r3, r1, r3
 8002ba8:	4413      	add	r3, r2
 8002baa:	3361      	adds	r3, #97	; 0x61
 8002bac:	2201      	movs	r2, #1
 8002bae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	212c      	movs	r1, #44	; 0x2c
 8002bb6:	fb01 f303 	mul.w	r3, r1, r3
 8002bba:	4413      	add	r3, r2
 8002bbc:	335c      	adds	r3, #92	; 0x5c
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	015a      	lsls	r2, r3, #5
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	4413      	add	r3, r2
 8002bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bce:	461a      	mov	r2, r3
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	212c      	movs	r1, #44	; 0x2c
 8002bda:	fb01 f303 	mul.w	r3, r1, r3
 8002bde:	4413      	add	r3, r2
 8002be0:	333f      	adds	r3, #63	; 0x3f
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d009      	beq.n	8002bfc <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	212c      	movs	r1, #44	; 0x2c
 8002bee:	fb01 f303 	mul.w	r3, r1, r3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	333f      	adds	r3, #63	; 0x3f
 8002bf6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d111      	bne.n	8002c20 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	4611      	mov	r1, r2
 8002c06:	4618      	mov	r0, r3
 8002c08:	f003 fd9f 	bl	800674a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	015a      	lsls	r2, r3, #5
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	4413      	add	r3, r2
 8002c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c18:	461a      	mov	r2, r3
 8002c1a:	2310      	movs	r3, #16
 8002c1c:	6093      	str	r3, [r2, #8]
 8002c1e:	e03a      	b.n	8002c96 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	212c      	movs	r1, #44	; 0x2c
 8002c26:	fb01 f303 	mul.w	r3, r1, r3
 8002c2a:	4413      	add	r3, r2
 8002c2c:	333f      	adds	r3, #63	; 0x3f
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b03      	cmp	r3, #3
 8002c32:	d009      	beq.n	8002c48 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	212c      	movs	r1, #44	; 0x2c
 8002c3a:	fb01 f303 	mul.w	r3, r1, r3
 8002c3e:	4413      	add	r3, r2
 8002c40:	333f      	adds	r3, #63	; 0x3f
 8002c42:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d126      	bne.n	8002c96 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	0151      	lsls	r1, r2, #5
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	440a      	add	r2, r1
 8002c5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c66:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	212c      	movs	r1, #44	; 0x2c
 8002c6e:	fb01 f303 	mul.w	r3, r1, r3
 8002c72:	4413      	add	r3, r2
 8002c74:	3360      	adds	r3, #96	; 0x60
 8002c76:	2201      	movs	r2, #1
 8002c78:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	b2d9      	uxtb	r1, r3
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	202c      	movs	r0, #44	; 0x2c
 8002c84:	fb00 f303 	mul.w	r3, r0, r3
 8002c88:	4413      	add	r3, r2
 8002c8a:	3360      	adds	r3, #96	; 0x60
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f005 fffd 	bl	8008c90 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d12b      	bne.n	8002cf6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	212c      	movs	r1, #44	; 0x2c
 8002ca4:	fb01 f303 	mul.w	r3, r1, r3
 8002ca8:	4413      	add	r3, r2
 8002caa:	3348      	adds	r3, #72	; 0x48
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	202c      	movs	r0, #44	; 0x2c
 8002cb4:	fb00 f202 	mul.w	r2, r0, r2
 8002cb8:	440a      	add	r2, r1
 8002cba:	3240      	adds	r2, #64	; 0x40
 8002cbc:	8812      	ldrh	r2, [r2, #0]
 8002cbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 818e 	beq.w	8002fe8 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	212c      	movs	r1, #44	; 0x2c
 8002cd2:	fb01 f303 	mul.w	r3, r1, r3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3354      	adds	r3, #84	; 0x54
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	f083 0301 	eor.w	r3, r3, #1
 8002ce0:	b2d8      	uxtb	r0, r3
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	212c      	movs	r1, #44	; 0x2c
 8002ce8:	fb01 f303 	mul.w	r3, r1, r3
 8002cec:	4413      	add	r3, r2
 8002cee:	3354      	adds	r3, #84	; 0x54
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	701a      	strb	r2, [r3, #0]
}
 8002cf4:	e178      	b.n	8002fe8 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	212c      	movs	r1, #44	; 0x2c
 8002cfc:	fb01 f303 	mul.w	r3, r1, r3
 8002d00:	4413      	add	r3, r2
 8002d02:	3354      	adds	r3, #84	; 0x54
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	f083 0301 	eor.w	r3, r3, #1
 8002d0a:	b2d8      	uxtb	r0, r3
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	212c      	movs	r1, #44	; 0x2c
 8002d12:	fb01 f303 	mul.w	r3, r1, r3
 8002d16:	4413      	add	r3, r2
 8002d18:	3354      	adds	r3, #84	; 0x54
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	701a      	strb	r2, [r3, #0]
}
 8002d1e:	e163      	b.n	8002fe8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	015a      	lsls	r2, r3, #5
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	4413      	add	r3, r2
 8002d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	f040 80f6 	bne.w	8002f24 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	212c      	movs	r1, #44	; 0x2c
 8002d3e:	fb01 f303 	mul.w	r3, r1, r3
 8002d42:	4413      	add	r3, r2
 8002d44:	3361      	adds	r3, #97	; 0x61
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d109      	bne.n	8002d60 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	212c      	movs	r1, #44	; 0x2c
 8002d52:	fb01 f303 	mul.w	r3, r1, r3
 8002d56:	4413      	add	r3, r2
 8002d58:	3360      	adds	r3, #96	; 0x60
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	701a      	strb	r2, [r3, #0]
 8002d5e:	e0c9      	b.n	8002ef4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	212c      	movs	r1, #44	; 0x2c
 8002d66:	fb01 f303 	mul.w	r3, r1, r3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3361      	adds	r3, #97	; 0x61
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b05      	cmp	r3, #5
 8002d72:	d109      	bne.n	8002d88 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	212c      	movs	r1, #44	; 0x2c
 8002d7a:	fb01 f303 	mul.w	r3, r1, r3
 8002d7e:	4413      	add	r3, r2
 8002d80:	3360      	adds	r3, #96	; 0x60
 8002d82:	2205      	movs	r2, #5
 8002d84:	701a      	strb	r2, [r3, #0]
 8002d86:	e0b5      	b.n	8002ef4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	212c      	movs	r1, #44	; 0x2c
 8002d8e:	fb01 f303 	mul.w	r3, r1, r3
 8002d92:	4413      	add	r3, r2
 8002d94:	3361      	adds	r3, #97	; 0x61
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b06      	cmp	r3, #6
 8002d9a:	d009      	beq.n	8002db0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	212c      	movs	r1, #44	; 0x2c
 8002da2:	fb01 f303 	mul.w	r3, r1, r3
 8002da6:	4413      	add	r3, r2
 8002da8:	3361      	adds	r3, #97	; 0x61
 8002daa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	d150      	bne.n	8002e52 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	212c      	movs	r1, #44	; 0x2c
 8002db6:	fb01 f303 	mul.w	r3, r1, r3
 8002dba:	4413      	add	r3, r2
 8002dbc:	335c      	adds	r3, #92	; 0x5c
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	1c5a      	adds	r2, r3, #1
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	202c      	movs	r0, #44	; 0x2c
 8002dc8:	fb00 f303 	mul.w	r3, r0, r3
 8002dcc:	440b      	add	r3, r1
 8002dce:	335c      	adds	r3, #92	; 0x5c
 8002dd0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	212c      	movs	r1, #44	; 0x2c
 8002dd8:	fb01 f303 	mul.w	r3, r1, r3
 8002ddc:	4413      	add	r3, r2
 8002dde:	335c      	adds	r3, #92	; 0x5c
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d912      	bls.n	8002e0c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	212c      	movs	r1, #44	; 0x2c
 8002dec:	fb01 f303 	mul.w	r3, r1, r3
 8002df0:	4413      	add	r3, r2
 8002df2:	335c      	adds	r3, #92	; 0x5c
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	212c      	movs	r1, #44	; 0x2c
 8002dfe:	fb01 f303 	mul.w	r3, r1, r3
 8002e02:	4413      	add	r3, r2
 8002e04:	3360      	adds	r3, #96	; 0x60
 8002e06:	2204      	movs	r2, #4
 8002e08:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e0a:	e073      	b.n	8002ef4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	212c      	movs	r1, #44	; 0x2c
 8002e12:	fb01 f303 	mul.w	r3, r1, r3
 8002e16:	4413      	add	r3, r2
 8002e18:	3360      	adds	r3, #96	; 0x60
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	015a      	lsls	r2, r3, #5
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	4413      	add	r3, r2
 8002e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e34:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e3c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	015a      	lsls	r2, r3, #5
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e50:	e050      	b.n	8002ef4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	212c      	movs	r1, #44	; 0x2c
 8002e58:	fb01 f303 	mul.w	r3, r1, r3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	3361      	adds	r3, #97	; 0x61
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	d122      	bne.n	8002eac <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	212c      	movs	r1, #44	; 0x2c
 8002e6c:	fb01 f303 	mul.w	r3, r1, r3
 8002e70:	4413      	add	r3, r2
 8002e72:	3360      	adds	r3, #96	; 0x60
 8002e74:	2202      	movs	r2, #2
 8002e76:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	015a      	lsls	r2, r3, #5
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	4413      	add	r3, r2
 8002e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e8e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e96:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	015a      	lsls	r2, r3, #5
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	e023      	b.n	8002ef4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	212c      	movs	r1, #44	; 0x2c
 8002eb2:	fb01 f303 	mul.w	r3, r1, r3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3361      	adds	r3, #97	; 0x61
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2b07      	cmp	r3, #7
 8002ebe:	d119      	bne.n	8002ef4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	212c      	movs	r1, #44	; 0x2c
 8002ec6:	fb01 f303 	mul.w	r3, r1, r3
 8002eca:	4413      	add	r3, r2
 8002ecc:	335c      	adds	r3, #92	; 0x5c
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	1c5a      	adds	r2, r3, #1
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	202c      	movs	r0, #44	; 0x2c
 8002ed8:	fb00 f303 	mul.w	r3, r0, r3
 8002edc:	440b      	add	r3, r1
 8002ede:	335c      	adds	r3, #92	; 0x5c
 8002ee0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	212c      	movs	r1, #44	; 0x2c
 8002ee8:	fb01 f303 	mul.w	r3, r1, r3
 8002eec:	4413      	add	r3, r2
 8002eee:	3360      	adds	r3, #96	; 0x60
 8002ef0:	2204      	movs	r2, #4
 8002ef2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	015a      	lsls	r2, r3, #5
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	4413      	add	r3, r2
 8002efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f00:	461a      	mov	r2, r3
 8002f02:	2302      	movs	r3, #2
 8002f04:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	b2d9      	uxtb	r1, r3
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	202c      	movs	r0, #44	; 0x2c
 8002f10:	fb00 f303 	mul.w	r3, r0, r3
 8002f14:	4413      	add	r3, r2
 8002f16:	3360      	adds	r3, #96	; 0x60
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f005 feb7 	bl	8008c90 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002f22:	e061      	b.n	8002fe8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	015a      	lsls	r2, r3, #5
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 0310 	and.w	r3, r3, #16
 8002f36:	2b10      	cmp	r3, #16
 8002f38:	d156      	bne.n	8002fe8 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	212c      	movs	r1, #44	; 0x2c
 8002f40:	fb01 f303 	mul.w	r3, r1, r3
 8002f44:	4413      	add	r3, r2
 8002f46:	333f      	adds	r3, #63	; 0x3f
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b03      	cmp	r3, #3
 8002f4c:	d111      	bne.n	8002f72 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	212c      	movs	r1, #44	; 0x2c
 8002f54:	fb01 f303 	mul.w	r3, r1, r3
 8002f58:	4413      	add	r3, r2
 8002f5a:	335c      	adds	r3, #92	; 0x5c
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	4611      	mov	r1, r2
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f003 fbed 	bl	800674a <USB_HC_Halt>
 8002f70:	e031      	b.n	8002fd6 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	212c      	movs	r1, #44	; 0x2c
 8002f78:	fb01 f303 	mul.w	r3, r1, r3
 8002f7c:	4413      	add	r3, r2
 8002f7e:	333f      	adds	r3, #63	; 0x3f
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d009      	beq.n	8002f9a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	212c      	movs	r1, #44	; 0x2c
 8002f8c:	fb01 f303 	mul.w	r3, r1, r3
 8002f90:	4413      	add	r3, r2
 8002f92:	333f      	adds	r3, #63	; 0x3f
 8002f94:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d11d      	bne.n	8002fd6 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	212c      	movs	r1, #44	; 0x2c
 8002fa0:	fb01 f303 	mul.w	r3, r1, r3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	335c      	adds	r3, #92	; 0x5c
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d110      	bne.n	8002fd6 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	212c      	movs	r1, #44	; 0x2c
 8002fba:	fb01 f303 	mul.w	r3, r1, r3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	3361      	adds	r3, #97	; 0x61
 8002fc2:	2203      	movs	r2, #3
 8002fc4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	4611      	mov	r1, r2
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f003 fbba 	bl	800674a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	015a      	lsls	r2, r3, #5
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	4413      	add	r3, r2
 8002fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	2310      	movs	r3, #16
 8002fe6:	6093      	str	r3, [r2, #8]
}
 8002fe8:	bf00      	nop
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b088      	sub	sp, #32
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003006:	78fb      	ldrb	r3, [r7, #3]
 8003008:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	015a      	lsls	r2, r3, #5
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	4413      	add	r3, r2
 8003012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b04      	cmp	r3, #4
 800301e:	d11a      	bne.n	8003056 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	015a      	lsls	r2, r3, #5
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	4413      	add	r3, r2
 8003028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800302c:	461a      	mov	r2, r3
 800302e:	2304      	movs	r3, #4
 8003030:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	212c      	movs	r1, #44	; 0x2c
 8003038:	fb01 f303 	mul.w	r3, r1, r3
 800303c:	4413      	add	r3, r2
 800303e:	3361      	adds	r3, #97	; 0x61
 8003040:	2206      	movs	r2, #6
 8003042:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	4611      	mov	r1, r2
 800304e:	4618      	mov	r0, r3
 8003050:	f003 fb7b 	bl	800674a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003054:	e331      	b.n	80036ba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	015a      	lsls	r2, r3, #5
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	4413      	add	r3, r2
 800305e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 0320 	and.w	r3, r3, #32
 8003068:	2b20      	cmp	r3, #32
 800306a:	d12e      	bne.n	80030ca <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	015a      	lsls	r2, r3, #5
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	4413      	add	r3, r2
 8003074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003078:	461a      	mov	r2, r3
 800307a:	2320      	movs	r3, #32
 800307c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	212c      	movs	r1, #44	; 0x2c
 8003084:	fb01 f303 	mul.w	r3, r1, r3
 8003088:	4413      	add	r3, r2
 800308a:	333d      	adds	r3, #61	; 0x3d
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	2b01      	cmp	r3, #1
 8003090:	f040 8313 	bne.w	80036ba <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	212c      	movs	r1, #44	; 0x2c
 800309a:	fb01 f303 	mul.w	r3, r1, r3
 800309e:	4413      	add	r3, r2
 80030a0:	333d      	adds	r3, #61	; 0x3d
 80030a2:	2200      	movs	r2, #0
 80030a4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	212c      	movs	r1, #44	; 0x2c
 80030ac:	fb01 f303 	mul.w	r3, r1, r3
 80030b0:	4413      	add	r3, r2
 80030b2:	3360      	adds	r3, #96	; 0x60
 80030b4:	2202      	movs	r2, #2
 80030b6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	4611      	mov	r1, r2
 80030c2:	4618      	mov	r0, r3
 80030c4:	f003 fb41 	bl	800674a <USB_HC_Halt>
}
 80030c8:	e2f7      	b.n	80036ba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	015a      	lsls	r2, r3, #5
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	4413      	add	r3, r2
 80030d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030e0:	d112      	bne.n	8003108 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	015a      	lsls	r2, r3, #5
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	4413      	add	r3, r2
 80030ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ee:	461a      	mov	r2, r3
 80030f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030f4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	4611      	mov	r1, r2
 8003100:	4618      	mov	r0, r3
 8003102:	f003 fb22 	bl	800674a <USB_HC_Halt>
}
 8003106:	e2d8      	b.n	80036ba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	015a      	lsls	r2, r3, #5
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	4413      	add	r3, r2
 8003110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b01      	cmp	r3, #1
 800311c:	d140      	bne.n	80031a0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	212c      	movs	r1, #44	; 0x2c
 8003124:	fb01 f303 	mul.w	r3, r1, r3
 8003128:	4413      	add	r3, r2
 800312a:	335c      	adds	r3, #92	; 0x5c
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	015a      	lsls	r2, r3, #5
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	4413      	add	r3, r2
 8003138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003142:	2b40      	cmp	r3, #64	; 0x40
 8003144:	d111      	bne.n	800316a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	212c      	movs	r1, #44	; 0x2c
 800314c:	fb01 f303 	mul.w	r3, r1, r3
 8003150:	4413      	add	r3, r2
 8003152:	333d      	adds	r3, #61	; 0x3d
 8003154:	2201      	movs	r2, #1
 8003156:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	015a      	lsls	r2, r3, #5
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	4413      	add	r3, r2
 8003160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003164:	461a      	mov	r2, r3
 8003166:	2340      	movs	r3, #64	; 0x40
 8003168:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	015a      	lsls	r2, r3, #5
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	4413      	add	r3, r2
 8003172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003176:	461a      	mov	r2, r3
 8003178:	2301      	movs	r3, #1
 800317a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	212c      	movs	r1, #44	; 0x2c
 8003182:	fb01 f303 	mul.w	r3, r1, r3
 8003186:	4413      	add	r3, r2
 8003188:	3361      	adds	r3, #97	; 0x61
 800318a:	2201      	movs	r2, #1
 800318c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	4611      	mov	r1, r2
 8003198:	4618      	mov	r0, r3
 800319a:	f003 fad6 	bl	800674a <USB_HC_Halt>
}
 800319e:	e28c      	b.n	80036ba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	015a      	lsls	r2, r3, #5
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	4413      	add	r3, r2
 80031a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b2:	2b40      	cmp	r3, #64	; 0x40
 80031b4:	d12c      	bne.n	8003210 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	212c      	movs	r1, #44	; 0x2c
 80031bc:	fb01 f303 	mul.w	r3, r1, r3
 80031c0:	4413      	add	r3, r2
 80031c2:	3361      	adds	r3, #97	; 0x61
 80031c4:	2204      	movs	r2, #4
 80031c6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	212c      	movs	r1, #44	; 0x2c
 80031ce:	fb01 f303 	mul.w	r3, r1, r3
 80031d2:	4413      	add	r3, r2
 80031d4:	333d      	adds	r3, #61	; 0x3d
 80031d6:	2201      	movs	r2, #1
 80031d8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	212c      	movs	r1, #44	; 0x2c
 80031e0:	fb01 f303 	mul.w	r3, r1, r3
 80031e4:	4413      	add	r3, r2
 80031e6:	335c      	adds	r3, #92	; 0x5c
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	4611      	mov	r1, r2
 80031f6:	4618      	mov	r0, r3
 80031f8:	f003 faa7 	bl	800674a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	4413      	add	r3, r2
 8003204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003208:	461a      	mov	r2, r3
 800320a:	2340      	movs	r3, #64	; 0x40
 800320c:	6093      	str	r3, [r2, #8]
}
 800320e:	e254      	b.n	80036ba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	4413      	add	r3, r2
 8003218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	2b08      	cmp	r3, #8
 8003224:	d11a      	bne.n	800325c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	015a      	lsls	r2, r3, #5
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	4413      	add	r3, r2
 800322e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003232:	461a      	mov	r2, r3
 8003234:	2308      	movs	r3, #8
 8003236:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	212c      	movs	r1, #44	; 0x2c
 800323e:	fb01 f303 	mul.w	r3, r1, r3
 8003242:	4413      	add	r3, r2
 8003244:	3361      	adds	r3, #97	; 0x61
 8003246:	2205      	movs	r2, #5
 8003248:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	b2d2      	uxtb	r2, r2
 8003252:	4611      	mov	r1, r2
 8003254:	4618      	mov	r0, r3
 8003256:	f003 fa78 	bl	800674a <USB_HC_Halt>
}
 800325a:	e22e      	b.n	80036ba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	4413      	add	r3, r2
 8003264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 0310 	and.w	r3, r3, #16
 800326e:	2b10      	cmp	r3, #16
 8003270:	d140      	bne.n	80032f4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	212c      	movs	r1, #44	; 0x2c
 8003278:	fb01 f303 	mul.w	r3, r1, r3
 800327c:	4413      	add	r3, r2
 800327e:	335c      	adds	r3, #92	; 0x5c
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	212c      	movs	r1, #44	; 0x2c
 800328a:	fb01 f303 	mul.w	r3, r1, r3
 800328e:	4413      	add	r3, r2
 8003290:	3361      	adds	r3, #97	; 0x61
 8003292:	2203      	movs	r2, #3
 8003294:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	212c      	movs	r1, #44	; 0x2c
 800329c:	fb01 f303 	mul.w	r3, r1, r3
 80032a0:	4413      	add	r3, r2
 80032a2:	333d      	adds	r3, #61	; 0x3d
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d112      	bne.n	80032d0 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	212c      	movs	r1, #44	; 0x2c
 80032b0:	fb01 f303 	mul.w	r3, r1, r3
 80032b4:	4413      	add	r3, r2
 80032b6:	333c      	adds	r3, #60	; 0x3c
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d108      	bne.n	80032d0 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	212c      	movs	r1, #44	; 0x2c
 80032c4:	fb01 f303 	mul.w	r3, r1, r3
 80032c8:	4413      	add	r3, r2
 80032ca:	333d      	adds	r3, #61	; 0x3d
 80032cc:	2201      	movs	r2, #1
 80032ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	b2d2      	uxtb	r2, r2
 80032d8:	4611      	mov	r1, r2
 80032da:	4618      	mov	r0, r3
 80032dc:	f003 fa35 	bl	800674a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	015a      	lsls	r2, r3, #5
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	4413      	add	r3, r2
 80032e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ec:	461a      	mov	r2, r3
 80032ee:	2310      	movs	r3, #16
 80032f0:	6093      	str	r3, [r2, #8]
}
 80032f2:	e1e2      	b.n	80036ba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	015a      	lsls	r2, r3, #5
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	4413      	add	r3, r2
 80032fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003306:	2b80      	cmp	r3, #128	; 0x80
 8003308:	d164      	bne.n	80033d4 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d111      	bne.n	8003336 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	212c      	movs	r1, #44	; 0x2c
 8003318:	fb01 f303 	mul.w	r3, r1, r3
 800331c:	4413      	add	r3, r2
 800331e:	3361      	adds	r3, #97	; 0x61
 8003320:	2206      	movs	r2, #6
 8003322:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	4611      	mov	r1, r2
 800332e:	4618      	mov	r0, r3
 8003330:	f003 fa0b 	bl	800674a <USB_HC_Halt>
 8003334:	e044      	b.n	80033c0 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	212c      	movs	r1, #44	; 0x2c
 800333c:	fb01 f303 	mul.w	r3, r1, r3
 8003340:	4413      	add	r3, r2
 8003342:	335c      	adds	r3, #92	; 0x5c
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	1c5a      	adds	r2, r3, #1
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	202c      	movs	r0, #44	; 0x2c
 800334e:	fb00 f303 	mul.w	r3, r0, r3
 8003352:	440b      	add	r3, r1
 8003354:	335c      	adds	r3, #92	; 0x5c
 8003356:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	212c      	movs	r1, #44	; 0x2c
 800335e:	fb01 f303 	mul.w	r3, r1, r3
 8003362:	4413      	add	r3, r2
 8003364:	335c      	adds	r3, #92	; 0x5c
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b02      	cmp	r3, #2
 800336a:	d920      	bls.n	80033ae <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	212c      	movs	r1, #44	; 0x2c
 8003372:	fb01 f303 	mul.w	r3, r1, r3
 8003376:	4413      	add	r3, r2
 8003378:	335c      	adds	r3, #92	; 0x5c
 800337a:	2200      	movs	r2, #0
 800337c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	212c      	movs	r1, #44	; 0x2c
 8003384:	fb01 f303 	mul.w	r3, r1, r3
 8003388:	4413      	add	r3, r2
 800338a:	3360      	adds	r3, #96	; 0x60
 800338c:	2204      	movs	r2, #4
 800338e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	b2d9      	uxtb	r1, r3
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	202c      	movs	r0, #44	; 0x2c
 800339a:	fb00 f303 	mul.w	r3, r0, r3
 800339e:	4413      	add	r3, r2
 80033a0:	3360      	adds	r3, #96	; 0x60
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	461a      	mov	r2, r3
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f005 fc72 	bl	8008c90 <HAL_HCD_HC_NotifyURBChange_Callback>
 80033ac:	e008      	b.n	80033c0 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	212c      	movs	r1, #44	; 0x2c
 80033b4:	fb01 f303 	mul.w	r3, r1, r3
 80033b8:	4413      	add	r3, r2
 80033ba:	3360      	adds	r3, #96	; 0x60
 80033bc:	2202      	movs	r2, #2
 80033be:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	015a      	lsls	r2, r3, #5
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033cc:	461a      	mov	r2, r3
 80033ce:	2380      	movs	r3, #128	; 0x80
 80033d0:	6093      	str	r3, [r2, #8]
}
 80033d2:	e172      	b.n	80036ba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	015a      	lsls	r2, r3, #5
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	4413      	add	r3, r2
 80033dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ea:	d11b      	bne.n	8003424 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	212c      	movs	r1, #44	; 0x2c
 80033f2:	fb01 f303 	mul.w	r3, r1, r3
 80033f6:	4413      	add	r3, r2
 80033f8:	3361      	adds	r3, #97	; 0x61
 80033fa:	2208      	movs	r2, #8
 80033fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	b2d2      	uxtb	r2, r2
 8003406:	4611      	mov	r1, r2
 8003408:	4618      	mov	r0, r3
 800340a:	f003 f99e 	bl	800674a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	015a      	lsls	r2, r3, #5
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	4413      	add	r3, r2
 8003416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800341a:	461a      	mov	r2, r3
 800341c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003420:	6093      	str	r3, [r2, #8]
}
 8003422:	e14a      	b.n	80036ba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	015a      	lsls	r2, r3, #5
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	4413      	add	r3, r2
 800342c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b02      	cmp	r3, #2
 8003438:	f040 813f 	bne.w	80036ba <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	212c      	movs	r1, #44	; 0x2c
 8003442:	fb01 f303 	mul.w	r3, r1, r3
 8003446:	4413      	add	r3, r2
 8003448:	3361      	adds	r3, #97	; 0x61
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d17d      	bne.n	800354c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	212c      	movs	r1, #44	; 0x2c
 8003456:	fb01 f303 	mul.w	r3, r1, r3
 800345a:	4413      	add	r3, r2
 800345c:	3360      	adds	r3, #96	; 0x60
 800345e:	2201      	movs	r2, #1
 8003460:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	212c      	movs	r1, #44	; 0x2c
 8003468:	fb01 f303 	mul.w	r3, r1, r3
 800346c:	4413      	add	r3, r2
 800346e:	333f      	adds	r3, #63	; 0x3f
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	2b02      	cmp	r3, #2
 8003474:	d00a      	beq.n	800348c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	212c      	movs	r1, #44	; 0x2c
 800347c:	fb01 f303 	mul.w	r3, r1, r3
 8003480:	4413      	add	r3, r2
 8003482:	333f      	adds	r3, #63	; 0x3f
 8003484:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003486:	2b03      	cmp	r3, #3
 8003488:	f040 8100 	bne.w	800368c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d113      	bne.n	80034bc <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	212c      	movs	r1, #44	; 0x2c
 800349a:	fb01 f303 	mul.w	r3, r1, r3
 800349e:	4413      	add	r3, r2
 80034a0:	3355      	adds	r3, #85	; 0x55
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	f083 0301 	eor.w	r3, r3, #1
 80034a8:	b2d8      	uxtb	r0, r3
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	212c      	movs	r1, #44	; 0x2c
 80034b0:	fb01 f303 	mul.w	r3, r1, r3
 80034b4:	4413      	add	r3, r2
 80034b6:	3355      	adds	r3, #85	; 0x55
 80034b8:	4602      	mov	r2, r0
 80034ba:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	f040 80e3 	bne.w	800368c <HCD_HC_OUT_IRQHandler+0x69c>
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	212c      	movs	r1, #44	; 0x2c
 80034cc:	fb01 f303 	mul.w	r3, r1, r3
 80034d0:	4413      	add	r3, r2
 80034d2:	334c      	adds	r3, #76	; 0x4c
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 80d8 	beq.w	800368c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	212c      	movs	r1, #44	; 0x2c
 80034e2:	fb01 f303 	mul.w	r3, r1, r3
 80034e6:	4413      	add	r3, r2
 80034e8:	334c      	adds	r3, #76	; 0x4c
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	202c      	movs	r0, #44	; 0x2c
 80034f2:	fb00 f202 	mul.w	r2, r0, r2
 80034f6:	440a      	add	r2, r1
 80034f8:	3240      	adds	r2, #64	; 0x40
 80034fa:	8812      	ldrh	r2, [r2, #0]
 80034fc:	4413      	add	r3, r2
 80034fe:	3b01      	subs	r3, #1
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	202c      	movs	r0, #44	; 0x2c
 8003506:	fb00 f202 	mul.w	r2, r0, r2
 800350a:	440a      	add	r2, r1
 800350c:	3240      	adds	r2, #64	; 0x40
 800350e:	8812      	ldrh	r2, [r2, #0]
 8003510:	fbb3 f3f2 	udiv	r3, r3, r2
 8003514:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 80b5 	beq.w	800368c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	212c      	movs	r1, #44	; 0x2c
 8003528:	fb01 f303 	mul.w	r3, r1, r3
 800352c:	4413      	add	r3, r2
 800352e:	3355      	adds	r3, #85	; 0x55
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	f083 0301 	eor.w	r3, r3, #1
 8003536:	b2d8      	uxtb	r0, r3
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	212c      	movs	r1, #44	; 0x2c
 800353e:	fb01 f303 	mul.w	r3, r1, r3
 8003542:	4413      	add	r3, r2
 8003544:	3355      	adds	r3, #85	; 0x55
 8003546:	4602      	mov	r2, r0
 8003548:	701a      	strb	r2, [r3, #0]
 800354a:	e09f      	b.n	800368c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	212c      	movs	r1, #44	; 0x2c
 8003552:	fb01 f303 	mul.w	r3, r1, r3
 8003556:	4413      	add	r3, r2
 8003558:	3361      	adds	r3, #97	; 0x61
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	2b03      	cmp	r3, #3
 800355e:	d109      	bne.n	8003574 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	212c      	movs	r1, #44	; 0x2c
 8003566:	fb01 f303 	mul.w	r3, r1, r3
 800356a:	4413      	add	r3, r2
 800356c:	3360      	adds	r3, #96	; 0x60
 800356e:	2202      	movs	r2, #2
 8003570:	701a      	strb	r2, [r3, #0]
 8003572:	e08b      	b.n	800368c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	212c      	movs	r1, #44	; 0x2c
 800357a:	fb01 f303 	mul.w	r3, r1, r3
 800357e:	4413      	add	r3, r2
 8003580:	3361      	adds	r3, #97	; 0x61
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b04      	cmp	r3, #4
 8003586:	d109      	bne.n	800359c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	212c      	movs	r1, #44	; 0x2c
 800358e:	fb01 f303 	mul.w	r3, r1, r3
 8003592:	4413      	add	r3, r2
 8003594:	3360      	adds	r3, #96	; 0x60
 8003596:	2202      	movs	r2, #2
 8003598:	701a      	strb	r2, [r3, #0]
 800359a:	e077      	b.n	800368c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	212c      	movs	r1, #44	; 0x2c
 80035a2:	fb01 f303 	mul.w	r3, r1, r3
 80035a6:	4413      	add	r3, r2
 80035a8:	3361      	adds	r3, #97	; 0x61
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	2b05      	cmp	r3, #5
 80035ae:	d109      	bne.n	80035c4 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	212c      	movs	r1, #44	; 0x2c
 80035b6:	fb01 f303 	mul.w	r3, r1, r3
 80035ba:	4413      	add	r3, r2
 80035bc:	3360      	adds	r3, #96	; 0x60
 80035be:	2205      	movs	r2, #5
 80035c0:	701a      	strb	r2, [r3, #0]
 80035c2:	e063      	b.n	800368c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	212c      	movs	r1, #44	; 0x2c
 80035ca:	fb01 f303 	mul.w	r3, r1, r3
 80035ce:	4413      	add	r3, r2
 80035d0:	3361      	adds	r3, #97	; 0x61
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	2b06      	cmp	r3, #6
 80035d6:	d009      	beq.n	80035ec <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	212c      	movs	r1, #44	; 0x2c
 80035de:	fb01 f303 	mul.w	r3, r1, r3
 80035e2:	4413      	add	r3, r2
 80035e4:	3361      	adds	r3, #97	; 0x61
 80035e6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d14f      	bne.n	800368c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	212c      	movs	r1, #44	; 0x2c
 80035f2:	fb01 f303 	mul.w	r3, r1, r3
 80035f6:	4413      	add	r3, r2
 80035f8:	335c      	adds	r3, #92	; 0x5c
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	1c5a      	adds	r2, r3, #1
 80035fe:	6879      	ldr	r1, [r7, #4]
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	202c      	movs	r0, #44	; 0x2c
 8003604:	fb00 f303 	mul.w	r3, r0, r3
 8003608:	440b      	add	r3, r1
 800360a:	335c      	adds	r3, #92	; 0x5c
 800360c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	212c      	movs	r1, #44	; 0x2c
 8003614:	fb01 f303 	mul.w	r3, r1, r3
 8003618:	4413      	add	r3, r2
 800361a:	335c      	adds	r3, #92	; 0x5c
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2b02      	cmp	r3, #2
 8003620:	d912      	bls.n	8003648 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	212c      	movs	r1, #44	; 0x2c
 8003628:	fb01 f303 	mul.w	r3, r1, r3
 800362c:	4413      	add	r3, r2
 800362e:	335c      	adds	r3, #92	; 0x5c
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	212c      	movs	r1, #44	; 0x2c
 800363a:	fb01 f303 	mul.w	r3, r1, r3
 800363e:	4413      	add	r3, r2
 8003640:	3360      	adds	r3, #96	; 0x60
 8003642:	2204      	movs	r2, #4
 8003644:	701a      	strb	r2, [r3, #0]
 8003646:	e021      	b.n	800368c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	212c      	movs	r1, #44	; 0x2c
 800364e:	fb01 f303 	mul.w	r3, r1, r3
 8003652:	4413      	add	r3, r2
 8003654:	3360      	adds	r3, #96	; 0x60
 8003656:	2202      	movs	r2, #2
 8003658:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	015a      	lsls	r2, r3, #5
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	4413      	add	r3, r2
 8003662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003670:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003678:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	4413      	add	r3, r2
 8003682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003686:	461a      	mov	r2, r3
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	015a      	lsls	r2, r3, #5
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	4413      	add	r3, r2
 8003694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003698:	461a      	mov	r2, r3
 800369a:	2302      	movs	r3, #2
 800369c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	b2d9      	uxtb	r1, r3
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	202c      	movs	r0, #44	; 0x2c
 80036a8:	fb00 f303 	mul.w	r3, r0, r3
 80036ac:	4413      	add	r3, r2
 80036ae:	3360      	adds	r3, #96	; 0x60
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	461a      	mov	r2, r3
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f005 faeb 	bl	8008c90 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80036ba:	bf00      	nop
 80036bc:	3720      	adds	r7, #32
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b08a      	sub	sp, #40	; 0x28
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	0c5b      	lsrs	r3, r3, #17
 80036e8:	f003 030f 	and.w	r3, r3, #15
 80036ec:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	091b      	lsrs	r3, r3, #4
 80036f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036f6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d004      	beq.n	8003708 <HCD_RXQLVL_IRQHandler+0x46>
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2b05      	cmp	r3, #5
 8003702:	f000 80a9 	beq.w	8003858 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003706:	e0aa      	b.n	800385e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 80a6 	beq.w	800385c <HCD_RXQLVL_IRQHandler+0x19a>
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	212c      	movs	r1, #44	; 0x2c
 8003716:	fb01 f303 	mul.w	r3, r1, r3
 800371a:	4413      	add	r3, r2
 800371c:	3344      	adds	r3, #68	; 0x44
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 809b 	beq.w	800385c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	212c      	movs	r1, #44	; 0x2c
 800372c:	fb01 f303 	mul.w	r3, r1, r3
 8003730:	4413      	add	r3, r2
 8003732:	3350      	adds	r3, #80	; 0x50
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	441a      	add	r2, r3
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	202c      	movs	r0, #44	; 0x2c
 8003740:	fb00 f303 	mul.w	r3, r0, r3
 8003744:	440b      	add	r3, r1
 8003746:	334c      	adds	r3, #76	; 0x4c
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	429a      	cmp	r2, r3
 800374c:	d87a      	bhi.n	8003844 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6818      	ldr	r0, [r3, #0]
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	212c      	movs	r1, #44	; 0x2c
 8003758:	fb01 f303 	mul.w	r3, r1, r3
 800375c:	4413      	add	r3, r2
 800375e:	3344      	adds	r3, #68	; 0x44
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	b292      	uxth	r2, r2
 8003766:	4619      	mov	r1, r3
 8003768:	f002 fb46 	bl	8005df8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	212c      	movs	r1, #44	; 0x2c
 8003772:	fb01 f303 	mul.w	r3, r1, r3
 8003776:	4413      	add	r3, r2
 8003778:	3344      	adds	r3, #68	; 0x44
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	441a      	add	r2, r3
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	202c      	movs	r0, #44	; 0x2c
 8003786:	fb00 f303 	mul.w	r3, r0, r3
 800378a:	440b      	add	r3, r1
 800378c:	3344      	adds	r3, #68	; 0x44
 800378e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	212c      	movs	r1, #44	; 0x2c
 8003796:	fb01 f303 	mul.w	r3, r1, r3
 800379a:	4413      	add	r3, r2
 800379c:	3350      	adds	r3, #80	; 0x50
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	441a      	add	r2, r3
 80037a4:	6879      	ldr	r1, [r7, #4]
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	202c      	movs	r0, #44	; 0x2c
 80037aa:	fb00 f303 	mul.w	r3, r0, r3
 80037ae:	440b      	add	r3, r1
 80037b0:	3350      	adds	r3, #80	; 0x50
 80037b2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	015a      	lsls	r2, r3, #5
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	4413      	add	r3, r2
 80037bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	0cdb      	lsrs	r3, r3, #19
 80037c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037c8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	212c      	movs	r1, #44	; 0x2c
 80037d0:	fb01 f303 	mul.w	r3, r1, r3
 80037d4:	4413      	add	r3, r2
 80037d6:	3340      	adds	r3, #64	; 0x40
 80037d8:	881b      	ldrh	r3, [r3, #0]
 80037da:	461a      	mov	r2, r3
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	4293      	cmp	r3, r2
 80037e0:	d13c      	bne.n	800385c <HCD_RXQLVL_IRQHandler+0x19a>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d039      	beq.n	800385c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	015a      	lsls	r2, r3, #5
 80037ec:	6a3b      	ldr	r3, [r7, #32]
 80037ee:	4413      	add	r3, r2
 80037f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037fe:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003806:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	015a      	lsls	r2, r3, #5
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	4413      	add	r3, r2
 8003810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003814:	461a      	mov	r2, r3
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	212c      	movs	r1, #44	; 0x2c
 8003820:	fb01 f303 	mul.w	r3, r1, r3
 8003824:	4413      	add	r3, r2
 8003826:	3354      	adds	r3, #84	; 0x54
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	f083 0301 	eor.w	r3, r3, #1
 800382e:	b2d8      	uxtb	r0, r3
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	212c      	movs	r1, #44	; 0x2c
 8003836:	fb01 f303 	mul.w	r3, r1, r3
 800383a:	4413      	add	r3, r2
 800383c:	3354      	adds	r3, #84	; 0x54
 800383e:	4602      	mov	r2, r0
 8003840:	701a      	strb	r2, [r3, #0]
      break;
 8003842:	e00b      	b.n	800385c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	212c      	movs	r1, #44	; 0x2c
 800384a:	fb01 f303 	mul.w	r3, r1, r3
 800384e:	4413      	add	r3, r2
 8003850:	3360      	adds	r3, #96	; 0x60
 8003852:	2204      	movs	r2, #4
 8003854:	701a      	strb	r2, [r3, #0]
      break;
 8003856:	e001      	b.n	800385c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003858:	bf00      	nop
 800385a:	e000      	b.n	800385e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800385c:	bf00      	nop
  }
}
 800385e:	bf00      	nop
 8003860:	3728      	adds	r7, #40	; 0x28
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b086      	sub	sp, #24
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003892:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b02      	cmp	r3, #2
 800389c:	d10b      	bne.n	80038b6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d102      	bne.n	80038ae <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f005 f9d5 	bl	8008c58 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	f043 0302 	orr.w	r3, r3, #2
 80038b4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f003 0308 	and.w	r3, r3, #8
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d132      	bne.n	8003926 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	f043 0308 	orr.w	r3, r3, #8
 80038c6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f003 0304 	and.w	r3, r3, #4
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	d126      	bne.n	8003920 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d113      	bne.n	8003902 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80038e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038e4:	d106      	bne.n	80038f4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2102      	movs	r1, #2
 80038ec:	4618      	mov	r0, r3
 80038ee:	f002 fbf1 	bl	80060d4 <USB_InitFSLSPClkSel>
 80038f2:	e011      	b.n	8003918 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2101      	movs	r1, #1
 80038fa:	4618      	mov	r0, r3
 80038fc:	f002 fbea 	bl	80060d4 <USB_InitFSLSPClkSel>
 8003900:	e00a      	b.n	8003918 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d106      	bne.n	8003918 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003910:	461a      	mov	r2, r3
 8003912:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003916:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f005 f9c7 	bl	8008cac <HAL_HCD_PortEnabled_Callback>
 800391e:	e002      	b.n	8003926 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f005 f9d1 	bl	8008cc8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f003 0320 	and.w	r3, r3, #32
 800392c:	2b20      	cmp	r3, #32
 800392e:	d103      	bne.n	8003938 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	f043 0320 	orr.w	r3, r3, #32
 8003936:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800393e:	461a      	mov	r2, r3
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	6013      	str	r3, [r2, #0]
}
 8003944:	bf00      	nop
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e12b      	b.n	8003bb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d106      	bne.n	8003978 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7fd fe58 	bl	8001628 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2224      	movs	r2, #36	; 0x24
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0201 	bic.w	r2, r2, #1
 800398e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800399e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039b0:	f001 fa20 	bl	8004df4 <HAL_RCC_GetPCLK1Freq>
 80039b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	4a81      	ldr	r2, [pc, #516]	; (8003bc0 <HAL_I2C_Init+0x274>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d807      	bhi.n	80039d0 <HAL_I2C_Init+0x84>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4a80      	ldr	r2, [pc, #512]	; (8003bc4 <HAL_I2C_Init+0x278>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	bf94      	ite	ls
 80039c8:	2301      	movls	r3, #1
 80039ca:	2300      	movhi	r3, #0
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	e006      	b.n	80039de <HAL_I2C_Init+0x92>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4a7d      	ldr	r2, [pc, #500]	; (8003bc8 <HAL_I2C_Init+0x27c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	bf94      	ite	ls
 80039d8:	2301      	movls	r3, #1
 80039da:	2300      	movhi	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e0e7      	b.n	8003bb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4a78      	ldr	r2, [pc, #480]	; (8003bcc <HAL_I2C_Init+0x280>)
 80039ea:	fba2 2303 	umull	r2, r3, r2, r3
 80039ee:	0c9b      	lsrs	r3, r3, #18
 80039f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	4a6a      	ldr	r2, [pc, #424]	; (8003bc0 <HAL_I2C_Init+0x274>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d802      	bhi.n	8003a20 <HAL_I2C_Init+0xd4>
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	e009      	b.n	8003a34 <HAL_I2C_Init+0xe8>
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a26:	fb02 f303 	mul.w	r3, r2, r3
 8003a2a:	4a69      	ldr	r2, [pc, #420]	; (8003bd0 <HAL_I2C_Init+0x284>)
 8003a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a30:	099b      	lsrs	r3, r3, #6
 8003a32:	3301      	adds	r3, #1
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6812      	ldr	r2, [r2, #0]
 8003a38:	430b      	orrs	r3, r1
 8003a3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	495c      	ldr	r1, [pc, #368]	; (8003bc0 <HAL_I2C_Init+0x274>)
 8003a50:	428b      	cmp	r3, r1
 8003a52:	d819      	bhi.n	8003a88 <HAL_I2C_Init+0x13c>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	1e59      	subs	r1, r3, #1
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a62:	1c59      	adds	r1, r3, #1
 8003a64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a68:	400b      	ands	r3, r1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <HAL_I2C_Init+0x138>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	1e59      	subs	r1, r3, #1
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a82:	e051      	b.n	8003b28 <HAL_I2C_Init+0x1dc>
 8003a84:	2304      	movs	r3, #4
 8003a86:	e04f      	b.n	8003b28 <HAL_I2C_Init+0x1dc>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d111      	bne.n	8003ab4 <HAL_I2C_Init+0x168>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	1e58      	subs	r0, r3, #1
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6859      	ldr	r1, [r3, #4]
 8003a98:	460b      	mov	r3, r1
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	440b      	add	r3, r1
 8003a9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	bf0c      	ite	eq
 8003aac:	2301      	moveq	r3, #1
 8003aae:	2300      	movne	r3, #0
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	e012      	b.n	8003ada <HAL_I2C_Init+0x18e>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	1e58      	subs	r0, r3, #1
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6859      	ldr	r1, [r3, #4]
 8003abc:	460b      	mov	r3, r1
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	0099      	lsls	r1, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aca:	3301      	adds	r3, #1
 8003acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	bf0c      	ite	eq
 8003ad4:	2301      	moveq	r3, #1
 8003ad6:	2300      	movne	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <HAL_I2C_Init+0x196>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e022      	b.n	8003b28 <HAL_I2C_Init+0x1dc>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10e      	bne.n	8003b08 <HAL_I2C_Init+0x1bc>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	1e58      	subs	r0, r3, #1
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6859      	ldr	r1, [r3, #4]
 8003af2:	460b      	mov	r3, r1
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	440b      	add	r3, r1
 8003af8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003afc:	3301      	adds	r3, #1
 8003afe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b06:	e00f      	b.n	8003b28 <HAL_I2C_Init+0x1dc>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	1e58      	subs	r0, r3, #1
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6859      	ldr	r1, [r3, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	440b      	add	r3, r1
 8003b16:	0099      	lsls	r1, r3, #2
 8003b18:	440b      	add	r3, r1
 8003b1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b1e:	3301      	adds	r3, #1
 8003b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b28:	6879      	ldr	r1, [r7, #4]
 8003b2a:	6809      	ldr	r1, [r1, #0]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	69da      	ldr	r2, [r3, #28]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	431a      	orrs	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6911      	ldr	r1, [r2, #16]
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	68d2      	ldr	r2, [r2, #12]
 8003b62:	4311      	orrs	r1, r2
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6812      	ldr	r2, [r2, #0]
 8003b68:	430b      	orrs	r3, r1
 8003b6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	695a      	ldr	r2, [r3, #20]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0201 	orr.w	r2, r2, #1
 8003b96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	000186a0 	.word	0x000186a0
 8003bc4:	001e847f 	.word	0x001e847f
 8003bc8:	003d08ff 	.word	0x003d08ff
 8003bcc:	431bde83 	.word	0x431bde83
 8003bd0:	10624dd3 	.word	0x10624dd3

08003bd4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b088      	sub	sp, #32
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e128      	b.n	8003e38 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d109      	bne.n	8003c06 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a90      	ldr	r2, [pc, #576]	; (8003e40 <HAL_I2S_Init+0x26c>)
 8003bfe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f7fd fd59 	bl	80016b8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2202      	movs	r2, #2
 8003c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6812      	ldr	r2, [r2, #0]
 8003c18:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003c1c:	f023 030f 	bic.w	r3, r3, #15
 8003c20:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2202      	movs	r2, #2
 8003c28:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d060      	beq.n	8003cf4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d102      	bne.n	8003c40 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003c3a:	2310      	movs	r3, #16
 8003c3c:	617b      	str	r3, [r7, #20]
 8003c3e:	e001      	b.n	8003c44 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003c40:	2320      	movs	r3, #32
 8003c42:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b20      	cmp	r3, #32
 8003c4a:	d802      	bhi.n	8003c52 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003c52:	2001      	movs	r0, #1
 8003c54:	f001 f9d2 	bl	8004ffc <HAL_RCCEx_GetPeriphCLKFreq>
 8003c58:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c62:	d125      	bne.n	8003cb0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d010      	beq.n	8003c8e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c76:	4613      	mov	r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4413      	add	r3, r2
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	461a      	mov	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c88:	3305      	adds	r3, #5
 8003c8a:	613b      	str	r3, [r7, #16]
 8003c8c:	e01f      	b.n	8003cce <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c98:	4613      	mov	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4413      	add	r3, r2
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003caa:	3305      	adds	r3, #5
 8003cac:	613b      	str	r3, [r7, #16]
 8003cae:	e00e      	b.n	8003cce <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cb8:	4613      	mov	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cca:	3305      	adds	r3, #5
 8003ccc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	4a5c      	ldr	r2, [pc, #368]	; (8003e44 <HAL_I2S_Init+0x270>)
 8003cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd6:	08db      	lsrs	r3, r3, #3
 8003cd8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	085b      	lsrs	r3, r3, #1
 8003cea:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	021b      	lsls	r3, r3, #8
 8003cf0:	61bb      	str	r3, [r7, #24]
 8003cf2:	e003      	b.n	8003cfc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d902      	bls.n	8003d08 <HAL_I2S_Init+0x134>
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	2bff      	cmp	r3, #255	; 0xff
 8003d06:	d907      	bls.n	8003d18 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0c:	f043 0210 	orr.w	r2, r3, #16
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e08f      	b.n	8003e38 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691a      	ldr	r2, [r3, #16]
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	ea42 0103 	orr.w	r1, r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	69fa      	ldr	r2, [r7, #28]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003d36:	f023 030f 	bic.w	r3, r3, #15
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6851      	ldr	r1, [r2, #4]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6892      	ldr	r2, [r2, #8]
 8003d42:	4311      	orrs	r1, r2
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	68d2      	ldr	r2, [r2, #12]
 8003d48:	4311      	orrs	r1, r2
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	6992      	ldr	r2, [r2, #24]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d5a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d161      	bne.n	8003e28 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a38      	ldr	r2, [pc, #224]	; (8003e48 <HAL_I2S_Init+0x274>)
 8003d68:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a37      	ldr	r2, [pc, #220]	; (8003e4c <HAL_I2S_Init+0x278>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d101      	bne.n	8003d78 <HAL_I2S_Init+0x1a4>
 8003d74:	4b36      	ldr	r3, [pc, #216]	; (8003e50 <HAL_I2S_Init+0x27c>)
 8003d76:	e001      	b.n	8003d7c <HAL_I2S_Init+0x1a8>
 8003d78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	6812      	ldr	r2, [r2, #0]
 8003d82:	4932      	ldr	r1, [pc, #200]	; (8003e4c <HAL_I2S_Init+0x278>)
 8003d84:	428a      	cmp	r2, r1
 8003d86:	d101      	bne.n	8003d8c <HAL_I2S_Init+0x1b8>
 8003d88:	4a31      	ldr	r2, [pc, #196]	; (8003e50 <HAL_I2S_Init+0x27c>)
 8003d8a:	e001      	b.n	8003d90 <HAL_I2S_Init+0x1bc>
 8003d8c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003d90:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003d94:	f023 030f 	bic.w	r3, r3, #15
 8003d98:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a2b      	ldr	r2, [pc, #172]	; (8003e4c <HAL_I2S_Init+0x278>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d101      	bne.n	8003da8 <HAL_I2S_Init+0x1d4>
 8003da4:	4b2a      	ldr	r3, [pc, #168]	; (8003e50 <HAL_I2S_Init+0x27c>)
 8003da6:	e001      	b.n	8003dac <HAL_I2S_Init+0x1d8>
 8003da8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dac:	2202      	movs	r2, #2
 8003dae:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a25      	ldr	r2, [pc, #148]	; (8003e4c <HAL_I2S_Init+0x278>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d101      	bne.n	8003dbe <HAL_I2S_Init+0x1ea>
 8003dba:	4b25      	ldr	r3, [pc, #148]	; (8003e50 <HAL_I2S_Init+0x27c>)
 8003dbc:	e001      	b.n	8003dc2 <HAL_I2S_Init+0x1ee>
 8003dbe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dce:	d003      	beq.n	8003dd8 <HAL_I2S_Init+0x204>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d103      	bne.n	8003de0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003dd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ddc:	613b      	str	r3, [r7, #16]
 8003dde:	e001      	b.n	8003de4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003de0:	2300      	movs	r3, #0
 8003de2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003dee:	4313      	orrs	r3, r2
 8003df0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003e02:	4313      	orrs	r3, r2
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	897b      	ldrh	r3, [r7, #10]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e10:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a0d      	ldr	r2, [pc, #52]	; (8003e4c <HAL_I2S_Init+0x278>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d101      	bne.n	8003e20 <HAL_I2S_Init+0x24c>
 8003e1c:	4b0c      	ldr	r3, [pc, #48]	; (8003e50 <HAL_I2S_Init+0x27c>)
 8003e1e:	e001      	b.n	8003e24 <HAL_I2S_Init+0x250>
 8003e20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e24:	897a      	ldrh	r2, [r7, #10]
 8003e26:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3720      	adds	r7, #32
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	08003f4b 	.word	0x08003f4b
 8003e44:	cccccccd 	.word	0xcccccccd
 8003e48:	08004061 	.word	0x08004061
 8003e4c:	40003800 	.word	0x40003800
 8003e50:	40003400 	.word	0x40003400

08003e54 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9c:	881a      	ldrh	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	1c9a      	adds	r2, r3, #2
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10e      	bne.n	8003ee4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ed4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7ff ffb8 	bl	8003e54 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003ee4:	bf00      	nop
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68da      	ldr	r2, [r3, #12]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efe:	b292      	uxth	r2, r2
 8003f00:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f06:	1c9a      	adds	r2, r3, #2
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	3b01      	subs	r3, #1
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10e      	bne.n	8003f42 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f32:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7ff ff93 	bl	8003e68 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003f42:	bf00      	nop
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b086      	sub	sp, #24
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d13a      	bne.n	8003fdc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d109      	bne.n	8003f84 <I2S_IRQHandler+0x3a>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7a:	2b40      	cmp	r3, #64	; 0x40
 8003f7c:	d102      	bne.n	8003f84 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7ff ffb4 	bl	8003eec <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8a:	2b40      	cmp	r3, #64	; 0x40
 8003f8c:	d126      	bne.n	8003fdc <I2S_IRQHandler+0x92>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f003 0320 	and.w	r3, r3, #32
 8003f98:	2b20      	cmp	r3, #32
 8003f9a:	d11f      	bne.n	8003fdc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003faa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003fac:	2300      	movs	r3, #0
 8003fae:	613b      	str	r3, [r7, #16]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	613b      	str	r3, [r7, #16]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	613b      	str	r3, [r7, #16]
 8003fc0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fce:	f043 0202 	orr.w	r2, r3, #2
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7ff ff50 	bl	8003e7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b03      	cmp	r3, #3
 8003fe6:	d136      	bne.n	8004056 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d109      	bne.n	8004006 <I2S_IRQHandler+0xbc>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ffc:	2b80      	cmp	r3, #128	; 0x80
 8003ffe:	d102      	bne.n	8004006 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f7ff ff45 	bl	8003e90 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f003 0308 	and.w	r3, r3, #8
 800400c:	2b08      	cmp	r3, #8
 800400e:	d122      	bne.n	8004056 <I2S_IRQHandler+0x10c>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f003 0320 	and.w	r3, r3, #32
 800401a:	2b20      	cmp	r3, #32
 800401c:	d11b      	bne.n	8004056 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800402c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800402e:	2300      	movs	r3, #0
 8004030:	60fb      	str	r3, [r7, #12]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	60fb      	str	r3, [r7, #12]
 800403a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004048:	f043 0204 	orr.w	r2, r3, #4
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7ff ff13 	bl	8003e7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004056:	bf00      	nop
 8004058:	3718      	adds	r7, #24
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
	...

08004060 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b088      	sub	sp, #32
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a92      	ldr	r2, [pc, #584]	; (80042c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d101      	bne.n	800407e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800407a:	4b92      	ldr	r3, [pc, #584]	; (80042c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800407c:	e001      	b.n	8004082 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800407e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a8b      	ldr	r2, [pc, #556]	; (80042c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d101      	bne.n	800409c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004098:	4b8a      	ldr	r3, [pc, #552]	; (80042c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800409a:	e001      	b.n	80040a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800409c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040ac:	d004      	beq.n	80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f040 8099 	bne.w	80041ea <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d107      	bne.n	80040d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d002      	beq.n	80040d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f925 	bl	800431c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d107      	bne.n	80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f9c8 	bl	800447c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f2:	2b40      	cmp	r3, #64	; 0x40
 80040f4:	d13a      	bne.n	800416c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	f003 0320 	and.w	r3, r3, #32
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d035      	beq.n	800416c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a6e      	ldr	r2, [pc, #440]	; (80042c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d101      	bne.n	800410e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800410a:	4b6e      	ldr	r3, [pc, #440]	; (80042c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800410c:	e001      	b.n	8004112 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800410e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4969      	ldr	r1, [pc, #420]	; (80042c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800411a:	428b      	cmp	r3, r1
 800411c:	d101      	bne.n	8004122 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800411e:	4b69      	ldr	r3, [pc, #420]	; (80042c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004120:	e001      	b.n	8004126 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004122:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004126:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800412a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800413a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800413c:	2300      	movs	r3, #0
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	60fb      	str	r3, [r7, #12]
 8004150:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415e:	f043 0202 	orr.w	r2, r3, #2
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f7ff fe88 	bl	8003e7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	f003 0308 	and.w	r3, r3, #8
 8004172:	2b08      	cmp	r3, #8
 8004174:	f040 80c3 	bne.w	80042fe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 80bd 	beq.w	80042fe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004192:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a49      	ldr	r2, [pc, #292]	; (80042c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d101      	bne.n	80041a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800419e:	4b49      	ldr	r3, [pc, #292]	; (80042c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041a0:	e001      	b.n	80041a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80041a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4944      	ldr	r1, [pc, #272]	; (80042c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041ae:	428b      	cmp	r3, r1
 80041b0:	d101      	bne.n	80041b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80041b2:	4b44      	ldr	r3, [pc, #272]	; (80042c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041b4:	e001      	b.n	80041ba <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80041b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041be:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80041c0:	2300      	movs	r3, #0
 80041c2:	60bb      	str	r3, [r7, #8]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	60bb      	str	r3, [r7, #8]
 80041cc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041da:	f043 0204 	orr.w	r2, r3, #4
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7ff fe4a 	bl	8003e7c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80041e8:	e089      	b.n	80042fe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d107      	bne.n	8004204 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f8be 	bl	8004380 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b01      	cmp	r3, #1
 800420c:	d107      	bne.n	800421e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004214:	2b00      	cmp	r3, #0
 8004216:	d002      	beq.n	800421e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f8fd 	bl	8004418 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004224:	2b40      	cmp	r3, #64	; 0x40
 8004226:	d12f      	bne.n	8004288 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	f003 0320 	and.w	r3, r3, #32
 800422e:	2b00      	cmp	r3, #0
 8004230:	d02a      	beq.n	8004288 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004240:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a1e      	ldr	r2, [pc, #120]	; (80042c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d101      	bne.n	8004250 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800424c:	4b1d      	ldr	r3, [pc, #116]	; (80042c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800424e:	e001      	b.n	8004254 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004250:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4919      	ldr	r1, [pc, #100]	; (80042c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800425c:	428b      	cmp	r3, r1
 800425e:	d101      	bne.n	8004264 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004260:	4b18      	ldr	r3, [pc, #96]	; (80042c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004262:	e001      	b.n	8004268 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004264:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004268:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800426c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427a:	f043 0202 	orr.w	r2, r3, #2
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7ff fdfa 	bl	8003e7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b08      	cmp	r3, #8
 8004290:	d136      	bne.n	8004300 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	f003 0320 	and.w	r3, r3, #32
 8004298:	2b00      	cmp	r3, #0
 800429a:	d031      	beq.n	8004300 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a07      	ldr	r2, [pc, #28]	; (80042c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d101      	bne.n	80042aa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80042a6:	4b07      	ldr	r3, [pc, #28]	; (80042c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042a8:	e001      	b.n	80042ae <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80042aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4902      	ldr	r1, [pc, #8]	; (80042c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042b6:	428b      	cmp	r3, r1
 80042b8:	d106      	bne.n	80042c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80042ba:	4b02      	ldr	r3, [pc, #8]	; (80042c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042bc:	e006      	b.n	80042cc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80042be:	bf00      	nop
 80042c0:	40003800 	.word	0x40003800
 80042c4:	40003400 	.word	0x40003400
 80042c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042d0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042e0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ee:	f043 0204 	orr.w	r2, r3, #4
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7ff fdc0 	bl	8003e7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042fc:	e000      	b.n	8004300 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042fe:	bf00      	nop
}
 8004300:	bf00      	nop
 8004302:	3720      	adds	r7, #32
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	1c99      	adds	r1, r3, #2
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	6251      	str	r1, [r2, #36]	; 0x24
 800432e:	881a      	ldrh	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433a:	b29b      	uxth	r3, r3
 800433c:	3b01      	subs	r3, #1
 800433e:	b29a      	uxth	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004348:	b29b      	uxth	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d113      	bne.n	8004376 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800435c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004362:	b29b      	uxth	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	d106      	bne.n	8004376 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f7ff ffc9 	bl	8004308 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004376:	bf00      	nop
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
	...

08004380 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	1c99      	adds	r1, r3, #2
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6251      	str	r1, [r2, #36]	; 0x24
 8004392:	8819      	ldrh	r1, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a1d      	ldr	r2, [pc, #116]	; (8004410 <I2SEx_TxISR_I2SExt+0x90>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d101      	bne.n	80043a2 <I2SEx_TxISR_I2SExt+0x22>
 800439e:	4b1d      	ldr	r3, [pc, #116]	; (8004414 <I2SEx_TxISR_I2SExt+0x94>)
 80043a0:	e001      	b.n	80043a6 <I2SEx_TxISR_I2SExt+0x26>
 80043a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043a6:	460a      	mov	r2, r1
 80043a8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	3b01      	subs	r3, #1
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043bc:	b29b      	uxth	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d121      	bne.n	8004406 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a12      	ldr	r2, [pc, #72]	; (8004410 <I2SEx_TxISR_I2SExt+0x90>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d101      	bne.n	80043d0 <I2SEx_TxISR_I2SExt+0x50>
 80043cc:	4b11      	ldr	r3, [pc, #68]	; (8004414 <I2SEx_TxISR_I2SExt+0x94>)
 80043ce:	e001      	b.n	80043d4 <I2SEx_TxISR_I2SExt+0x54>
 80043d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	490d      	ldr	r1, [pc, #52]	; (8004410 <I2SEx_TxISR_I2SExt+0x90>)
 80043dc:	428b      	cmp	r3, r1
 80043de:	d101      	bne.n	80043e4 <I2SEx_TxISR_I2SExt+0x64>
 80043e0:	4b0c      	ldr	r3, [pc, #48]	; (8004414 <I2SEx_TxISR_I2SExt+0x94>)
 80043e2:	e001      	b.n	80043e8 <I2SEx_TxISR_I2SExt+0x68>
 80043e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043ec:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d106      	bne.n	8004406 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7ff ff81 	bl	8004308 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004406:	bf00      	nop
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	40003800 	.word	0x40003800
 8004414:	40003400 	.word	0x40003400

08004418 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68d8      	ldr	r0, [r3, #12]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442a:	1c99      	adds	r1, r3, #2
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004430:	b282      	uxth	r2, r0
 8004432:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004438:	b29b      	uxth	r3, r3
 800443a:	3b01      	subs	r3, #1
 800443c:	b29a      	uxth	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004446:	b29b      	uxth	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d113      	bne.n	8004474 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800445a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d106      	bne.n	8004474 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7ff ff4a 	bl	8004308 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004474:	bf00      	nop
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a20      	ldr	r2, [pc, #128]	; (800450c <I2SEx_RxISR_I2SExt+0x90>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d101      	bne.n	8004492 <I2SEx_RxISR_I2SExt+0x16>
 800448e:	4b20      	ldr	r3, [pc, #128]	; (8004510 <I2SEx_RxISR_I2SExt+0x94>)
 8004490:	e001      	b.n	8004496 <I2SEx_RxISR_I2SExt+0x1a>
 8004492:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004496:	68d8      	ldr	r0, [r3, #12]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449c:	1c99      	adds	r1, r3, #2
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80044a2:	b282      	uxth	r2, r0
 80044a4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	3b01      	subs	r3, #1
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d121      	bne.n	8004502 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a12      	ldr	r2, [pc, #72]	; (800450c <I2SEx_RxISR_I2SExt+0x90>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d101      	bne.n	80044cc <I2SEx_RxISR_I2SExt+0x50>
 80044c8:	4b11      	ldr	r3, [pc, #68]	; (8004510 <I2SEx_RxISR_I2SExt+0x94>)
 80044ca:	e001      	b.n	80044d0 <I2SEx_RxISR_I2SExt+0x54>
 80044cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	490d      	ldr	r1, [pc, #52]	; (800450c <I2SEx_RxISR_I2SExt+0x90>)
 80044d8:	428b      	cmp	r3, r1
 80044da:	d101      	bne.n	80044e0 <I2SEx_RxISR_I2SExt+0x64>
 80044dc:	4b0c      	ldr	r3, [pc, #48]	; (8004510 <I2SEx_RxISR_I2SExt+0x94>)
 80044de:	e001      	b.n	80044e4 <I2SEx_RxISR_I2SExt+0x68>
 80044e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044e8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d106      	bne.n	8004502 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7ff ff03 	bl	8004308 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004502:	bf00      	nop
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	40003800 	.word	0x40003800
 8004510:	40003400 	.word	0x40003400

08004514 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e267      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	d075      	beq.n	800461e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004532:	4b88      	ldr	r3, [pc, #544]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 030c 	and.w	r3, r3, #12
 800453a:	2b04      	cmp	r3, #4
 800453c:	d00c      	beq.n	8004558 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800453e:	4b85      	ldr	r3, [pc, #532]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004546:	2b08      	cmp	r3, #8
 8004548:	d112      	bne.n	8004570 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800454a:	4b82      	ldr	r3, [pc, #520]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004552:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004556:	d10b      	bne.n	8004570 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004558:	4b7e      	ldr	r3, [pc, #504]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d05b      	beq.n	800461c <HAL_RCC_OscConfig+0x108>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d157      	bne.n	800461c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e242      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004578:	d106      	bne.n	8004588 <HAL_RCC_OscConfig+0x74>
 800457a:	4b76      	ldr	r3, [pc, #472]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a75      	ldr	r2, [pc, #468]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	e01d      	b.n	80045c4 <HAL_RCC_OscConfig+0xb0>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004590:	d10c      	bne.n	80045ac <HAL_RCC_OscConfig+0x98>
 8004592:	4b70      	ldr	r3, [pc, #448]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a6f      	ldr	r2, [pc, #444]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800459c:	6013      	str	r3, [r2, #0]
 800459e:	4b6d      	ldr	r3, [pc, #436]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a6c      	ldr	r2, [pc, #432]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a8:	6013      	str	r3, [r2, #0]
 80045aa:	e00b      	b.n	80045c4 <HAL_RCC_OscConfig+0xb0>
 80045ac:	4b69      	ldr	r3, [pc, #420]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a68      	ldr	r2, [pc, #416]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045b6:	6013      	str	r3, [r2, #0]
 80045b8:	4b66      	ldr	r3, [pc, #408]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a65      	ldr	r2, [pc, #404]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d013      	beq.n	80045f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045cc:	f7fd fabc 	bl	8001b48 <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045d4:	f7fd fab8 	bl	8001b48 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b64      	cmp	r3, #100	; 0x64
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e207      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045e6:	4b5b      	ldr	r3, [pc, #364]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0f0      	beq.n	80045d4 <HAL_RCC_OscConfig+0xc0>
 80045f2:	e014      	b.n	800461e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f4:	f7fd faa8 	bl	8001b48 <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045fc:	f7fd faa4 	bl	8001b48 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b64      	cmp	r3, #100	; 0x64
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e1f3      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800460e:	4b51      	ldr	r3, [pc, #324]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1f0      	bne.n	80045fc <HAL_RCC_OscConfig+0xe8>
 800461a:	e000      	b.n	800461e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800461c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d063      	beq.n	80046f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800462a:	4b4a      	ldr	r3, [pc, #296]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 030c 	and.w	r3, r3, #12
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00b      	beq.n	800464e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004636:	4b47      	ldr	r3, [pc, #284]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800463e:	2b08      	cmp	r3, #8
 8004640:	d11c      	bne.n	800467c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004642:	4b44      	ldr	r3, [pc, #272]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d116      	bne.n	800467c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800464e:	4b41      	ldr	r3, [pc, #260]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d005      	beq.n	8004666 <HAL_RCC_OscConfig+0x152>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d001      	beq.n	8004666 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e1c7      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004666:	4b3b      	ldr	r3, [pc, #236]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	4937      	ldr	r1, [pc, #220]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004676:	4313      	orrs	r3, r2
 8004678:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800467a:	e03a      	b.n	80046f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d020      	beq.n	80046c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004684:	4b34      	ldr	r3, [pc, #208]	; (8004758 <HAL_RCC_OscConfig+0x244>)
 8004686:	2201      	movs	r2, #1
 8004688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468a:	f7fd fa5d 	bl	8001b48 <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004690:	e008      	b.n	80046a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004692:	f7fd fa59 	bl	8001b48 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e1a8      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a4:	4b2b      	ldr	r3, [pc, #172]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0f0      	beq.n	8004692 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b0:	4b28      	ldr	r3, [pc, #160]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	4925      	ldr	r1, [pc, #148]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	600b      	str	r3, [r1, #0]
 80046c4:	e015      	b.n	80046f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046c6:	4b24      	ldr	r3, [pc, #144]	; (8004758 <HAL_RCC_OscConfig+0x244>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046cc:	f7fd fa3c 	bl	8001b48 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046d4:	f7fd fa38 	bl	8001b48 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e187      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046e6:	4b1b      	ldr	r3, [pc, #108]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1f0      	bne.n	80046d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0308 	and.w	r3, r3, #8
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d036      	beq.n	800476c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d016      	beq.n	8004734 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004706:	4b15      	ldr	r3, [pc, #84]	; (800475c <HAL_RCC_OscConfig+0x248>)
 8004708:	2201      	movs	r2, #1
 800470a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800470c:	f7fd fa1c 	bl	8001b48 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004714:	f7fd fa18 	bl	8001b48 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e167      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004726:	4b0b      	ldr	r3, [pc, #44]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0f0      	beq.n	8004714 <HAL_RCC_OscConfig+0x200>
 8004732:	e01b      	b.n	800476c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004734:	4b09      	ldr	r3, [pc, #36]	; (800475c <HAL_RCC_OscConfig+0x248>)
 8004736:	2200      	movs	r2, #0
 8004738:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800473a:	f7fd fa05 	bl	8001b48 <HAL_GetTick>
 800473e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004740:	e00e      	b.n	8004760 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004742:	f7fd fa01 	bl	8001b48 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d907      	bls.n	8004760 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e150      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
 8004754:	40023800 	.word	0x40023800
 8004758:	42470000 	.word	0x42470000
 800475c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004760:	4b88      	ldr	r3, [pc, #544]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1ea      	bne.n	8004742 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 8097 	beq.w	80048a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800477a:	2300      	movs	r3, #0
 800477c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800477e:	4b81      	ldr	r3, [pc, #516]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10f      	bne.n	80047aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800478a:	2300      	movs	r3, #0
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	4b7d      	ldr	r3, [pc, #500]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	4a7c      	ldr	r2, [pc, #496]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004798:	6413      	str	r3, [r2, #64]	; 0x40
 800479a:	4b7a      	ldr	r3, [pc, #488]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a2:	60bb      	str	r3, [r7, #8]
 80047a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047a6:	2301      	movs	r3, #1
 80047a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047aa:	4b77      	ldr	r3, [pc, #476]	; (8004988 <HAL_RCC_OscConfig+0x474>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d118      	bne.n	80047e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047b6:	4b74      	ldr	r3, [pc, #464]	; (8004988 <HAL_RCC_OscConfig+0x474>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a73      	ldr	r2, [pc, #460]	; (8004988 <HAL_RCC_OscConfig+0x474>)
 80047bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047c2:	f7fd f9c1 	bl	8001b48 <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c8:	e008      	b.n	80047dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ca:	f7fd f9bd 	bl	8001b48 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e10c      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047dc:	4b6a      	ldr	r3, [pc, #424]	; (8004988 <HAL_RCC_OscConfig+0x474>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0f0      	beq.n	80047ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d106      	bne.n	80047fe <HAL_RCC_OscConfig+0x2ea>
 80047f0:	4b64      	ldr	r3, [pc, #400]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 80047f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f4:	4a63      	ldr	r2, [pc, #396]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 80047f6:	f043 0301 	orr.w	r3, r3, #1
 80047fa:	6713      	str	r3, [r2, #112]	; 0x70
 80047fc:	e01c      	b.n	8004838 <HAL_RCC_OscConfig+0x324>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	2b05      	cmp	r3, #5
 8004804:	d10c      	bne.n	8004820 <HAL_RCC_OscConfig+0x30c>
 8004806:	4b5f      	ldr	r3, [pc, #380]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480a:	4a5e      	ldr	r2, [pc, #376]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800480c:	f043 0304 	orr.w	r3, r3, #4
 8004810:	6713      	str	r3, [r2, #112]	; 0x70
 8004812:	4b5c      	ldr	r3, [pc, #368]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004816:	4a5b      	ldr	r2, [pc, #364]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004818:	f043 0301 	orr.w	r3, r3, #1
 800481c:	6713      	str	r3, [r2, #112]	; 0x70
 800481e:	e00b      	b.n	8004838 <HAL_RCC_OscConfig+0x324>
 8004820:	4b58      	ldr	r3, [pc, #352]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004824:	4a57      	ldr	r2, [pc, #348]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004826:	f023 0301 	bic.w	r3, r3, #1
 800482a:	6713      	str	r3, [r2, #112]	; 0x70
 800482c:	4b55      	ldr	r3, [pc, #340]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800482e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004830:	4a54      	ldr	r2, [pc, #336]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004832:	f023 0304 	bic.w	r3, r3, #4
 8004836:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d015      	beq.n	800486c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004840:	f7fd f982 	bl	8001b48 <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004846:	e00a      	b.n	800485e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004848:	f7fd f97e 	bl	8001b48 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	f241 3288 	movw	r2, #5000	; 0x1388
 8004856:	4293      	cmp	r3, r2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e0cb      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800485e:	4b49      	ldr	r3, [pc, #292]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0ee      	beq.n	8004848 <HAL_RCC_OscConfig+0x334>
 800486a:	e014      	b.n	8004896 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800486c:	f7fd f96c 	bl	8001b48 <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004872:	e00a      	b.n	800488a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004874:	f7fd f968 	bl	8001b48 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004882:	4293      	cmp	r3, r2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e0b5      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800488a:	4b3e      	ldr	r3, [pc, #248]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800488c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1ee      	bne.n	8004874 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004896:	7dfb      	ldrb	r3, [r7, #23]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d105      	bne.n	80048a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800489c:	4b39      	ldr	r3, [pc, #228]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	4a38      	ldr	r2, [pc, #224]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 80048a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 80a1 	beq.w	80049f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048b2:	4b34      	ldr	r3, [pc, #208]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 030c 	and.w	r3, r3, #12
 80048ba:	2b08      	cmp	r3, #8
 80048bc:	d05c      	beq.n	8004978 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d141      	bne.n	800494a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048c6:	4b31      	ldr	r3, [pc, #196]	; (800498c <HAL_RCC_OscConfig+0x478>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048cc:	f7fd f93c 	bl	8001b48 <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048d2:	e008      	b.n	80048e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048d4:	f7fd f938 	bl	8001b48 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e087      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048e6:	4b27      	ldr	r3, [pc, #156]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1f0      	bne.n	80048d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69da      	ldr	r2, [r3, #28]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	019b      	lsls	r3, r3, #6
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004908:	085b      	lsrs	r3, r3, #1
 800490a:	3b01      	subs	r3, #1
 800490c:	041b      	lsls	r3, r3, #16
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004914:	061b      	lsls	r3, r3, #24
 8004916:	491b      	ldr	r1, [pc, #108]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004918:	4313      	orrs	r3, r2
 800491a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800491c:	4b1b      	ldr	r3, [pc, #108]	; (800498c <HAL_RCC_OscConfig+0x478>)
 800491e:	2201      	movs	r2, #1
 8004920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004922:	f7fd f911 	bl	8001b48 <HAL_GetTick>
 8004926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004928:	e008      	b.n	800493c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800492a:	f7fd f90d 	bl	8001b48 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d901      	bls.n	800493c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e05c      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800493c:	4b11      	ldr	r3, [pc, #68]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d0f0      	beq.n	800492a <HAL_RCC_OscConfig+0x416>
 8004948:	e054      	b.n	80049f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800494a:	4b10      	ldr	r3, [pc, #64]	; (800498c <HAL_RCC_OscConfig+0x478>)
 800494c:	2200      	movs	r2, #0
 800494e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004950:	f7fd f8fa 	bl	8001b48 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004958:	f7fd f8f6 	bl	8001b48 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e045      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800496a:	4b06      	ldr	r3, [pc, #24]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1f0      	bne.n	8004958 <HAL_RCC_OscConfig+0x444>
 8004976:	e03d      	b.n	80049f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d107      	bne.n	8004990 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e038      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
 8004984:	40023800 	.word	0x40023800
 8004988:	40007000 	.word	0x40007000
 800498c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004990:	4b1b      	ldr	r3, [pc, #108]	; (8004a00 <HAL_RCC_OscConfig+0x4ec>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d028      	beq.n	80049f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d121      	bne.n	80049f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d11a      	bne.n	80049f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049c0:	4013      	ands	r3, r2
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d111      	bne.n	80049f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d6:	085b      	lsrs	r3, r3, #1
 80049d8:	3b01      	subs	r3, #1
 80049da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049dc:	429a      	cmp	r2, r3
 80049de:	d107      	bne.n	80049f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d001      	beq.n	80049f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e000      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3718      	adds	r7, #24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	40023800 	.word	0x40023800

08004a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e0cc      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a18:	4b68      	ldr	r3, [pc, #416]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d90c      	bls.n	8004a40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a26:	4b65      	ldr	r3, [pc, #404]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	b2d2      	uxtb	r2, r2
 8004a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a2e:	4b63      	ldr	r3, [pc, #396]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0307 	and.w	r3, r3, #7
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d001      	beq.n	8004a40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e0b8      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d020      	beq.n	8004a8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0304 	and.w	r3, r3, #4
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d005      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a58:	4b59      	ldr	r3, [pc, #356]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	4a58      	ldr	r2, [pc, #352]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0308 	and.w	r3, r3, #8
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d005      	beq.n	8004a7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a70:	4b53      	ldr	r3, [pc, #332]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	4a52      	ldr	r2, [pc, #328]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a7c:	4b50      	ldr	r3, [pc, #320]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	494d      	ldr	r1, [pc, #308]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d044      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d107      	bne.n	8004ab2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aa2:	4b47      	ldr	r3, [pc, #284]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d119      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e07f      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d003      	beq.n	8004ac2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004abe:	2b03      	cmp	r3, #3
 8004ac0:	d107      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ac2:	4b3f      	ldr	r3, [pc, #252]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d109      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e06f      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad2:	4b3b      	ldr	r3, [pc, #236]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e067      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ae2:	4b37      	ldr	r3, [pc, #220]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f023 0203 	bic.w	r2, r3, #3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	4934      	ldr	r1, [pc, #208]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004af4:	f7fd f828 	bl	8001b48 <HAL_GetTick>
 8004af8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004afa:	e00a      	b.n	8004b12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004afc:	f7fd f824 	bl	8001b48 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e04f      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b12:	4b2b      	ldr	r3, [pc, #172]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 020c 	and.w	r2, r3, #12
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d1eb      	bne.n	8004afc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b24:	4b25      	ldr	r3, [pc, #148]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d20c      	bcs.n	8004b4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b32:	4b22      	ldr	r3, [pc, #136]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	b2d2      	uxtb	r2, r2
 8004b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b3a:	4b20      	ldr	r3, [pc, #128]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0307 	and.w	r3, r3, #7
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d001      	beq.n	8004b4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e032      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d008      	beq.n	8004b6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b58:	4b19      	ldr	r3, [pc, #100]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	4916      	ldr	r1, [pc, #88]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0308 	and.w	r3, r3, #8
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d009      	beq.n	8004b8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b76:	4b12      	ldr	r3, [pc, #72]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	490e      	ldr	r1, [pc, #56]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b8a:	f000 f821 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	4b0b      	ldr	r3, [pc, #44]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	091b      	lsrs	r3, r3, #4
 8004b96:	f003 030f 	and.w	r3, r3, #15
 8004b9a:	490a      	ldr	r1, [pc, #40]	; (8004bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b9c:	5ccb      	ldrb	r3, [r1, r3]
 8004b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba2:	4a09      	ldr	r2, [pc, #36]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ba6:	4b09      	ldr	r3, [pc, #36]	; (8004bcc <HAL_RCC_ClockConfig+0x1c8>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7fc ff88 	bl	8001ac0 <HAL_InitTick>

  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	40023c00 	.word	0x40023c00
 8004bc0:	40023800 	.word	0x40023800
 8004bc4:	0800a104 	.word	0x0800a104
 8004bc8:	20000000 	.word	0x20000000
 8004bcc:	20000004 	.word	0x20000004

08004bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bd4:	b094      	sub	sp, #80	; 0x50
 8004bd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	647b      	str	r3, [r7, #68]	; 0x44
 8004bdc:	2300      	movs	r3, #0
 8004bde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004be0:	2300      	movs	r3, #0
 8004be2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004be8:	4b79      	ldr	r3, [pc, #484]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f003 030c 	and.w	r3, r3, #12
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	d00d      	beq.n	8004c10 <HAL_RCC_GetSysClockFreq+0x40>
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	f200 80e1 	bhi.w	8004dbc <HAL_RCC_GetSysClockFreq+0x1ec>
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d002      	beq.n	8004c04 <HAL_RCC_GetSysClockFreq+0x34>
 8004bfe:	2b04      	cmp	r3, #4
 8004c00:	d003      	beq.n	8004c0a <HAL_RCC_GetSysClockFreq+0x3a>
 8004c02:	e0db      	b.n	8004dbc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c04:	4b73      	ldr	r3, [pc, #460]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c06:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004c08:	e0db      	b.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c0a:	4b73      	ldr	r3, [pc, #460]	; (8004dd8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c0e:	e0d8      	b.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c10:	4b6f      	ldr	r3, [pc, #444]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c18:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c1a:	4b6d      	ldr	r3, [pc, #436]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d063      	beq.n	8004cee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c26:	4b6a      	ldr	r3, [pc, #424]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	099b      	lsrs	r3, r3, #6
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c30:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c38:	633b      	str	r3, [r7, #48]	; 0x30
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c42:	4622      	mov	r2, r4
 8004c44:	462b      	mov	r3, r5
 8004c46:	f04f 0000 	mov.w	r0, #0
 8004c4a:	f04f 0100 	mov.w	r1, #0
 8004c4e:	0159      	lsls	r1, r3, #5
 8004c50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c54:	0150      	lsls	r0, r2, #5
 8004c56:	4602      	mov	r2, r0
 8004c58:	460b      	mov	r3, r1
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	1a51      	subs	r1, r2, r1
 8004c5e:	6139      	str	r1, [r7, #16]
 8004c60:	4629      	mov	r1, r5
 8004c62:	eb63 0301 	sbc.w	r3, r3, r1
 8004c66:	617b      	str	r3, [r7, #20]
 8004c68:	f04f 0200 	mov.w	r2, #0
 8004c6c:	f04f 0300 	mov.w	r3, #0
 8004c70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c74:	4659      	mov	r1, fp
 8004c76:	018b      	lsls	r3, r1, #6
 8004c78:	4651      	mov	r1, sl
 8004c7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c7e:	4651      	mov	r1, sl
 8004c80:	018a      	lsls	r2, r1, #6
 8004c82:	4651      	mov	r1, sl
 8004c84:	ebb2 0801 	subs.w	r8, r2, r1
 8004c88:	4659      	mov	r1, fp
 8004c8a:	eb63 0901 	sbc.w	r9, r3, r1
 8004c8e:	f04f 0200 	mov.w	r2, #0
 8004c92:	f04f 0300 	mov.w	r3, #0
 8004c96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ca2:	4690      	mov	r8, r2
 8004ca4:	4699      	mov	r9, r3
 8004ca6:	4623      	mov	r3, r4
 8004ca8:	eb18 0303 	adds.w	r3, r8, r3
 8004cac:	60bb      	str	r3, [r7, #8]
 8004cae:	462b      	mov	r3, r5
 8004cb0:	eb49 0303 	adc.w	r3, r9, r3
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	f04f 0200 	mov.w	r2, #0
 8004cba:	f04f 0300 	mov.w	r3, #0
 8004cbe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004cc2:	4629      	mov	r1, r5
 8004cc4:	024b      	lsls	r3, r1, #9
 8004cc6:	4621      	mov	r1, r4
 8004cc8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ccc:	4621      	mov	r1, r4
 8004cce:	024a      	lsls	r2, r1, #9
 8004cd0:	4610      	mov	r0, r2
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cdc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ce0:	f7fb face 	bl	8000280 <__aeabi_uldivmod>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4613      	mov	r3, r2
 8004cea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cec:	e058      	b.n	8004da0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cee:	4b38      	ldr	r3, [pc, #224]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	099b      	lsrs	r3, r3, #6
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	4611      	mov	r1, r2
 8004cfa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004cfe:	623b      	str	r3, [r7, #32]
 8004d00:	2300      	movs	r3, #0
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24
 8004d04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d08:	4642      	mov	r2, r8
 8004d0a:	464b      	mov	r3, r9
 8004d0c:	f04f 0000 	mov.w	r0, #0
 8004d10:	f04f 0100 	mov.w	r1, #0
 8004d14:	0159      	lsls	r1, r3, #5
 8004d16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d1a:	0150      	lsls	r0, r2, #5
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	4641      	mov	r1, r8
 8004d22:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d26:	4649      	mov	r1, r9
 8004d28:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d2c:	f04f 0200 	mov.w	r2, #0
 8004d30:	f04f 0300 	mov.w	r3, #0
 8004d34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d40:	ebb2 040a 	subs.w	r4, r2, sl
 8004d44:	eb63 050b 	sbc.w	r5, r3, fp
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	00eb      	lsls	r3, r5, #3
 8004d52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d56:	00e2      	lsls	r2, r4, #3
 8004d58:	4614      	mov	r4, r2
 8004d5a:	461d      	mov	r5, r3
 8004d5c:	4643      	mov	r3, r8
 8004d5e:	18e3      	adds	r3, r4, r3
 8004d60:	603b      	str	r3, [r7, #0]
 8004d62:	464b      	mov	r3, r9
 8004d64:	eb45 0303 	adc.w	r3, r5, r3
 8004d68:	607b      	str	r3, [r7, #4]
 8004d6a:	f04f 0200 	mov.w	r2, #0
 8004d6e:	f04f 0300 	mov.w	r3, #0
 8004d72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d76:	4629      	mov	r1, r5
 8004d78:	028b      	lsls	r3, r1, #10
 8004d7a:	4621      	mov	r1, r4
 8004d7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d80:	4621      	mov	r1, r4
 8004d82:	028a      	lsls	r2, r1, #10
 8004d84:	4610      	mov	r0, r2
 8004d86:	4619      	mov	r1, r3
 8004d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	61bb      	str	r3, [r7, #24]
 8004d8e:	61fa      	str	r2, [r7, #28]
 8004d90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d94:	f7fb fa74 	bl	8000280 <__aeabi_uldivmod>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004da0:	4b0b      	ldr	r3, [pc, #44]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	0c1b      	lsrs	r3, r3, #16
 8004da6:	f003 0303 	and.w	r3, r3, #3
 8004daa:	3301      	adds	r3, #1
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004db0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dba:	e002      	b.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dbc:	4b05      	ldr	r3, [pc, #20]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004dbe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3750      	adds	r7, #80	; 0x50
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dce:	bf00      	nop
 8004dd0:	40023800 	.word	0x40023800
 8004dd4:	00f42400 	.word	0x00f42400
 8004dd8:	007a1200 	.word	0x007a1200

08004ddc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004de0:	4b03      	ldr	r3, [pc, #12]	; (8004df0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004de2:	681b      	ldr	r3, [r3, #0]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	20000000 	.word	0x20000000

08004df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004df8:	f7ff fff0 	bl	8004ddc <HAL_RCC_GetHCLKFreq>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	4b05      	ldr	r3, [pc, #20]	; (8004e14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	0a9b      	lsrs	r3, r3, #10
 8004e04:	f003 0307 	and.w	r3, r3, #7
 8004e08:	4903      	ldr	r1, [pc, #12]	; (8004e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e0a:	5ccb      	ldrb	r3, [r1, r3]
 8004e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	40023800 	.word	0x40023800
 8004e18:	0800a114 	.word	0x0800a114

08004e1c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d105      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d038      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e44:	4b68      	ldr	r3, [pc, #416]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e4a:	f7fc fe7d 	bl	8001b48 <HAL_GetTick>
 8004e4e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e50:	e008      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e52:	f7fc fe79 	bl	8001b48 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d901      	bls.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e0bd      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e64:	4b61      	ldr	r3, [pc, #388]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1f0      	bne.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	019b      	lsls	r3, r3, #6
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	071b      	lsls	r3, r3, #28
 8004e82:	495a      	ldr	r1, [pc, #360]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e8a:	4b57      	ldr	r3, [pc, #348]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e90:	f7fc fe5a 	bl	8001b48 <HAL_GetTick>
 8004e94:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e96:	e008      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e98:	f7fc fe56 	bl	8001b48 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e09a      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004eaa:	4b50      	ldr	r3, [pc, #320]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0f0      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 8083 	beq.w	8004fca <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	60fb      	str	r3, [r7, #12]
 8004ec8:	4b48      	ldr	r3, [pc, #288]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ecc:	4a47      	ldr	r2, [pc, #284]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ed2:	6413      	str	r3, [r2, #64]	; 0x40
 8004ed4:	4b45      	ldr	r3, [pc, #276]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004edc:	60fb      	str	r3, [r7, #12]
 8004ede:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004ee0:	4b43      	ldr	r3, [pc, #268]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a42      	ldr	r2, [pc, #264]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eea:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004eec:	f7fc fe2c 	bl	8001b48 <HAL_GetTick>
 8004ef0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004ef4:	f7fc fe28 	bl	8001b48 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e06c      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f06:	4b3a      	ldr	r3, [pc, #232]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d0f0      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f12:	4b36      	ldr	r3, [pc, #216]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f1a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d02f      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d028      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f30:	4b2e      	ldr	r3, [pc, #184]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f38:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f3a:	4b2e      	ldr	r3, [pc, #184]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f40:	4b2c      	ldr	r3, [pc, #176]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004f46:	4a29      	ldr	r2, [pc, #164]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f4c:	4b27      	ldr	r3, [pc, #156]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d114      	bne.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004f58:	f7fc fdf6 	bl	8001b48 <HAL_GetTick>
 8004f5c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f5e:	e00a      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f60:	f7fc fdf2 	bl	8001b48 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e034      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f76:	4b1d      	ldr	r3, [pc, #116]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d0ee      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f8e:	d10d      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004f90:	4b16      	ldr	r3, [pc, #88]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fa4:	4911      	ldr	r1, [pc, #68]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	608b      	str	r3, [r1, #8]
 8004faa:	e005      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004fac:	4b0f      	ldr	r3, [pc, #60]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	4a0e      	ldr	r2, [pc, #56]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fb2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004fb6:	6093      	str	r3, [r2, #8]
 8004fb8:	4b0c      	ldr	r3, [pc, #48]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fc4:	4909      	ldr	r1, [pc, #36]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0308 	and.w	r3, r3, #8
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d003      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	7d1a      	ldrb	r2, [r3, #20]
 8004fda:	4b07      	ldr	r3, [pc, #28]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004fdc:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3718      	adds	r7, #24
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	42470068 	.word	0x42470068
 8004fec:	40023800 	.word	0x40023800
 8004ff0:	40007000 	.word	0x40007000
 8004ff4:	42470e40 	.word	0x42470e40
 8004ff8:	424711e0 	.word	0x424711e0

08004ffc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005004:	2300      	movs	r3, #0
 8005006:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800500c:	2300      	movs	r3, #0
 800500e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005010:	2300      	movs	r3, #0
 8005012:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d140      	bne.n	800509c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800501a:	4b24      	ldr	r3, [pc, #144]	; (80050ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d005      	beq.n	8005036 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d131      	bne.n	8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005030:	4b1f      	ldr	r3, [pc, #124]	; (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005032:	617b      	str	r3, [r7, #20]
          break;
 8005034:	e031      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005036:	4b1d      	ldr	r3, [pc, #116]	; (80050ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800503e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005042:	d109      	bne.n	8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005044:	4b19      	ldr	r3, [pc, #100]	; (80050ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005046:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800504a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800504e:	4a19      	ldr	r2, [pc, #100]	; (80050b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005050:	fbb2 f3f3 	udiv	r3, r2, r3
 8005054:	613b      	str	r3, [r7, #16]
 8005056:	e008      	b.n	800506a <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005058:	4b14      	ldr	r3, [pc, #80]	; (80050ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800505a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800505e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005062:	4a15      	ldr	r2, [pc, #84]	; (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005064:	fbb2 f3f3 	udiv	r3, r2, r3
 8005068:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800506a:	4b10      	ldr	r3, [pc, #64]	; (80050ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800506c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005070:	099b      	lsrs	r3, r3, #6
 8005072:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	fb02 f303 	mul.w	r3, r2, r3
 800507c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800507e:	4b0b      	ldr	r3, [pc, #44]	; (80050ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005084:	0f1b      	lsrs	r3, r3, #28
 8005086:	f003 0307 	and.w	r3, r3, #7
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005090:	617b      	str	r3, [r7, #20]
          break;
 8005092:	e002      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005094:	2300      	movs	r3, #0
 8005096:	617b      	str	r3, [r7, #20]
          break;
 8005098:	bf00      	nop
        }
      }
      break;
 800509a:	bf00      	nop
    }
  }
  return frequency;
 800509c:	697b      	ldr	r3, [r7, #20]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	371c      	adds	r7, #28
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	40023800 	.word	0x40023800
 80050b0:	00bb8000 	.word	0x00bb8000
 80050b4:	007a1200 	.word	0x007a1200
 80050b8:	00f42400 	.word	0x00f42400

080050bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e07b      	b.n	80051c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d108      	bne.n	80050e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050de:	d009      	beq.n	80050f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	61da      	str	r2, [r3, #28]
 80050e6:	e005      	b.n	80050f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d106      	bne.n	8005114 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7fc fb56 	bl	80017c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800512a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800513c:	431a      	orrs	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005146:	431a      	orrs	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	431a      	orrs	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	431a      	orrs	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005164:	431a      	orrs	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800516e:	431a      	orrs	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005178:	ea42 0103 	orr.w	r1, r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005180:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	430a      	orrs	r2, r1
 800518a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	0c1b      	lsrs	r3, r3, #16
 8005192:	f003 0104 	and.w	r1, r3, #4
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519a:	f003 0210 	and.w	r2, r3, #16
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	69da      	ldr	r2, [r3, #28]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b088      	sub	sp, #32
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	60f8      	str	r0, [r7, #12]
 80051d6:	60b9      	str	r1, [r7, #8]
 80051d8:	603b      	str	r3, [r7, #0]
 80051da:	4613      	mov	r3, r2
 80051dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051de:	2300      	movs	r3, #0
 80051e0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d101      	bne.n	80051f0 <HAL_SPI_Transmit+0x22>
 80051ec:	2302      	movs	r3, #2
 80051ee:	e126      	b.n	800543e <HAL_SPI_Transmit+0x270>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051f8:	f7fc fca6 	bl	8001b48 <HAL_GetTick>
 80051fc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80051fe:	88fb      	ldrh	r3, [r7, #6]
 8005200:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b01      	cmp	r3, #1
 800520c:	d002      	beq.n	8005214 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800520e:	2302      	movs	r3, #2
 8005210:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005212:	e10b      	b.n	800542c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d002      	beq.n	8005220 <HAL_SPI_Transmit+0x52>
 800521a:	88fb      	ldrh	r3, [r7, #6]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d102      	bne.n	8005226 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005224:	e102      	b.n	800542c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2203      	movs	r2, #3
 800522a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	88fa      	ldrh	r2, [r7, #6]
 800523e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	88fa      	ldrh	r2, [r7, #6]
 8005244:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800526c:	d10f      	bne.n	800528e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800527c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800528c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005298:	2b40      	cmp	r3, #64	; 0x40
 800529a:	d007      	beq.n	80052ac <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052b4:	d14b      	bne.n	800534e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d002      	beq.n	80052c4 <HAL_SPI_Transmit+0xf6>
 80052be:	8afb      	ldrh	r3, [r7, #22]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d13e      	bne.n	8005342 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c8:	881a      	ldrh	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d4:	1c9a      	adds	r2, r3, #2
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052de:	b29b      	uxth	r3, r3
 80052e0:	3b01      	subs	r3, #1
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80052e8:	e02b      	b.n	8005342 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f003 0302 	and.w	r3, r3, #2
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d112      	bne.n	800531e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fc:	881a      	ldrh	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005308:	1c9a      	adds	r2, r3, #2
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005312:	b29b      	uxth	r3, r3
 8005314:	3b01      	subs	r3, #1
 8005316:	b29a      	uxth	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	86da      	strh	r2, [r3, #54]	; 0x36
 800531c:	e011      	b.n	8005342 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800531e:	f7fc fc13 	bl	8001b48 <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	429a      	cmp	r2, r3
 800532c:	d803      	bhi.n	8005336 <HAL_SPI_Transmit+0x168>
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005334:	d102      	bne.n	800533c <HAL_SPI_Transmit+0x16e>
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d102      	bne.n	8005342 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005340:	e074      	b.n	800542c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005346:	b29b      	uxth	r3, r3
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1ce      	bne.n	80052ea <HAL_SPI_Transmit+0x11c>
 800534c:	e04c      	b.n	80053e8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d002      	beq.n	800535c <HAL_SPI_Transmit+0x18e>
 8005356:	8afb      	ldrh	r3, [r7, #22]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d140      	bne.n	80053de <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	330c      	adds	r3, #12
 8005366:	7812      	ldrb	r2, [r2, #0]
 8005368:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536e:	1c5a      	adds	r2, r3, #1
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005378:	b29b      	uxth	r3, r3
 800537a:	3b01      	subs	r3, #1
 800537c:	b29a      	uxth	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005382:	e02c      	b.n	80053de <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b02      	cmp	r3, #2
 8005390:	d113      	bne.n	80053ba <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	330c      	adds	r3, #12
 800539c:	7812      	ldrb	r2, [r2, #0]
 800539e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a4:	1c5a      	adds	r2, r3, #1
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	3b01      	subs	r3, #1
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80053b8:	e011      	b.n	80053de <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053ba:	f7fc fbc5 	bl	8001b48 <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	683a      	ldr	r2, [r7, #0]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d803      	bhi.n	80053d2 <HAL_SPI_Transmit+0x204>
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d0:	d102      	bne.n	80053d8 <HAL_SPI_Transmit+0x20a>
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d102      	bne.n	80053de <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80053dc:	e026      	b.n	800542c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1cd      	bne.n	8005384 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	6839      	ldr	r1, [r7, #0]
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f000 f8b3 	bl	8005558 <SPI_EndRxTxTransaction>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d002      	beq.n	80053fe <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2220      	movs	r2, #32
 80053fc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10a      	bne.n	800541c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005406:	2300      	movs	r3, #0
 8005408:	613b      	str	r3, [r7, #16]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	613b      	str	r3, [r7, #16]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	613b      	str	r3, [r7, #16]
 800541a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005420:	2b00      	cmp	r3, #0
 8005422:	d002      	beq.n	800542a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	77fb      	strb	r3, [r7, #31]
 8005428:	e000      	b.n	800542c <HAL_SPI_Transmit+0x25e>
  }

error:
 800542a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800543c:	7ffb      	ldrb	r3, [r7, #31]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3720      	adds	r7, #32
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
	...

08005448 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b088      	sub	sp, #32
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	603b      	str	r3, [r7, #0]
 8005454:	4613      	mov	r3, r2
 8005456:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005458:	f7fc fb76 	bl	8001b48 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005460:	1a9b      	subs	r3, r3, r2
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	4413      	add	r3, r2
 8005466:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005468:	f7fc fb6e 	bl	8001b48 <HAL_GetTick>
 800546c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800546e:	4b39      	ldr	r3, [pc, #228]	; (8005554 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	015b      	lsls	r3, r3, #5
 8005474:	0d1b      	lsrs	r3, r3, #20
 8005476:	69fa      	ldr	r2, [r7, #28]
 8005478:	fb02 f303 	mul.w	r3, r2, r3
 800547c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800547e:	e054      	b.n	800552a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005486:	d050      	beq.n	800552a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005488:	f7fc fb5e 	bl	8001b48 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	69fa      	ldr	r2, [r7, #28]
 8005494:	429a      	cmp	r2, r3
 8005496:	d902      	bls.n	800549e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d13d      	bne.n	800551a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054b6:	d111      	bne.n	80054dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054c0:	d004      	beq.n	80054cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ca:	d107      	bne.n	80054dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054e4:	d10f      	bne.n	8005506 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054f4:	601a      	str	r2, [r3, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005504:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e017      	b.n	800554a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d101      	bne.n	8005524 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005520:	2300      	movs	r3, #0
 8005522:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	3b01      	subs	r3, #1
 8005528:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	689a      	ldr	r2, [r3, #8]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	4013      	ands	r3, r2
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	429a      	cmp	r2, r3
 8005538:	bf0c      	ite	eq
 800553a:	2301      	moveq	r3, #1
 800553c:	2300      	movne	r3, #0
 800553e:	b2db      	uxtb	r3, r3
 8005540:	461a      	mov	r2, r3
 8005542:	79fb      	ldrb	r3, [r7, #7]
 8005544:	429a      	cmp	r2, r3
 8005546:	d19b      	bne.n	8005480 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3720      	adds	r7, #32
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	20000000 	.word	0x20000000

08005558 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b088      	sub	sp, #32
 800555c:	af02      	add	r7, sp, #8
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005564:	4b1b      	ldr	r3, [pc, #108]	; (80055d4 <SPI_EndRxTxTransaction+0x7c>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a1b      	ldr	r2, [pc, #108]	; (80055d8 <SPI_EndRxTxTransaction+0x80>)
 800556a:	fba2 2303 	umull	r2, r3, r2, r3
 800556e:	0d5b      	lsrs	r3, r3, #21
 8005570:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005574:	fb02 f303 	mul.w	r3, r2, r3
 8005578:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005582:	d112      	bne.n	80055aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	2200      	movs	r2, #0
 800558c:	2180      	movs	r1, #128	; 0x80
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f7ff ff5a 	bl	8005448 <SPI_WaitFlagStateUntilTimeout>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d016      	beq.n	80055c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800559e:	f043 0220 	orr.w	r2, r3, #32
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e00f      	b.n	80055ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00a      	beq.n	80055c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	3b01      	subs	r3, #1
 80055b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c0:	2b80      	cmp	r3, #128	; 0x80
 80055c2:	d0f2      	beq.n	80055aa <SPI_EndRxTxTransaction+0x52>
 80055c4:	e000      	b.n	80055c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80055c6:	bf00      	nop
  }

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3718      	adds	r7, #24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	20000000 	.word	0x20000000
 80055d8:	165e9f81 	.word	0x165e9f81

080055dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e041      	b.n	8005672 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d106      	bne.n	8005608 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f7fc f95a 	bl	80018bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2202      	movs	r2, #2
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	3304      	adds	r3, #4
 8005618:	4619      	mov	r1, r3
 800561a:	4610      	mov	r0, r2
 800561c:	f000 f9e6 	bl	80059ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800567a:	b480      	push	{r7}
 800567c:	b083      	sub	sp, #12
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	6a1a      	ldr	r2, [r3, #32]
 8005688:	f241 1311 	movw	r3, #4369	; 0x1111
 800568c:	4013      	ands	r3, r2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10f      	bne.n	80056b2 <HAL_TIM_Base_Stop+0x38>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	6a1a      	ldr	r2, [r3, #32]
 8005698:	f240 4344 	movw	r3, #1092	; 0x444
 800569c:	4013      	ands	r3, r2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d107      	bne.n	80056b2 <HAL_TIM_Base_Stop+0x38>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f022 0201 	bic.w	r2, r2, #1
 80056b0:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d001      	beq.n	80056e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e044      	b.n	800576a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2202      	movs	r2, #2
 80056e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68da      	ldr	r2, [r3, #12]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f042 0201 	orr.w	r2, r2, #1
 80056f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a1e      	ldr	r2, [pc, #120]	; (8005778 <HAL_TIM_Base_Start_IT+0xb0>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d018      	beq.n	8005734 <HAL_TIM_Base_Start_IT+0x6c>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800570a:	d013      	beq.n	8005734 <HAL_TIM_Base_Start_IT+0x6c>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a1a      	ldr	r2, [pc, #104]	; (800577c <HAL_TIM_Base_Start_IT+0xb4>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d00e      	beq.n	8005734 <HAL_TIM_Base_Start_IT+0x6c>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a19      	ldr	r2, [pc, #100]	; (8005780 <HAL_TIM_Base_Start_IT+0xb8>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d009      	beq.n	8005734 <HAL_TIM_Base_Start_IT+0x6c>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a17      	ldr	r2, [pc, #92]	; (8005784 <HAL_TIM_Base_Start_IT+0xbc>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d004      	beq.n	8005734 <HAL_TIM_Base_Start_IT+0x6c>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a16      	ldr	r2, [pc, #88]	; (8005788 <HAL_TIM_Base_Start_IT+0xc0>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d111      	bne.n	8005758 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f003 0307 	and.w	r3, r3, #7
 800573e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2b06      	cmp	r3, #6
 8005744:	d010      	beq.n	8005768 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f042 0201 	orr.w	r2, r2, #1
 8005754:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005756:	e007      	b.n	8005768 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f042 0201 	orr.w	r2, r2, #1
 8005766:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	40010000 	.word	0x40010000
 800577c:	40000400 	.word	0x40000400
 8005780:	40000800 	.word	0x40000800
 8005784:	40000c00 	.word	0x40000c00
 8005788:	40014000 	.word	0x40014000

0800578c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d122      	bne.n	80057e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	f003 0302 	and.w	r3, r3, #2
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d11b      	bne.n	80057e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f06f 0202 	mvn.w	r2, #2
 80057b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	f003 0303 	and.w	r3, r3, #3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f8ee 	bl	80059b0 <HAL_TIM_IC_CaptureCallback>
 80057d4:	e005      	b.n	80057e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f8e0 	bl	800599c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 f8f1 	bl	80059c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	f003 0304 	and.w	r3, r3, #4
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	d122      	bne.n	800583c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	f003 0304 	and.w	r3, r3, #4
 8005800:	2b04      	cmp	r3, #4
 8005802:	d11b      	bne.n	800583c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f06f 0204 	mvn.w	r2, #4
 800580c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2202      	movs	r2, #2
 8005812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f8c4 	bl	80059b0 <HAL_TIM_IC_CaptureCallback>
 8005828:	e005      	b.n	8005836 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f8b6 	bl	800599c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f8c7 	bl	80059c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	f003 0308 	and.w	r3, r3, #8
 8005846:	2b08      	cmp	r3, #8
 8005848:	d122      	bne.n	8005890 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	f003 0308 	and.w	r3, r3, #8
 8005854:	2b08      	cmp	r3, #8
 8005856:	d11b      	bne.n	8005890 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f06f 0208 	mvn.w	r2, #8
 8005860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2204      	movs	r2, #4
 8005866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	f003 0303 	and.w	r3, r3, #3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f89a 	bl	80059b0 <HAL_TIM_IC_CaptureCallback>
 800587c:	e005      	b.n	800588a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f88c 	bl	800599c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 f89d 	bl	80059c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	f003 0310 	and.w	r3, r3, #16
 800589a:	2b10      	cmp	r3, #16
 800589c:	d122      	bne.n	80058e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	f003 0310 	and.w	r3, r3, #16
 80058a8:	2b10      	cmp	r3, #16
 80058aa:	d11b      	bne.n	80058e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f06f 0210 	mvn.w	r2, #16
 80058b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2208      	movs	r2, #8
 80058ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 f870 	bl	80059b0 <HAL_TIM_IC_CaptureCallback>
 80058d0:	e005      	b.n	80058de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f862 	bl	800599c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f873 	bl	80059c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d10e      	bne.n	8005910 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	f003 0301 	and.w	r3, r3, #1
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d107      	bne.n	8005910 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f06f 0201 	mvn.w	r2, #1
 8005908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f7fb fa3c 	bl	8000d88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800591a:	2b80      	cmp	r3, #128	; 0x80
 800591c:	d10e      	bne.n	800593c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005928:	2b80      	cmp	r3, #128	; 0x80
 800592a:	d107      	bne.n	800593c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f8e2 	bl	8005b00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005946:	2b40      	cmp	r3, #64	; 0x40
 8005948:	d10e      	bne.n	8005968 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005954:	2b40      	cmp	r3, #64	; 0x40
 8005956:	d107      	bne.n	8005968 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f838 	bl	80059d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	f003 0320 	and.w	r3, r3, #32
 8005972:	2b20      	cmp	r3, #32
 8005974:	d10e      	bne.n	8005994 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	f003 0320 	and.w	r3, r3, #32
 8005980:	2b20      	cmp	r3, #32
 8005982:	d107      	bne.n	8005994 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f06f 0220 	mvn.w	r2, #32
 800598c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f8ac 	bl	8005aec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005994:	bf00      	nop
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a34      	ldr	r2, [pc, #208]	; (8005ad0 <TIM_Base_SetConfig+0xe4>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d00f      	beq.n	8005a24 <TIM_Base_SetConfig+0x38>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a0a:	d00b      	beq.n	8005a24 <TIM_Base_SetConfig+0x38>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a31      	ldr	r2, [pc, #196]	; (8005ad4 <TIM_Base_SetConfig+0xe8>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d007      	beq.n	8005a24 <TIM_Base_SetConfig+0x38>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a30      	ldr	r2, [pc, #192]	; (8005ad8 <TIM_Base_SetConfig+0xec>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d003      	beq.n	8005a24 <TIM_Base_SetConfig+0x38>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a2f      	ldr	r2, [pc, #188]	; (8005adc <TIM_Base_SetConfig+0xf0>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d108      	bne.n	8005a36 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a25      	ldr	r2, [pc, #148]	; (8005ad0 <TIM_Base_SetConfig+0xe4>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d01b      	beq.n	8005a76 <TIM_Base_SetConfig+0x8a>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a44:	d017      	beq.n	8005a76 <TIM_Base_SetConfig+0x8a>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a22      	ldr	r2, [pc, #136]	; (8005ad4 <TIM_Base_SetConfig+0xe8>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d013      	beq.n	8005a76 <TIM_Base_SetConfig+0x8a>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a21      	ldr	r2, [pc, #132]	; (8005ad8 <TIM_Base_SetConfig+0xec>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d00f      	beq.n	8005a76 <TIM_Base_SetConfig+0x8a>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a20      	ldr	r2, [pc, #128]	; (8005adc <TIM_Base_SetConfig+0xf0>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d00b      	beq.n	8005a76 <TIM_Base_SetConfig+0x8a>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a1f      	ldr	r2, [pc, #124]	; (8005ae0 <TIM_Base_SetConfig+0xf4>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d007      	beq.n	8005a76 <TIM_Base_SetConfig+0x8a>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a1e      	ldr	r2, [pc, #120]	; (8005ae4 <TIM_Base_SetConfig+0xf8>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d003      	beq.n	8005a76 <TIM_Base_SetConfig+0x8a>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a1d      	ldr	r2, [pc, #116]	; (8005ae8 <TIM_Base_SetConfig+0xfc>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d108      	bne.n	8005a88 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	689a      	ldr	r2, [r3, #8]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a08      	ldr	r2, [pc, #32]	; (8005ad0 <TIM_Base_SetConfig+0xe4>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d103      	bne.n	8005abc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	691a      	ldr	r2, [r3, #16]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	615a      	str	r2, [r3, #20]
}
 8005ac2:	bf00      	nop
 8005ac4:	3714      	adds	r7, #20
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	40010000 	.word	0x40010000
 8005ad4:	40000400 	.word	0x40000400
 8005ad8:	40000800 	.word	0x40000800
 8005adc:	40000c00 	.word	0x40000c00
 8005ae0:	40014000 	.word	0x40014000
 8005ae4:	40014400 	.word	0x40014400
 8005ae8:	40014800 	.word	0x40014800

08005aec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b14:	b084      	sub	sp, #16
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b084      	sub	sp, #16
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
 8005b1e:	f107 001c 	add.w	r0, r7, #28
 8005b22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d122      	bne.n	8005b72 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005b40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d105      	bne.n	8005b66 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f9c0 	bl	8005eec <USB_CoreReset>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	73fb      	strb	r3, [r7, #15]
 8005b70:	e01a      	b.n	8005ba8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f9b4 	bl	8005eec <USB_CoreReset>
 8005b84:	4603      	mov	r3, r0
 8005b86:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d106      	bne.n	8005b9c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	639a      	str	r2, [r3, #56]	; 0x38
 8005b9a:	e005      	b.n	8005ba8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d10b      	bne.n	8005bc6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f043 0206 	orr.w	r2, r3, #6
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f043 0220 	orr.w	r2, r3, #32
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3710      	adds	r7, #16
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bd2:	b004      	add	sp, #16
 8005bd4:	4770      	bx	lr

08005bd6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b083      	sub	sp, #12
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f043 0201 	orr.w	r2, r3, #1
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f023 0201 	bic.w	r2, r3, #1
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b084      	sub	sp, #16
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
 8005c22:	460b      	mov	r3, r1
 8005c24:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005c26:	2300      	movs	r3, #0
 8005c28:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c36:	78fb      	ldrb	r3, [r7, #3]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d115      	bne.n	8005c68 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c48:	2001      	movs	r0, #1
 8005c4a:	f7fb ff89 	bl	8001b60 <HAL_Delay>
      ms++;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	3301      	adds	r3, #1
 8005c52:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 f93a 	bl	8005ece <USB_GetMode>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d01e      	beq.n	8005c9e <USB_SetCurrentMode+0x84>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2b31      	cmp	r3, #49	; 0x31
 8005c64:	d9f0      	bls.n	8005c48 <USB_SetCurrentMode+0x2e>
 8005c66:	e01a      	b.n	8005c9e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c68:	78fb      	ldrb	r3, [r7, #3]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d115      	bne.n	8005c9a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c7a:	2001      	movs	r0, #1
 8005c7c:	f7fb ff70 	bl	8001b60 <HAL_Delay>
      ms++;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	3301      	adds	r3, #1
 8005c84:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 f921 	bl	8005ece <USB_GetMode>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d005      	beq.n	8005c9e <USB_SetCurrentMode+0x84>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2b31      	cmp	r3, #49	; 0x31
 8005c96:	d9f0      	bls.n	8005c7a <USB_SetCurrentMode+0x60>
 8005c98:	e001      	b.n	8005c9e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e005      	b.n	8005caa <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2b32      	cmp	r3, #50	; 0x32
 8005ca2:	d101      	bne.n	8005ca8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e000      	b.n	8005caa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
	...

08005cb4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	4a13      	ldr	r2, [pc, #76]	; (8005d18 <USB_FlushTxFifo+0x64>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d901      	bls.n	8005cd4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e01b      	b.n	8005d0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	daf2      	bge.n	8005cc2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	019b      	lsls	r3, r3, #6
 8005ce4:	f043 0220 	orr.w	r2, r3, #32
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	4a08      	ldr	r2, [pc, #32]	; (8005d18 <USB_FlushTxFifo+0x64>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d901      	bls.n	8005cfe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e006      	b.n	8005d0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	f003 0320 	and.w	r3, r3, #32
 8005d06:	2b20      	cmp	r3, #32
 8005d08:	d0f0      	beq.n	8005cec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3714      	adds	r7, #20
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	00030d40 	.word	0x00030d40

08005d1c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d24:	2300      	movs	r3, #0
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	4a11      	ldr	r2, [pc, #68]	; (8005d78 <USB_FlushRxFifo+0x5c>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d901      	bls.n	8005d3a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e018      	b.n	8005d6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	daf2      	bge.n	8005d28 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005d42:	2300      	movs	r3, #0
 8005d44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2210      	movs	r2, #16
 8005d4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	4a08      	ldr	r2, [pc, #32]	; (8005d78 <USB_FlushRxFifo+0x5c>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d901      	bls.n	8005d5e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e006      	b.n	8005d6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	f003 0310 	and.w	r3, r3, #16
 8005d66:	2b10      	cmp	r3, #16
 8005d68:	d0f0      	beq.n	8005d4c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3714      	adds	r7, #20
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr
 8005d78:	00030d40 	.word	0x00030d40

08005d7c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b089      	sub	sp, #36	; 0x24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	4611      	mov	r1, r2
 8005d88:	461a      	mov	r2, r3
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	71fb      	strb	r3, [r7, #7]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005d9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d123      	bne.n	8005dea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005da2:	88bb      	ldrh	r3, [r7, #4]
 8005da4:	3303      	adds	r3, #3
 8005da6:	089b      	lsrs	r3, r3, #2
 8005da8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005daa:	2300      	movs	r3, #0
 8005dac:	61bb      	str	r3, [r7, #24]
 8005dae:	e018      	b.n	8005de2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005db0:	79fb      	ldrb	r3, [r7, #7]
 8005db2:	031a      	lsls	r2, r3, #12
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	3301      	adds	r3, #1
 8005dce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	3301      	adds	r3, #1
 8005de0:	61bb      	str	r3, [r7, #24]
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d3e2      	bcc.n	8005db0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3724      	adds	r7, #36	; 0x24
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b08b      	sub	sp, #44	; 0x2c
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	4613      	mov	r3, r2
 8005e04:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005e0e:	88fb      	ldrh	r3, [r7, #6]
 8005e10:	089b      	lsrs	r3, r3, #2
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005e16:	88fb      	ldrh	r3, [r7, #6]
 8005e18:	f003 0303 	and.w	r3, r3, #3
 8005e1c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005e1e:	2300      	movs	r3, #0
 8005e20:	623b      	str	r3, [r7, #32]
 8005e22:	e014      	b.n	8005e4e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e32:	3301      	adds	r3, #1
 8005e34:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	3301      	adds	r3, #1
 8005e3a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	3301      	adds	r3, #1
 8005e40:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e44:	3301      	adds	r3, #1
 8005e46:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005e48:	6a3b      	ldr	r3, [r7, #32]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	623b      	str	r3, [r7, #32]
 8005e4e:	6a3a      	ldr	r2, [r7, #32]
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d3e6      	bcc.n	8005e24 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005e56:	8bfb      	ldrh	r3, [r7, #30]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d01e      	beq.n	8005e9a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e66:	461a      	mov	r2, r3
 8005e68:	f107 0310 	add.w	r3, r7, #16
 8005e6c:	6812      	ldr	r2, [r2, #0]
 8005e6e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	6a3b      	ldr	r3, [r7, #32]
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	00db      	lsls	r3, r3, #3
 8005e78:	fa22 f303 	lsr.w	r3, r2, r3
 8005e7c:	b2da      	uxtb	r2, r3
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e80:	701a      	strb	r2, [r3, #0]
      i++;
 8005e82:	6a3b      	ldr	r3, [r7, #32]
 8005e84:	3301      	adds	r3, #1
 8005e86:	623b      	str	r3, [r7, #32]
      pDest++;
 8005e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005e8e:	8bfb      	ldrh	r3, [r7, #30]
 8005e90:	3b01      	subs	r3, #1
 8005e92:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005e94:	8bfb      	ldrh	r3, [r7, #30]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1ea      	bne.n	8005e70 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	372c      	adds	r7, #44	; 0x2c
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b083      	sub	sp, #12
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	f003 0301 	and.w	r3, r3, #1
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
	...

08005eec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	3301      	adds	r3, #1
 8005efc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	4a13      	ldr	r2, [pc, #76]	; (8005f50 <USB_CoreReset+0x64>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d901      	bls.n	8005f0a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e01b      	b.n	8005f42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	daf2      	bge.n	8005ef8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f12:	2300      	movs	r3, #0
 8005f14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	f043 0201 	orr.w	r2, r3, #1
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	3301      	adds	r3, #1
 8005f26:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4a09      	ldr	r2, [pc, #36]	; (8005f50 <USB_CoreReset+0x64>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d901      	bls.n	8005f34 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e006      	b.n	8005f42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	f003 0301 	and.w	r3, r3, #1
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d0f0      	beq.n	8005f22 <USB_CoreReset+0x36>

  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3714      	adds	r7, #20
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	00030d40 	.word	0x00030d40

08005f54 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f54:	b084      	sub	sp, #16
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b086      	sub	sp, #24
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
 8005f5e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005f62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005f66:	2300      	movs	r3, #0
 8005f68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f74:	461a      	mov	r2, r3
 8005f76:	2300      	movs	r3, #0
 8005f78:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f96:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d018      	beq.n	8005fdc <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d10a      	bne.n	8005fc6 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fbe:	f043 0304 	orr.w	r3, r3, #4
 8005fc2:	6013      	str	r3, [r2, #0]
 8005fc4:	e014      	b.n	8005ff0 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fd4:	f023 0304 	bic.w	r3, r3, #4
 8005fd8:	6013      	str	r3, [r2, #0]
 8005fda:	e009      	b.n	8005ff0 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fea:	f023 0304 	bic.w	r3, r3, #4
 8005fee:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005ff0:	2110      	movs	r1, #16
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f7ff fe5e 	bl	8005cb4 <USB_FlushTxFifo>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d001      	beq.n	8006002 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7ff fe8a 	bl	8005d1c <USB_FlushRxFifo>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006012:	2300      	movs	r3, #0
 8006014:	613b      	str	r3, [r7, #16]
 8006016:	e015      	b.n	8006044 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	015a      	lsls	r2, r3, #5
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	4413      	add	r3, r2
 8006020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006024:	461a      	mov	r2, r3
 8006026:	f04f 33ff 	mov.w	r3, #4294967295
 800602a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4413      	add	r3, r2
 8006034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006038:	461a      	mov	r2, r3
 800603a:	2300      	movs	r3, #0
 800603c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	3301      	adds	r3, #1
 8006042:	613b      	str	r3, [r7, #16]
 8006044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	429a      	cmp	r2, r3
 800604a:	d3e5      	bcc.n	8006018 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f04f 32ff 	mov.w	r2, #4294967295
 8006058:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800605e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00b      	beq.n	800607e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f44f 7200 	mov.w	r2, #512	; 0x200
 800606c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a13      	ldr	r2, [pc, #76]	; (80060c0 <USB_HostInit+0x16c>)
 8006072:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a13      	ldr	r2, [pc, #76]	; (80060c4 <USB_HostInit+0x170>)
 8006078:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800607c:	e009      	b.n	8006092 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2280      	movs	r2, #128	; 0x80
 8006082:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a10      	ldr	r2, [pc, #64]	; (80060c8 <USB_HostInit+0x174>)
 8006088:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a0f      	ldr	r2, [pc, #60]	; (80060cc <USB_HostInit+0x178>)
 800608e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006094:	2b00      	cmp	r3, #0
 8006096:	d105      	bne.n	80060a4 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	f043 0210 	orr.w	r2, r3, #16
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	699a      	ldr	r2, [r3, #24]
 80060a8:	4b09      	ldr	r3, [pc, #36]	; (80060d0 <USB_HostInit+0x17c>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80060b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3718      	adds	r7, #24
 80060b6:	46bd      	mov	sp, r7
 80060b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060bc:	b004      	add	sp, #16
 80060be:	4770      	bx	lr
 80060c0:	01000200 	.word	0x01000200
 80060c4:	00e00300 	.word	0x00e00300
 80060c8:	00600080 	.word	0x00600080
 80060cc:	004000e0 	.word	0x004000e0
 80060d0:	a3200008 	.word	0xa3200008

080060d4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	460b      	mov	r3, r1
 80060de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80060f2:	f023 0303 	bic.w	r3, r3, #3
 80060f6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	78fb      	ldrb	r3, [r7, #3]
 8006102:	f003 0303 	and.w	r3, r3, #3
 8006106:	68f9      	ldr	r1, [r7, #12]
 8006108:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800610c:	4313      	orrs	r3, r2
 800610e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006110:	78fb      	ldrb	r3, [r7, #3]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d107      	bne.n	8006126 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800611c:	461a      	mov	r2, r3
 800611e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006122:	6053      	str	r3, [r2, #4]
 8006124:	e009      	b.n	800613a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006126:	78fb      	ldrb	r3, [r7, #3]
 8006128:	2b02      	cmp	r3, #2
 800612a:	d106      	bne.n	800613a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006132:	461a      	mov	r2, r3
 8006134:	f241 7370 	movw	r3, #6000	; 0x1770
 8006138:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3714      	adds	r7, #20
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006154:	2300      	movs	r3, #0
 8006156:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006168:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006176:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006178:	2064      	movs	r0, #100	; 0x64
 800617a:	f7fb fcf1 	bl	8001b60 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006186:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800618a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800618c:	200a      	movs	r0, #10
 800618e:	f7fb fce7 	bl	8001b60 <HAL_Delay>

  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	460b      	mov	r3, r1
 80061a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80061ac:	2300      	movs	r3, #0
 80061ae:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80061c0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d109      	bne.n	80061e0 <USB_DriveVbus+0x44>
 80061cc:	78fb      	ldrb	r3, [r7, #3]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d106      	bne.n	80061e0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80061da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80061de:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ea:	d109      	bne.n	8006200 <USB_DriveVbus+0x64>
 80061ec:	78fb      	ldrb	r3, [r7, #3]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d106      	bne.n	8006200 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80061fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061fe:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3714      	adds	r7, #20
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800620e:	b480      	push	{r7}
 8006210:	b085      	sub	sp, #20
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800621a:	2300      	movs	r3, #0
 800621c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	0c5b      	lsrs	r3, r3, #17
 800622c:	f003 0303 	and.w	r3, r3, #3
}
 8006230:	4618      	mov	r0, r3
 8006232:	3714      	adds	r7, #20
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	b29b      	uxth	r3, r3
}
 8006252:	4618      	mov	r0, r3
 8006254:	3714      	adds	r7, #20
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
	...

08006260 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b088      	sub	sp, #32
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	4608      	mov	r0, r1
 800626a:	4611      	mov	r1, r2
 800626c:	461a      	mov	r2, r3
 800626e:	4603      	mov	r3, r0
 8006270:	70fb      	strb	r3, [r7, #3]
 8006272:	460b      	mov	r3, r1
 8006274:	70bb      	strb	r3, [r7, #2]
 8006276:	4613      	mov	r3, r2
 8006278:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800627a:	2300      	movs	r3, #0
 800627c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006282:	78fb      	ldrb	r3, [r7, #3]
 8006284:	015a      	lsls	r2, r3, #5
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	4413      	add	r3, r2
 800628a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800628e:	461a      	mov	r2, r3
 8006290:	f04f 33ff 	mov.w	r3, #4294967295
 8006294:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006296:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800629a:	2b03      	cmp	r3, #3
 800629c:	d87e      	bhi.n	800639c <USB_HC_Init+0x13c>
 800629e:	a201      	add	r2, pc, #4	; (adr r2, 80062a4 <USB_HC_Init+0x44>)
 80062a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a4:	080062b5 	.word	0x080062b5
 80062a8:	0800635f 	.word	0x0800635f
 80062ac:	080062b5 	.word	0x080062b5
 80062b0:	08006321 	.word	0x08006321
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80062b4:	78fb      	ldrb	r3, [r7, #3]
 80062b6:	015a      	lsls	r2, r3, #5
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	4413      	add	r3, r2
 80062bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c0:	461a      	mov	r2, r3
 80062c2:	f240 439d 	movw	r3, #1181	; 0x49d
 80062c6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80062c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	da10      	bge.n	80062f2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80062d0:	78fb      	ldrb	r3, [r7, #3]
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	78fa      	ldrb	r2, [r7, #3]
 80062e0:	0151      	lsls	r1, r2, #5
 80062e2:	693a      	ldr	r2, [r7, #16]
 80062e4:	440a      	add	r2, r1
 80062e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062ee:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80062f0:	e057      	b.n	80063a2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d051      	beq.n	80063a2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80062fe:	78fb      	ldrb	r3, [r7, #3]
 8006300:	015a      	lsls	r2, r3, #5
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	4413      	add	r3, r2
 8006306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	78fa      	ldrb	r2, [r7, #3]
 800630e:	0151      	lsls	r1, r2, #5
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	440a      	add	r2, r1
 8006314:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006318:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800631c:	60d3      	str	r3, [r2, #12]
      break;
 800631e:	e040      	b.n	80063a2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006320:	78fb      	ldrb	r3, [r7, #3]
 8006322:	015a      	lsls	r2, r3, #5
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	4413      	add	r3, r2
 8006328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800632c:	461a      	mov	r2, r3
 800632e:	f240 639d 	movw	r3, #1693	; 0x69d
 8006332:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006334:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006338:	2b00      	cmp	r3, #0
 800633a:	da34      	bge.n	80063a6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800633c:	78fb      	ldrb	r3, [r7, #3]
 800633e:	015a      	lsls	r2, r3, #5
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	4413      	add	r3, r2
 8006344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	78fa      	ldrb	r2, [r7, #3]
 800634c:	0151      	lsls	r1, r2, #5
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	440a      	add	r2, r1
 8006352:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800635a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800635c:	e023      	b.n	80063a6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800635e:	78fb      	ldrb	r3, [r7, #3]
 8006360:	015a      	lsls	r2, r3, #5
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	4413      	add	r3, r2
 8006366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800636a:	461a      	mov	r2, r3
 800636c:	f240 2325 	movw	r3, #549	; 0x225
 8006370:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006372:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006376:	2b00      	cmp	r3, #0
 8006378:	da17      	bge.n	80063aa <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800637a:	78fb      	ldrb	r3, [r7, #3]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	4413      	add	r3, r2
 8006382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	78fa      	ldrb	r2, [r7, #3]
 800638a:	0151      	lsls	r1, r2, #5
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	440a      	add	r2, r1
 8006390:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006394:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006398:	60d3      	str	r3, [r2, #12]
      }
      break;
 800639a:	e006      	b.n	80063aa <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	77fb      	strb	r3, [r7, #31]
      break;
 80063a0:	e004      	b.n	80063ac <USB_HC_Init+0x14c>
      break;
 80063a2:	bf00      	nop
 80063a4:	e002      	b.n	80063ac <USB_HC_Init+0x14c>
      break;
 80063a6:	bf00      	nop
 80063a8:	e000      	b.n	80063ac <USB_HC_Init+0x14c>
      break;
 80063aa:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80063ac:	78fb      	ldrb	r3, [r7, #3]
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	78fa      	ldrb	r2, [r7, #3]
 80063bc:	0151      	lsls	r1, r2, #5
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	440a      	add	r2, r1
 80063c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063c6:	f043 0302 	orr.w	r3, r3, #2
 80063ca:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063d2:	699a      	ldr	r2, [r3, #24]
 80063d4:	78fb      	ldrb	r3, [r7, #3]
 80063d6:	f003 030f 	and.w	r3, r3, #15
 80063da:	2101      	movs	r1, #1
 80063dc:	fa01 f303 	lsl.w	r3, r1, r3
 80063e0:	6939      	ldr	r1, [r7, #16]
 80063e2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80063e6:	4313      	orrs	r3, r2
 80063e8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80063f6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	da03      	bge.n	8006406 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80063fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006402:	61bb      	str	r3, [r7, #24]
 8006404:	e001      	b.n	800640a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006406:	2300      	movs	r3, #0
 8006408:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f7ff feff 	bl	800620e <USB_GetHostSpeed>
 8006410:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006412:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006416:	2b02      	cmp	r3, #2
 8006418:	d106      	bne.n	8006428 <USB_HC_Init+0x1c8>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2b02      	cmp	r3, #2
 800641e:	d003      	beq.n	8006428 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006420:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006424:	617b      	str	r3, [r7, #20]
 8006426:	e001      	b.n	800642c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006428:	2300      	movs	r3, #0
 800642a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800642c:	787b      	ldrb	r3, [r7, #1]
 800642e:	059b      	lsls	r3, r3, #22
 8006430:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006434:	78bb      	ldrb	r3, [r7, #2]
 8006436:	02db      	lsls	r3, r3, #11
 8006438:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800643c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800643e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006442:	049b      	lsls	r3, r3, #18
 8006444:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006448:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800644a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800644c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006450:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006456:	78fb      	ldrb	r3, [r7, #3]
 8006458:	0159      	lsls	r1, r3, #5
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	440b      	add	r3, r1
 800645e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006462:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006468:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800646a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800646e:	2b03      	cmp	r3, #3
 8006470:	d003      	beq.n	800647a <USB_HC_Init+0x21a>
 8006472:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006476:	2b01      	cmp	r3, #1
 8006478:	d10f      	bne.n	800649a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800647a:	78fb      	ldrb	r3, [r7, #3]
 800647c:	015a      	lsls	r2, r3, #5
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	4413      	add	r3, r2
 8006482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	78fa      	ldrb	r2, [r7, #3]
 800648a:	0151      	lsls	r1, r2, #5
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	440a      	add	r2, r1
 8006490:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006494:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006498:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800649a:	7ffb      	ldrb	r3, [r7, #31]
}
 800649c:	4618      	mov	r0, r3
 800649e:	3720      	adds	r7, #32
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b08c      	sub	sp, #48	; 0x30
 80064a8:	af02      	add	r7, sp, #8
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	4613      	mov	r3, r2
 80064b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	785b      	ldrb	r3, [r3, #1]
 80064ba:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80064bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064c0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d02d      	beq.n	800652a <USB_HC_StartXfer+0x86>
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	791b      	ldrb	r3, [r3, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d129      	bne.n	800652a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80064d6:	79fb      	ldrb	r3, [r7, #7]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d117      	bne.n	800650c <USB_HC_StartXfer+0x68>
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	79db      	ldrb	r3, [r3, #7]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d003      	beq.n	80064ec <USB_HC_StartXfer+0x48>
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	79db      	ldrb	r3, [r3, #7]
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d10f      	bne.n	800650c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	015a      	lsls	r2, r3, #5
 80064f0:	6a3b      	ldr	r3, [r7, #32]
 80064f2:	4413      	add	r3, r2
 80064f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	69fa      	ldr	r2, [r7, #28]
 80064fc:	0151      	lsls	r1, r2, #5
 80064fe:	6a3a      	ldr	r2, [r7, #32]
 8006500:	440a      	add	r2, r1
 8006502:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800650a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800650c:	79fb      	ldrb	r3, [r7, #7]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d10b      	bne.n	800652a <USB_HC_StartXfer+0x86>
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	795b      	ldrb	r3, [r3, #5]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d107      	bne.n	800652a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	785b      	ldrb	r3, [r3, #1]
 800651e:	4619      	mov	r1, r3
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f000 fa0f 	bl	8006944 <USB_DoPing>
      return HAL_OK;
 8006526:	2300      	movs	r3, #0
 8006528:	e0f8      	b.n	800671c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d018      	beq.n	8006564 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	8912      	ldrh	r2, [r2, #8]
 800653a:	4413      	add	r3, r2
 800653c:	3b01      	subs	r3, #1
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	8912      	ldrh	r2, [r2, #8]
 8006542:	fbb3 f3f2 	udiv	r3, r3, r2
 8006546:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006548:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800654a:	8b7b      	ldrh	r3, [r7, #26]
 800654c:	429a      	cmp	r2, r3
 800654e:	d90b      	bls.n	8006568 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006550:	8b7b      	ldrh	r3, [r7, #26]
 8006552:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006554:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	8912      	ldrh	r2, [r2, #8]
 800655a:	fb03 f202 	mul.w	r2, r3, r2
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	611a      	str	r2, [r3, #16]
 8006562:	e001      	b.n	8006568 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006564:	2301      	movs	r3, #1
 8006566:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	78db      	ldrb	r3, [r3, #3]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d007      	beq.n	8006580 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006570:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	8912      	ldrh	r2, [r2, #8]
 8006576:	fb03 f202 	mul.w	r2, r3, r2
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	611a      	str	r2, [r3, #16]
 800657e:	e003      	b.n	8006588 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	695a      	ldr	r2, [r3, #20]
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006590:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006592:	04d9      	lsls	r1, r3, #19
 8006594:	4b63      	ldr	r3, [pc, #396]	; (8006724 <USB_HC_StartXfer+0x280>)
 8006596:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006598:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	7a9b      	ldrb	r3, [r3, #10]
 800659e:	075b      	lsls	r3, r3, #29
 80065a0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80065a4:	69f9      	ldr	r1, [r7, #28]
 80065a6:	0148      	lsls	r0, r1, #5
 80065a8:	6a39      	ldr	r1, [r7, #32]
 80065aa:	4401      	add	r1, r0
 80065ac:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80065b0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80065b2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80065b4:	79fb      	ldrb	r3, [r7, #7]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d009      	beq.n	80065ce <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	68d9      	ldr	r1, [r3, #12]
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	015a      	lsls	r2, r3, #5
 80065c2:	6a3b      	ldr	r3, [r7, #32]
 80065c4:	4413      	add	r3, r2
 80065c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ca:	460a      	mov	r2, r1
 80065cc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80065ce:	6a3b      	ldr	r3, [r7, #32]
 80065d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f003 0301 	and.w	r3, r3, #1
 80065da:	2b00      	cmp	r3, #0
 80065dc:	bf0c      	ite	eq
 80065de:	2301      	moveq	r3, #1
 80065e0:	2300      	movne	r3, #0
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	6a3b      	ldr	r3, [r7, #32]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	69fa      	ldr	r2, [r7, #28]
 80065f6:	0151      	lsls	r1, r2, #5
 80065f8:	6a3a      	ldr	r2, [r7, #32]
 80065fa:	440a      	add	r2, r1
 80065fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006600:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006604:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	6a3b      	ldr	r3, [r7, #32]
 800660c:	4413      	add	r3, r2
 800660e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	7e7b      	ldrb	r3, [r7, #25]
 8006616:	075b      	lsls	r3, r3, #29
 8006618:	69f9      	ldr	r1, [r7, #28]
 800661a:	0148      	lsls	r0, r1, #5
 800661c:	6a39      	ldr	r1, [r7, #32]
 800661e:	4401      	add	r1, r0
 8006620:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006624:	4313      	orrs	r3, r2
 8006626:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	015a      	lsls	r2, r3, #5
 800662c:	6a3b      	ldr	r3, [r7, #32]
 800662e:	4413      	add	r3, r2
 8006630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800663e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	78db      	ldrb	r3, [r3, #3]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d004      	beq.n	8006652 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800664e:	613b      	str	r3, [r7, #16]
 8006650:	e003      	b.n	800665a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006658:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006660:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	015a      	lsls	r2, r3, #5
 8006666:	6a3b      	ldr	r3, [r7, #32]
 8006668:	4413      	add	r3, r2
 800666a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800666e:	461a      	mov	r2, r3
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006674:	79fb      	ldrb	r3, [r7, #7]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d001      	beq.n	800667e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800667a:	2300      	movs	r3, #0
 800667c:	e04e      	b.n	800671c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	78db      	ldrb	r3, [r3, #3]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d149      	bne.n	800671a <USB_HC_StartXfer+0x276>
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d045      	beq.n	800671a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	79db      	ldrb	r3, [r3, #7]
 8006692:	2b03      	cmp	r3, #3
 8006694:	d830      	bhi.n	80066f8 <USB_HC_StartXfer+0x254>
 8006696:	a201      	add	r2, pc, #4	; (adr r2, 800669c <USB_HC_StartXfer+0x1f8>)
 8006698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669c:	080066ad 	.word	0x080066ad
 80066a0:	080066d1 	.word	0x080066d1
 80066a4:	080066ad 	.word	0x080066ad
 80066a8:	080066d1 	.word	0x080066d1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	3303      	adds	r3, #3
 80066b2:	089b      	lsrs	r3, r3, #2
 80066b4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80066b6:	8afa      	ldrh	r2, [r7, #22]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066bc:	b29b      	uxth	r3, r3
 80066be:	429a      	cmp	r2, r3
 80066c0:	d91c      	bls.n	80066fc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	f043 0220 	orr.w	r2, r3, #32
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	619a      	str	r2, [r3, #24]
        }
        break;
 80066ce:	e015      	b.n	80066fc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	3303      	adds	r3, #3
 80066d6:	089b      	lsrs	r3, r3, #2
 80066d8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80066da:	8afa      	ldrh	r2, [r7, #22]
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d90a      	bls.n	8006700 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	619a      	str	r2, [r3, #24]
        }
        break;
 80066f6:	e003      	b.n	8006700 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80066f8:	bf00      	nop
 80066fa:	e002      	b.n	8006702 <USB_HC_StartXfer+0x25e>
        break;
 80066fc:	bf00      	nop
 80066fe:	e000      	b.n	8006702 <USB_HC_StartXfer+0x25e>
        break;
 8006700:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	68d9      	ldr	r1, [r3, #12]
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	785a      	ldrb	r2, [r3, #1]
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	b29b      	uxth	r3, r3
 8006710:	2000      	movs	r0, #0
 8006712:	9000      	str	r0, [sp, #0]
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f7ff fb31 	bl	8005d7c <USB_WritePacket>
  }

  return HAL_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3728      	adds	r7, #40	; 0x28
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	1ff80000 	.word	0x1ff80000

08006728 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	b29b      	uxth	r3, r3
}
 800673e:	4618      	mov	r0, r3
 8006740:	3714      	adds	r7, #20
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr

0800674a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800674a:	b480      	push	{r7}
 800674c:	b089      	sub	sp, #36	; 0x24
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
 8006752:	460b      	mov	r3, r1
 8006754:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800675a:	78fb      	ldrb	r3, [r7, #3]
 800675c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800675e:	2300      	movs	r3, #0
 8006760:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	015a      	lsls	r2, r3, #5
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	4413      	add	r3, r2
 800676a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	0c9b      	lsrs	r3, r3, #18
 8006772:	f003 0303 	and.w	r3, r3, #3
 8006776:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	015a      	lsls	r2, r3, #5
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	4413      	add	r3, r2
 8006780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	0fdb      	lsrs	r3, r3, #31
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f003 0320 	and.w	r3, r3, #32
 8006796:	2b20      	cmp	r3, #32
 8006798:	d104      	bne.n	80067a4 <USB_HC_Halt+0x5a>
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d101      	bne.n	80067a4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80067a0:	2300      	movs	r3, #0
 80067a2:	e0c8      	b.n	8006936 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d002      	beq.n	80067b0 <USB_HC_Halt+0x66>
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d163      	bne.n	8006878 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	015a      	lsls	r2, r3, #5
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	4413      	add	r3, r2
 80067b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	69ba      	ldr	r2, [r7, #24]
 80067c0:	0151      	lsls	r1, r2, #5
 80067c2:	69fa      	ldr	r2, [r7, #28]
 80067c4:	440a      	add	r2, r1
 80067c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067ce:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f003 0320 	and.w	r3, r3, #32
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f040 80ab 	bne.w	8006934 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d133      	bne.n	8006852 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	69ba      	ldr	r2, [r7, #24]
 80067fa:	0151      	lsls	r1, r2, #5
 80067fc:	69fa      	ldr	r2, [r7, #28]
 80067fe:	440a      	add	r2, r1
 8006800:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006804:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006808:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	4413      	add	r3, r2
 8006812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	69ba      	ldr	r2, [r7, #24]
 800681a:	0151      	lsls	r1, r2, #5
 800681c:	69fa      	ldr	r2, [r7, #28]
 800681e:	440a      	add	r2, r1
 8006820:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006824:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006828:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	3301      	adds	r3, #1
 800682e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006836:	d81d      	bhi.n	8006874 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	015a      	lsls	r2, r3, #5
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	4413      	add	r3, r2
 8006840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800684a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800684e:	d0ec      	beq.n	800682a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006850:	e070      	b.n	8006934 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	015a      	lsls	r2, r3, #5
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	4413      	add	r3, r2
 800685a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	69ba      	ldr	r2, [r7, #24]
 8006862:	0151      	lsls	r1, r2, #5
 8006864:	69fa      	ldr	r2, [r7, #28]
 8006866:	440a      	add	r2, r1
 8006868:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800686c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006870:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006872:	e05f      	b.n	8006934 <USB_HC_Halt+0x1ea>
            break;
 8006874:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006876:	e05d      	b.n	8006934 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	015a      	lsls	r2, r3, #5
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	4413      	add	r3, r2
 8006880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	69ba      	ldr	r2, [r7, #24]
 8006888:	0151      	lsls	r1, r2, #5
 800688a:	69fa      	ldr	r2, [r7, #28]
 800688c:	440a      	add	r2, r1
 800688e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006892:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006896:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d133      	bne.n	8006910 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	015a      	lsls	r2, r3, #5
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	4413      	add	r3, r2
 80068b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	69ba      	ldr	r2, [r7, #24]
 80068b8:	0151      	lsls	r1, r2, #5
 80068ba:	69fa      	ldr	r2, [r7, #28]
 80068bc:	440a      	add	r2, r1
 80068be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068c6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	015a      	lsls	r2, r3, #5
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	4413      	add	r3, r2
 80068d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	69ba      	ldr	r2, [r7, #24]
 80068d8:	0151      	lsls	r1, r2, #5
 80068da:	69fa      	ldr	r2, [r7, #28]
 80068dc:	440a      	add	r2, r1
 80068de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068e6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	3301      	adds	r3, #1
 80068ec:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068f4:	d81d      	bhi.n	8006932 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	015a      	lsls	r2, r3, #5
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	4413      	add	r3, r2
 80068fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006908:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800690c:	d0ec      	beq.n	80068e8 <USB_HC_Halt+0x19e>
 800690e:	e011      	b.n	8006934 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	015a      	lsls	r2, r3, #5
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	4413      	add	r3, r2
 8006918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	69ba      	ldr	r2, [r7, #24]
 8006920:	0151      	lsls	r1, r2, #5
 8006922:	69fa      	ldr	r2, [r7, #28]
 8006924:	440a      	add	r2, r1
 8006926:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800692a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800692e:	6013      	str	r3, [r2, #0]
 8006930:	e000      	b.n	8006934 <USB_HC_Halt+0x1ea>
          break;
 8006932:	bf00      	nop
    }
  }

  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3724      	adds	r7, #36	; 0x24
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
	...

08006944 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006944:	b480      	push	{r7}
 8006946:	b087      	sub	sp, #28
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	460b      	mov	r3, r1
 800694e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006954:	78fb      	ldrb	r3, [r7, #3]
 8006956:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006958:	2301      	movs	r3, #1
 800695a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	04da      	lsls	r2, r3, #19
 8006960:	4b15      	ldr	r3, [pc, #84]	; (80069b8 <USB_DoPing+0x74>)
 8006962:	4013      	ands	r3, r2
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	0151      	lsls	r1, r2, #5
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	440a      	add	r2, r1
 800696c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006970:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006974:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	015a      	lsls	r2, r3, #5
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	4413      	add	r3, r2
 800697e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800698c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006994:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	015a      	lsls	r2, r3, #5
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	4413      	add	r3, r2
 800699e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069a2:	461a      	mov	r2, r3
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	371c      	adds	r7, #28
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	1ff80000 	.word	0x1ff80000

080069bc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b088      	sub	sp, #32
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80069c4:	2300      	movs	r3, #0
 80069c6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80069cc:	2300      	movs	r3, #0
 80069ce:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f7ff f911 	bl	8005bf8 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80069d6:	2110      	movs	r1, #16
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f7ff f96b 	bl	8005cb4 <USB_FlushTxFifo>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d001      	beq.n	80069e8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f7ff f997 	bl	8005d1c <USB_FlushRxFifo>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d001      	beq.n	80069f8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80069f8:	2300      	movs	r3, #0
 80069fa:	61bb      	str	r3, [r7, #24]
 80069fc:	e01f      	b.n	8006a3e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	015a      	lsls	r2, r3, #5
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	4413      	add	r3, r2
 8006a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a14:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a1c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a24:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	015a      	lsls	r2, r3, #5
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a32:	461a      	mov	r2, r3
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	61bb      	str	r3, [r7, #24]
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	2b0f      	cmp	r3, #15
 8006a42:	d9dc      	bls.n	80069fe <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006a44:	2300      	movs	r3, #0
 8006a46:	61bb      	str	r3, [r7, #24]
 8006a48:	e034      	b.n	8006ab4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	015a      	lsls	r2, r3, #5
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	4413      	add	r3, r2
 8006a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a60:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a68:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a70:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	015a      	lsls	r2, r3, #5
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a7e:	461a      	mov	r2, r3
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	3301      	adds	r3, #1
 8006a88:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a90:	d80c      	bhi.n	8006aac <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	015a      	lsls	r2, r3, #5
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	4413      	add	r3, r2
 8006a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006aa4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006aa8:	d0ec      	beq.n	8006a84 <USB_StopHost+0xc8>
 8006aaa:	e000      	b.n	8006aae <USB_StopHost+0xf2>
        break;
 8006aac:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	61bb      	str	r3, [r7, #24]
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	2b0f      	cmp	r3, #15
 8006ab8:	d9c7      	bls.n	8006a4a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ac6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f04f 32ff 	mov.w	r2, #4294967295
 8006ace:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f7ff f880 	bl	8005bd6 <USB_EnableGlobalInt>

  return ret;
 8006ad6:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3720      	adds	r7, #32
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006ae0:	b590      	push	{r4, r7, lr}
 8006ae2:	b089      	sub	sp, #36	; 0x24
 8006ae4:	af04      	add	r7, sp, #16
 8006ae6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006ae8:	2301      	movs	r3, #1
 8006aea:	2202      	movs	r2, #2
 8006aec:	2102      	movs	r1, #2
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 fc66 	bl	80073c0 <USBH_FindInterface>
 8006af4:	4603      	mov	r3, r0
 8006af6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006af8:	7bfb      	ldrb	r3, [r7, #15]
 8006afa:	2bff      	cmp	r3, #255	; 0xff
 8006afc:	d002      	beq.n	8006b04 <USBH_CDC_InterfaceInit+0x24>
 8006afe:	7bfb      	ldrb	r3, [r7, #15]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d901      	bls.n	8006b08 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006b04:	2302      	movs	r3, #2
 8006b06:	e13d      	b.n	8006d84 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006b08:	7bfb      	ldrb	r3, [r7, #15]
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 fc3b 	bl	8007388 <USBH_SelectInterface>
 8006b12:	4603      	mov	r3, r0
 8006b14:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006b16:	7bbb      	ldrb	r3, [r7, #14]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d001      	beq.n	8006b20 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	e131      	b.n	8006d84 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006b26:	2050      	movs	r0, #80	; 0x50
 8006b28:	f002 fafa 	bl	8009120 <malloc>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b36:	69db      	ldr	r3, [r3, #28]
 8006b38:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d101      	bne.n	8006b44 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006b40:	2302      	movs	r3, #2
 8006b42:	e11f      	b.n	8006d84 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006b44:	2250      	movs	r2, #80	; 0x50
 8006b46:	2100      	movs	r1, #0
 8006b48:	68b8      	ldr	r0, [r7, #8]
 8006b4a:	f002 faf9 	bl	8009140 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006b4e:	7bfb      	ldrb	r3, [r7, #15]
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	211a      	movs	r1, #26
 8006b54:	fb01 f303 	mul.w	r3, r1, r3
 8006b58:	4413      	add	r3, r2
 8006b5a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	b25b      	sxtb	r3, r3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	da15      	bge.n	8006b92 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006b66:	7bfb      	ldrb	r3, [r7, #15]
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	211a      	movs	r1, #26
 8006b6c:	fb01 f303 	mul.w	r3, r1, r3
 8006b70:	4413      	add	r3, r2
 8006b72:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b76:	781a      	ldrb	r2, [r3, #0]
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b7c:	7bfb      	ldrb	r3, [r7, #15]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	211a      	movs	r1, #26
 8006b82:	fb01 f303 	mul.w	r3, r1, r3
 8006b86:	4413      	add	r3, r2
 8006b88:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006b8c:	881a      	ldrh	r2, [r3, #0]
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	785b      	ldrb	r3, [r3, #1]
 8006b96:	4619      	mov	r1, r3
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f001 ff2c 	bl	80089f6 <USBH_AllocPipe>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	7819      	ldrb	r1, [r3, #0]
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	7858      	ldrb	r0, [r3, #1]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006bba:	68ba      	ldr	r2, [r7, #8]
 8006bbc:	8952      	ldrh	r2, [r2, #10]
 8006bbe:	9202      	str	r2, [sp, #8]
 8006bc0:	2203      	movs	r2, #3
 8006bc2:	9201      	str	r2, [sp, #4]
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	4623      	mov	r3, r4
 8006bc8:	4602      	mov	r2, r0
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f001 fee4 	bl	8008998 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f002 f9f3 	bl	8008fc4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006bde:	2300      	movs	r3, #0
 8006be0:	2200      	movs	r2, #0
 8006be2:	210a      	movs	r1, #10
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 fbeb 	bl	80073c0 <USBH_FindInterface>
 8006bea:	4603      	mov	r3, r0
 8006bec:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006bee:	7bfb      	ldrb	r3, [r7, #15]
 8006bf0:	2bff      	cmp	r3, #255	; 0xff
 8006bf2:	d002      	beq.n	8006bfa <USBH_CDC_InterfaceInit+0x11a>
 8006bf4:	7bfb      	ldrb	r3, [r7, #15]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d901      	bls.n	8006bfe <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	e0c2      	b.n	8006d84 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006bfe:	7bfb      	ldrb	r3, [r7, #15]
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	211a      	movs	r1, #26
 8006c04:	fb01 f303 	mul.w	r3, r1, r3
 8006c08:	4413      	add	r3, r2
 8006c0a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	b25b      	sxtb	r3, r3
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	da16      	bge.n	8006c44 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006c16:	7bfb      	ldrb	r3, [r7, #15]
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	211a      	movs	r1, #26
 8006c1c:	fb01 f303 	mul.w	r3, r1, r3
 8006c20:	4413      	add	r3, r2
 8006c22:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006c26:	781a      	ldrb	r2, [r3, #0]
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c2c:	7bfb      	ldrb	r3, [r7, #15]
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	211a      	movs	r1, #26
 8006c32:	fb01 f303 	mul.w	r3, r1, r3
 8006c36:	4413      	add	r3, r2
 8006c38:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006c3c:	881a      	ldrh	r2, [r3, #0]
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	835a      	strh	r2, [r3, #26]
 8006c42:	e015      	b.n	8006c70 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006c44:	7bfb      	ldrb	r3, [r7, #15]
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	211a      	movs	r1, #26
 8006c4a:	fb01 f303 	mul.w	r3, r1, r3
 8006c4e:	4413      	add	r3, r2
 8006c50:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006c54:	781a      	ldrb	r2, [r3, #0]
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c5a:	7bfb      	ldrb	r3, [r7, #15]
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	211a      	movs	r1, #26
 8006c60:	fb01 f303 	mul.w	r3, r1, r3
 8006c64:	4413      	add	r3, r2
 8006c66:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006c6a:	881a      	ldrh	r2, [r3, #0]
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006c70:	7bfb      	ldrb	r3, [r7, #15]
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	211a      	movs	r1, #26
 8006c76:	fb01 f303 	mul.w	r3, r1, r3
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	b25b      	sxtb	r3, r3
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	da16      	bge.n	8006cb6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006c88:	7bfb      	ldrb	r3, [r7, #15]
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	211a      	movs	r1, #26
 8006c8e:	fb01 f303 	mul.w	r3, r1, r3
 8006c92:	4413      	add	r3, r2
 8006c94:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006c98:	781a      	ldrb	r2, [r3, #0]
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006c9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	211a      	movs	r1, #26
 8006ca4:	fb01 f303 	mul.w	r3, r1, r3
 8006ca8:	4413      	add	r3, r2
 8006caa:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006cae:	881a      	ldrh	r2, [r3, #0]
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	835a      	strh	r2, [r3, #26]
 8006cb4:	e015      	b.n	8006ce2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006cb6:	7bfb      	ldrb	r3, [r7, #15]
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	211a      	movs	r1, #26
 8006cbc:	fb01 f303 	mul.w	r3, r1, r3
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006cc6:	781a      	ldrb	r2, [r3, #0]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006ccc:	7bfb      	ldrb	r3, [r7, #15]
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	211a      	movs	r1, #26
 8006cd2:	fb01 f303 	mul.w	r3, r1, r3
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006cdc:	881a      	ldrh	r2, [r3, #0]
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	7b9b      	ldrb	r3, [r3, #14]
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f001 fe84 	bl	80089f6 <USBH_AllocPipe>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	7bdb      	ldrb	r3, [r3, #15]
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f001 fe7a 	bl	80089f6 <USBH_AllocPipe>
 8006d02:	4603      	mov	r3, r0
 8006d04:	461a      	mov	r2, r3
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	7b59      	ldrb	r1, [r3, #13]
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	7b98      	ldrb	r0, [r3, #14]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	8b12      	ldrh	r2, [r2, #24]
 8006d22:	9202      	str	r2, [sp, #8]
 8006d24:	2202      	movs	r2, #2
 8006d26:	9201      	str	r2, [sp, #4]
 8006d28:	9300      	str	r3, [sp, #0]
 8006d2a:	4623      	mov	r3, r4
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f001 fe32 	bl	8008998 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	7b19      	ldrb	r1, [r3, #12]
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	7bd8      	ldrb	r0, [r3, #15]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	8b52      	ldrh	r2, [r2, #26]
 8006d4c:	9202      	str	r2, [sp, #8]
 8006d4e:	2202      	movs	r2, #2
 8006d50:	9201      	str	r2, [sp, #4]
 8006d52:	9300      	str	r3, [sp, #0]
 8006d54:	4623      	mov	r3, r4
 8006d56:	4602      	mov	r2, r0
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f001 fe1d 	bl	8008998 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	7b5b      	ldrb	r3, [r3, #13]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f002 f928 	bl	8008fc4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	7b1b      	ldrb	r3, [r3, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f002 f921 	bl	8008fc4 <USBH_LL_SetToggle>

  return USBH_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3714      	adds	r7, #20
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd90      	pop	{r4, r7, pc}

08006d8c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d9a:	69db      	ldr	r3, [r3, #28]
 8006d9c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00e      	beq.n	8006dc4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	4619      	mov	r1, r3
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f001 fe12 	bl	80089d6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	4619      	mov	r1, r3
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f001 fe3d 	bl	8008a38 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	7b1b      	ldrb	r3, [r3, #12]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00e      	beq.n	8006dea <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	7b1b      	ldrb	r3, [r3, #12]
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f001 fdff 	bl	80089d6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	7b1b      	ldrb	r3, [r3, #12]
 8006ddc:	4619      	mov	r1, r3
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f001 fe2a 	bl	8008a38 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	7b5b      	ldrb	r3, [r3, #13]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00e      	beq.n	8006e10 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	7b5b      	ldrb	r3, [r3, #13]
 8006df6:	4619      	mov	r1, r3
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f001 fdec 	bl	80089d6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	7b5b      	ldrb	r3, [r3, #13]
 8006e02:	4619      	mov	r1, r3
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f001 fe17 	bl	8008a38 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e16:	69db      	ldr	r3, [r3, #28]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00b      	beq.n	8006e34 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e22:	69db      	ldr	r3, [r3, #28]
 8006e24:	4618      	mov	r0, r3
 8006e26:	f002 f983 	bl	8009130 <free>
    phost->pActiveClass->pData = 0U;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e30:	2200      	movs	r2, #0
 8006e32:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b084      	sub	sp, #16
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e4c:	69db      	ldr	r3, [r3, #28]
 8006e4e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	3340      	adds	r3, #64	; 0x40
 8006e54:	4619      	mov	r1, r3
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f8b1 	bl	8006fbe <GetLineCoding>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006e60:	7afb      	ldrb	r3, [r7, #11]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d105      	bne.n	8006e72 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e6c:	2102      	movs	r1, #2
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006e72:	7afb      	ldrb	r3, [r7, #11]
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006e84:	2301      	movs	r3, #1
 8006e86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e92:	69db      	ldr	r3, [r3, #28]
 8006e94:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006e9c:	2b04      	cmp	r3, #4
 8006e9e:	d877      	bhi.n	8006f90 <USBH_CDC_Process+0x114>
 8006ea0:	a201      	add	r2, pc, #4	; (adr r2, 8006ea8 <USBH_CDC_Process+0x2c>)
 8006ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea6:	bf00      	nop
 8006ea8:	08006ebd 	.word	0x08006ebd
 8006eac:	08006ec3 	.word	0x08006ec3
 8006eb0:	08006ef3 	.word	0x08006ef3
 8006eb4:	08006f67 	.word	0x08006f67
 8006eb8:	08006f75 	.word	0x08006f75
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8006ec0:	e06d      	b.n	8006f9e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 f897 	bl	8006ffc <SetLineCoding>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006ed2:	7bbb      	ldrb	r3, [r7, #14]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d104      	bne.n	8006ee2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	2202      	movs	r2, #2
 8006edc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006ee0:	e058      	b.n	8006f94 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006ee2:	7bbb      	ldrb	r3, [r7, #14]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d055      	beq.n	8006f94 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	2204      	movs	r2, #4
 8006eec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006ef0:	e050      	b.n	8006f94 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	3340      	adds	r3, #64	; 0x40
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 f860 	bl	8006fbe <GetLineCoding>
 8006efe:	4603      	mov	r3, r0
 8006f00:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006f02:	7bbb      	ldrb	r3, [r7, #14]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d126      	bne.n	8006f56 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f1a:	791b      	ldrb	r3, [r3, #4]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d13b      	bne.n	8006f98 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f2a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d133      	bne.n	8006f98 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f3a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d12b      	bne.n	8006f98 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f48:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d124      	bne.n	8006f98 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 f958 	bl	8007204 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006f54:	e020      	b.n	8006f98 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006f56:	7bbb      	ldrb	r3, [r7, #14]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d01d      	beq.n	8006f98 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	2204      	movs	r2, #4
 8006f60:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006f64:	e018      	b.n	8006f98 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f867 	bl	800703a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f8da 	bl	8007126 <CDC_ProcessReception>
      break;
 8006f72:	e014      	b.n	8006f9e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006f74:	2100      	movs	r1, #0
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 ffef 	bl	8007f5a <USBH_ClrFeature>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006f80:	7bbb      	ldrb	r3, [r7, #14]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d10a      	bne.n	8006f9c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006f8e:	e005      	b.n	8006f9c <USBH_CDC_Process+0x120>

    default:
      break;
 8006f90:	bf00      	nop
 8006f92:	e004      	b.n	8006f9e <USBH_CDC_Process+0x122>
      break;
 8006f94:	bf00      	nop
 8006f96:	e002      	b.n	8006f9e <USBH_CDC_Process+0x122>
      break;
 8006f98:	bf00      	nop
 8006f9a:	e000      	b.n	8006f9e <USBH_CDC_Process+0x122>
      break;
 8006f9c:	bf00      	nop

  }

  return status;
 8006f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3710      	adds	r7, #16
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	370c      	adds	r7, #12
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr

08006fbe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b082      	sub	sp, #8
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
 8006fc6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	22a1      	movs	r2, #161	; 0xa1
 8006fcc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2221      	movs	r2, #33	; 0x21
 8006fd2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2207      	movs	r2, #7
 8006fe4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	2207      	movs	r2, #7
 8006fea:	4619      	mov	r1, r3
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f001 fa81 	bl	80084f4 <USBH_CtlReq>
 8006ff2:	4603      	mov	r3, r0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3708      	adds	r7, #8
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2221      	movs	r2, #33	; 0x21
 800700a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2220      	movs	r2, #32
 8007010:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2207      	movs	r2, #7
 8007022:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	2207      	movs	r2, #7
 8007028:	4619      	mov	r1, r3
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f001 fa62 	bl	80084f4 <USBH_CtlReq>
 8007030:	4603      	mov	r3, r0
}
 8007032:	4618      	mov	r0, r3
 8007034:	3708      	adds	r7, #8
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b086      	sub	sp, #24
 800703e:	af02      	add	r7, sp, #8
 8007040:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007048:	69db      	ldr	r3, [r3, #28]
 800704a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800704c:	2300      	movs	r3, #0
 800704e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007056:	2b01      	cmp	r3, #1
 8007058:	d002      	beq.n	8007060 <CDC_ProcessTransmission+0x26>
 800705a:	2b02      	cmp	r3, #2
 800705c:	d023      	beq.n	80070a6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800705e:	e05e      	b.n	800711e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	8b12      	ldrh	r2, [r2, #24]
 8007068:	4293      	cmp	r3, r2
 800706a:	d90b      	bls.n	8007084 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	69d9      	ldr	r1, [r3, #28]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	8b1a      	ldrh	r2, [r3, #24]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	7b5b      	ldrb	r3, [r3, #13]
 8007078:	2001      	movs	r0, #1
 800707a:	9000      	str	r0, [sp, #0]
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f001 fc48 	bl	8008912 <USBH_BulkSendData>
 8007082:	e00b      	b.n	800709c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800708c:	b29a      	uxth	r2, r3
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	7b5b      	ldrb	r3, [r3, #13]
 8007092:	2001      	movs	r0, #1
 8007094:	9000      	str	r0, [sp, #0]
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f001 fc3b 	bl	8008912 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2202      	movs	r2, #2
 80070a0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80070a4:	e03b      	b.n	800711e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	7b5b      	ldrb	r3, [r3, #13]
 80070aa:	4619      	mov	r1, r3
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f001 ff5f 	bl	8008f70 <USBH_LL_GetURBState>
 80070b2:	4603      	mov	r3, r0
 80070b4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80070b6:	7afb      	ldrb	r3, [r7, #11]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d128      	bne.n	800710e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	8b12      	ldrh	r2, [r2, #24]
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d90e      	bls.n	80070e6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	8b12      	ldrh	r2, [r2, #24]
 80070d0:	1a9a      	subs	r2, r3, r2
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	69db      	ldr	r3, [r3, #28]
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	8b12      	ldrh	r2, [r2, #24]
 80070de:	441a      	add	r2, r3
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	61da      	str	r2, [r3, #28]
 80070e4:	e002      	b.n	80070ec <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d004      	beq.n	80070fe <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80070fc:	e00e      	b.n	800711c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 f868 	bl	80071dc <USBH_CDC_TransmitCallback>
      break;
 800710c:	e006      	b.n	800711c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800710e:	7afb      	ldrb	r3, [r7, #11]
 8007110:	2b02      	cmp	r3, #2
 8007112:	d103      	bne.n	800711c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800711c:	bf00      	nop
  }
}
 800711e:	bf00      	nop
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b086      	sub	sp, #24
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007134:	69db      	ldr	r3, [r3, #28]
 8007136:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007138:	2300      	movs	r3, #0
 800713a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007142:	2b03      	cmp	r3, #3
 8007144:	d002      	beq.n	800714c <CDC_ProcessReception+0x26>
 8007146:	2b04      	cmp	r3, #4
 8007148:	d00e      	beq.n	8007168 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800714a:	e043      	b.n	80071d4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	6a19      	ldr	r1, [r3, #32]
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	8b5a      	ldrh	r2, [r3, #26]
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	7b1b      	ldrb	r3, [r3, #12]
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f001 fbff 	bl	800895c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	2204      	movs	r2, #4
 8007162:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007166:	e035      	b.n	80071d4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	7b1b      	ldrb	r3, [r3, #12]
 800716c:	4619      	mov	r1, r3
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f001 fefe 	bl	8008f70 <USBH_LL_GetURBState>
 8007174:	4603      	mov	r3, r0
 8007176:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007178:	7cfb      	ldrb	r3, [r7, #19]
 800717a:	2b01      	cmp	r3, #1
 800717c:	d129      	bne.n	80071d2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	7b1b      	ldrb	r3, [r3, #12]
 8007182:	4619      	mov	r1, r3
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f001 fe61 	bl	8008e4c <USBH_LL_GetLastXferSize>
 800718a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	429a      	cmp	r2, r3
 8007194:	d016      	beq.n	80071c4 <CDC_ProcessReception+0x9e>
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	8b5b      	ldrh	r3, [r3, #26]
 800719a:	461a      	mov	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	4293      	cmp	r3, r2
 80071a0:	d910      	bls.n	80071c4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	1ad2      	subs	r2, r2, r3
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	6a1a      	ldr	r2, [r3, #32]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	441a      	add	r2, r3
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	2203      	movs	r2, #3
 80071be:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80071c2:	e006      	b.n	80071d2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 f80f 	bl	80071f0 <USBH_CDC_ReceiveCallback>
      break;
 80071d2:	bf00      	nop
  }
}
 80071d4:	bf00      	nop
 80071d6:	3718      	adds	r7, #24
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80071e4:	bf00      	nop
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80071f8:	bf00      	nop
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800720c:	bf00      	nop
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	4613      	mov	r3, r2
 8007224:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d101      	bne.n	8007230 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800722c:	2302      	movs	r3, #2
 800722e:	e029      	b.n	8007284 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	79fa      	ldrb	r2, [r7, #7]
 8007234:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2200      	movs	r2, #0
 8007244:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	f000 f81f 	bl	800728c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2200      	movs	r2, #0
 800726a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d003      	beq.n	800727c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f001 fd31 	bl	8008ce4 <USBH_LL_Init>

  return USBH_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3710      	adds	r7, #16
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007294:	2300      	movs	r3, #0
 8007296:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007298:	2300      	movs	r3, #0
 800729a:	60fb      	str	r3, [r7, #12]
 800729c:	e009      	b.n	80072b2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	33e0      	adds	r3, #224	; 0xe0
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	4413      	add	r3, r2
 80072a8:	2200      	movs	r2, #0
 80072aa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	3301      	adds	r3, #1
 80072b0:	60fb      	str	r3, [r7, #12]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2b0f      	cmp	r3, #15
 80072b6:	d9f2      	bls.n	800729e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80072b8:	2300      	movs	r3, #0
 80072ba:	60fb      	str	r3, [r7, #12]
 80072bc:	e009      	b.n	80072d2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	4413      	add	r3, r2
 80072c4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80072c8:	2200      	movs	r2, #0
 80072ca:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	3301      	adds	r3, #1
 80072d0:	60fb      	str	r3, [r7, #12]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072d8:	d3f1      	bcc.n	80072be <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2201      	movs	r2, #1
 80072ea:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2240      	movs	r2, #64	; 0x40
 80072fe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2201      	movs	r2, #1
 8007312:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	3714      	adds	r7, #20
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007334:	b480      	push	{r7}
 8007336:	b085      	sub	sp, #20
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800733e:	2300      	movs	r3, #0
 8007340:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d016      	beq.n	8007376 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800734e:	2b00      	cmp	r3, #0
 8007350:	d10e      	bne.n	8007370 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007358:	1c59      	adds	r1, r3, #1
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	33de      	adds	r3, #222	; 0xde
 8007364:	6839      	ldr	r1, [r7, #0]
 8007366:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800736a:	2300      	movs	r3, #0
 800736c:	73fb      	strb	r3, [r7, #15]
 800736e:	e004      	b.n	800737a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007370:	2302      	movs	r3, #2
 8007372:	73fb      	strb	r3, [r7, #15]
 8007374:	e001      	b.n	800737a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007376:	2302      	movs	r3, #2
 8007378:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800737a:	7bfb      	ldrb	r3, [r7, #15]
}
 800737c:	4618      	mov	r0, r3
 800737e:	3714      	adds	r7, #20
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	460b      	mov	r3, r1
 8007392:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007394:	2300      	movs	r3, #0
 8007396:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800739e:	78fa      	ldrb	r2, [r7, #3]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d204      	bcs.n	80073ae <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	78fa      	ldrb	r2, [r7, #3]
 80073a8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80073ac:	e001      	b.n	80073b2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80073ae:	2302      	movs	r3, #2
 80073b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80073b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3714      	adds	r7, #20
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b087      	sub	sp, #28
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	4608      	mov	r0, r1
 80073ca:	4611      	mov	r1, r2
 80073cc:	461a      	mov	r2, r3
 80073ce:	4603      	mov	r3, r0
 80073d0:	70fb      	strb	r3, [r7, #3]
 80073d2:	460b      	mov	r3, r1
 80073d4:	70bb      	strb	r3, [r7, #2]
 80073d6:	4613      	mov	r3, r2
 80073d8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80073da:	2300      	movs	r3, #0
 80073dc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80073de:	2300      	movs	r3, #0
 80073e0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80073e8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80073ea:	e025      	b.n	8007438 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80073ec:	7dfb      	ldrb	r3, [r7, #23]
 80073ee:	221a      	movs	r2, #26
 80073f0:	fb02 f303 	mul.w	r3, r2, r3
 80073f4:	3308      	adds	r3, #8
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	4413      	add	r3, r2
 80073fa:	3302      	adds	r3, #2
 80073fc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	795b      	ldrb	r3, [r3, #5]
 8007402:	78fa      	ldrb	r2, [r7, #3]
 8007404:	429a      	cmp	r2, r3
 8007406:	d002      	beq.n	800740e <USBH_FindInterface+0x4e>
 8007408:	78fb      	ldrb	r3, [r7, #3]
 800740a:	2bff      	cmp	r3, #255	; 0xff
 800740c:	d111      	bne.n	8007432 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007412:	78ba      	ldrb	r2, [r7, #2]
 8007414:	429a      	cmp	r2, r3
 8007416:	d002      	beq.n	800741e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007418:	78bb      	ldrb	r3, [r7, #2]
 800741a:	2bff      	cmp	r3, #255	; 0xff
 800741c:	d109      	bne.n	8007432 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007422:	787a      	ldrb	r2, [r7, #1]
 8007424:	429a      	cmp	r2, r3
 8007426:	d002      	beq.n	800742e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007428:	787b      	ldrb	r3, [r7, #1]
 800742a:	2bff      	cmp	r3, #255	; 0xff
 800742c:	d101      	bne.n	8007432 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800742e:	7dfb      	ldrb	r3, [r7, #23]
 8007430:	e006      	b.n	8007440 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007432:	7dfb      	ldrb	r3, [r7, #23]
 8007434:	3301      	adds	r3, #1
 8007436:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007438:	7dfb      	ldrb	r3, [r7, #23]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d9d6      	bls.n	80073ec <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800743e:	23ff      	movs	r3, #255	; 0xff
}
 8007440:	4618      	mov	r0, r3
 8007442:	371c      	adds	r7, #28
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f001 fc81 	bl	8008d5c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800745a:	2101      	movs	r1, #1
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f001 fd9a 	bl	8008f96 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3708      	adds	r7, #8
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b088      	sub	sp, #32
 8007470:	af04      	add	r7, sp, #16
 8007472:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007474:	2302      	movs	r3, #2
 8007476:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007478:	2300      	movs	r3, #0
 800747a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007482:	b2db      	uxtb	r3, r3
 8007484:	2b01      	cmp	r3, #1
 8007486:	d102      	bne.n	800748e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2203      	movs	r2, #3
 800748c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	b2db      	uxtb	r3, r3
 8007494:	2b0b      	cmp	r3, #11
 8007496:	f200 81be 	bhi.w	8007816 <USBH_Process+0x3aa>
 800749a:	a201      	add	r2, pc, #4	; (adr r2, 80074a0 <USBH_Process+0x34>)
 800749c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a0:	080074d1 	.word	0x080074d1
 80074a4:	08007503 	.word	0x08007503
 80074a8:	0800756b 	.word	0x0800756b
 80074ac:	080077b1 	.word	0x080077b1
 80074b0:	08007817 	.word	0x08007817
 80074b4:	0800760f 	.word	0x0800760f
 80074b8:	08007757 	.word	0x08007757
 80074bc:	08007645 	.word	0x08007645
 80074c0:	08007665 	.word	0x08007665
 80074c4:	08007685 	.word	0x08007685
 80074c8:	080076c9 	.word	0x080076c9
 80074cc:	08007799 	.word	0x08007799
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f000 819e 	beq.w	800781a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2201      	movs	r2, #1
 80074e2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80074e4:	20c8      	movs	r0, #200	; 0xc8
 80074e6:	f001 fd9d 	bl	8009024 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f001 fc93 	bl	8008e16 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007500:	e18b      	b.n	800781a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007508:	2b01      	cmp	r3, #1
 800750a:	d107      	bne.n	800751c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2202      	movs	r2, #2
 8007518:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800751a:	e18d      	b.n	8007838 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007522:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007526:	d914      	bls.n	8007552 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800752e:	3301      	adds	r3, #1
 8007530:	b2da      	uxtb	r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800753e:	2b03      	cmp	r3, #3
 8007540:	d903      	bls.n	800754a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	220d      	movs	r2, #13
 8007546:	701a      	strb	r2, [r3, #0]
      break;
 8007548:	e176      	b.n	8007838 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	701a      	strb	r2, [r3, #0]
      break;
 8007550:	e172      	b.n	8007838 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007558:	f103 020a 	add.w	r2, r3, #10
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007562:	200a      	movs	r0, #10
 8007564:	f001 fd5e 	bl	8009024 <USBH_Delay>
      break;
 8007568:	e166      	b.n	8007838 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007570:	2b00      	cmp	r3, #0
 8007572:	d005      	beq.n	8007580 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800757a:	2104      	movs	r1, #4
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007580:	2064      	movs	r0, #100	; 0x64
 8007582:	f001 fd4f 	bl	8009024 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f001 fc1e 	bl	8008dc8 <USBH_LL_GetSpeed>
 800758c:	4603      	mov	r3, r0
 800758e:	461a      	mov	r2, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2205      	movs	r2, #5
 800759a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800759c:	2100      	movs	r1, #0
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f001 fa29 	bl	80089f6 <USBH_AllocPipe>
 80075a4:	4603      	mov	r3, r0
 80075a6:	461a      	mov	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80075ac:	2180      	movs	r1, #128	; 0x80
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f001 fa21 	bl	80089f6 <USBH_AllocPipe>
 80075b4:	4603      	mov	r3, r0
 80075b6:	461a      	mov	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	7919      	ldrb	r1, [r3, #4]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80075d0:	b292      	uxth	r2, r2
 80075d2:	9202      	str	r2, [sp, #8]
 80075d4:	2200      	movs	r2, #0
 80075d6:	9201      	str	r2, [sp, #4]
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	4603      	mov	r3, r0
 80075dc:	2280      	movs	r2, #128	; 0x80
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f001 f9da 	bl	8008998 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	7959      	ldrb	r1, [r3, #5]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80075f8:	b292      	uxth	r2, r2
 80075fa:	9202      	str	r2, [sp, #8]
 80075fc:	2200      	movs	r2, #0
 80075fe:	9201      	str	r2, [sp, #4]
 8007600:	9300      	str	r3, [sp, #0]
 8007602:	4603      	mov	r3, r0
 8007604:	2200      	movs	r2, #0
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f001 f9c6 	bl	8008998 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800760c:	e114      	b.n	8007838 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 f918 	bl	8007844 <USBH_HandleEnum>
 8007614:	4603      	mov	r3, r0
 8007616:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007618:	7bbb      	ldrb	r3, [r7, #14]
 800761a:	b2db      	uxtb	r3, r3
 800761c:	2b00      	cmp	r3, #0
 800761e:	f040 80fe 	bne.w	800781e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007630:	2b01      	cmp	r3, #1
 8007632:	d103      	bne.n	800763c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2208      	movs	r2, #8
 8007638:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800763a:	e0f0      	b.n	800781e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2207      	movs	r2, #7
 8007640:	701a      	strb	r2, [r3, #0]
      break;
 8007642:	e0ec      	b.n	800781e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800764a:	2b00      	cmp	r3, #0
 800764c:	f000 80e9 	beq.w	8007822 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007656:	2101      	movs	r1, #1
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2208      	movs	r2, #8
 8007660:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007662:	e0de      	b.n	8007822 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800766a:	b29b      	uxth	r3, r3
 800766c:	4619      	mov	r1, r3
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 fc2c 	bl	8007ecc <USBH_SetCfg>
 8007674:	4603      	mov	r3, r0
 8007676:	2b00      	cmp	r3, #0
 8007678:	f040 80d5 	bne.w	8007826 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2209      	movs	r2, #9
 8007680:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007682:	e0d0      	b.n	8007826 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800768a:	f003 0320 	and.w	r3, r3, #32
 800768e:	2b00      	cmp	r3, #0
 8007690:	d016      	beq.n	80076c0 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007692:	2101      	movs	r1, #1
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 fc3c 	bl	8007f12 <USBH_SetFeature>
 800769a:	4603      	mov	r3, r0
 800769c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800769e:	7bbb      	ldrb	r3, [r7, #14]
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d103      	bne.n	80076ae <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	220a      	movs	r2, #10
 80076aa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80076ac:	e0bd      	b.n	800782a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80076ae:	7bbb      	ldrb	r3, [r7, #14]
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	2b03      	cmp	r3, #3
 80076b4:	f040 80b9 	bne.w	800782a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	220a      	movs	r2, #10
 80076bc:	701a      	strb	r2, [r3, #0]
      break;
 80076be:	e0b4      	b.n	800782a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	220a      	movs	r2, #10
 80076c4:	701a      	strb	r2, [r3, #0]
      break;
 80076c6:	e0b0      	b.n	800782a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f000 80ad 	beq.w	800782e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80076dc:	2300      	movs	r3, #0
 80076de:	73fb      	strb	r3, [r7, #15]
 80076e0:	e016      	b.n	8007710 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80076e2:	7bfa      	ldrb	r2, [r7, #15]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	32de      	adds	r2, #222	; 0xde
 80076e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ec:	791a      	ldrb	r2, [r3, #4]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d108      	bne.n	800770a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80076f8:	7bfa      	ldrb	r2, [r7, #15]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	32de      	adds	r2, #222	; 0xde
 80076fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007708:	e005      	b.n	8007716 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800770a:	7bfb      	ldrb	r3, [r7, #15]
 800770c:	3301      	adds	r3, #1
 800770e:	73fb      	strb	r3, [r7, #15]
 8007710:	7bfb      	ldrb	r3, [r7, #15]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d0e5      	beq.n	80076e2 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800771c:	2b00      	cmp	r3, #0
 800771e:	d016      	beq.n	800774e <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	4798      	blx	r3
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d109      	bne.n	8007746 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2206      	movs	r2, #6
 8007736:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800773e:	2103      	movs	r1, #3
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007744:	e073      	b.n	800782e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	220d      	movs	r2, #13
 800774a:	701a      	strb	r2, [r3, #0]
      break;
 800774c:	e06f      	b.n	800782e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	220d      	movs	r2, #13
 8007752:	701a      	strb	r2, [r3, #0]
      break;
 8007754:	e06b      	b.n	800782e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800775c:	2b00      	cmp	r3, #0
 800775e:	d017      	beq.n	8007790 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	4798      	blx	r3
 800776c:	4603      	mov	r3, r0
 800776e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007770:	7bbb      	ldrb	r3, [r7, #14]
 8007772:	b2db      	uxtb	r3, r3
 8007774:	2b00      	cmp	r3, #0
 8007776:	d103      	bne.n	8007780 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	220b      	movs	r2, #11
 800777c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800777e:	e058      	b.n	8007832 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007780:	7bbb      	ldrb	r3, [r7, #14]
 8007782:	b2db      	uxtb	r3, r3
 8007784:	2b02      	cmp	r3, #2
 8007786:	d154      	bne.n	8007832 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	220d      	movs	r2, #13
 800778c:	701a      	strb	r2, [r3, #0]
      break;
 800778e:	e050      	b.n	8007832 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	220d      	movs	r2, #13
 8007794:	701a      	strb	r2, [r3, #0]
      break;
 8007796:	e04c      	b.n	8007832 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d049      	beq.n	8007836 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	4798      	blx	r3
      }
      break;
 80077ae:	e042      	b.n	8007836 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f7ff fd67 	bl	800728c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d009      	beq.n	80077dc <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d005      	beq.n	80077f2 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077ec:	2105      	movs	r1, #5
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d107      	bne.n	800780e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f7ff fe20 	bl	800744c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800780c:	e014      	b.n	8007838 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f001 faa4 	bl	8008d5c <USBH_LL_Start>
      break;
 8007814:	e010      	b.n	8007838 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007816:	bf00      	nop
 8007818:	e00e      	b.n	8007838 <USBH_Process+0x3cc>
      break;
 800781a:	bf00      	nop
 800781c:	e00c      	b.n	8007838 <USBH_Process+0x3cc>
      break;
 800781e:	bf00      	nop
 8007820:	e00a      	b.n	8007838 <USBH_Process+0x3cc>
    break;
 8007822:	bf00      	nop
 8007824:	e008      	b.n	8007838 <USBH_Process+0x3cc>
      break;
 8007826:	bf00      	nop
 8007828:	e006      	b.n	8007838 <USBH_Process+0x3cc>
      break;
 800782a:	bf00      	nop
 800782c:	e004      	b.n	8007838 <USBH_Process+0x3cc>
      break;
 800782e:	bf00      	nop
 8007830:	e002      	b.n	8007838 <USBH_Process+0x3cc>
      break;
 8007832:	bf00      	nop
 8007834:	e000      	b.n	8007838 <USBH_Process+0x3cc>
      break;
 8007836:	bf00      	nop
  }
  return USBH_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop

08007844 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b088      	sub	sp, #32
 8007848:	af04      	add	r7, sp, #16
 800784a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800784c:	2301      	movs	r3, #1
 800784e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007850:	2301      	movs	r3, #1
 8007852:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	785b      	ldrb	r3, [r3, #1]
 8007858:	2b07      	cmp	r3, #7
 800785a:	f200 81c1 	bhi.w	8007be0 <USBH_HandleEnum+0x39c>
 800785e:	a201      	add	r2, pc, #4	; (adr r2, 8007864 <USBH_HandleEnum+0x20>)
 8007860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007864:	08007885 	.word	0x08007885
 8007868:	08007943 	.word	0x08007943
 800786c:	080079ad 	.word	0x080079ad
 8007870:	08007a3b 	.word	0x08007a3b
 8007874:	08007aa5 	.word	0x08007aa5
 8007878:	08007b15 	.word	0x08007b15
 800787c:	08007b5b 	.word	0x08007b5b
 8007880:	08007ba1 	.word	0x08007ba1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007884:	2108      	movs	r1, #8
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 fa50 	bl	8007d2c <USBH_Get_DevDesc>
 800788c:	4603      	mov	r3, r0
 800788e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007890:	7bbb      	ldrb	r3, [r7, #14]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d130      	bne.n	80078f8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	7919      	ldrb	r1, [r3, #4]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80078ba:	b292      	uxth	r2, r2
 80078bc:	9202      	str	r2, [sp, #8]
 80078be:	2200      	movs	r2, #0
 80078c0:	9201      	str	r2, [sp, #4]
 80078c2:	9300      	str	r3, [sp, #0]
 80078c4:	4603      	mov	r3, r0
 80078c6:	2280      	movs	r2, #128	; 0x80
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f001 f865 	bl	8008998 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	7959      	ldrb	r1, [r3, #5]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80078e2:	b292      	uxth	r2, r2
 80078e4:	9202      	str	r2, [sp, #8]
 80078e6:	2200      	movs	r2, #0
 80078e8:	9201      	str	r2, [sp, #4]
 80078ea:	9300      	str	r3, [sp, #0]
 80078ec:	4603      	mov	r3, r0
 80078ee:	2200      	movs	r2, #0
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f001 f851 	bl	8008998 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80078f6:	e175      	b.n	8007be4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078f8:	7bbb      	ldrb	r3, [r7, #14]
 80078fa:	2b03      	cmp	r3, #3
 80078fc:	f040 8172 	bne.w	8007be4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007906:	3301      	adds	r3, #1
 8007908:	b2da      	uxtb	r2, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007916:	2b03      	cmp	r3, #3
 8007918:	d903      	bls.n	8007922 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	220d      	movs	r2, #13
 800791e:	701a      	strb	r2, [r3, #0]
      break;
 8007920:	e160      	b.n	8007be4 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	795b      	ldrb	r3, [r3, #5]
 8007926:	4619      	mov	r1, r3
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f001 f885 	bl	8008a38 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	791b      	ldrb	r3, [r3, #4]
 8007932:	4619      	mov	r1, r3
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f001 f87f 	bl	8008a38 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	701a      	strb	r2, [r3, #0]
      break;
 8007940:	e150      	b.n	8007be4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007942:	2112      	movs	r1, #18
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 f9f1 	bl	8007d2c <USBH_Get_DevDesc>
 800794a:	4603      	mov	r3, r0
 800794c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800794e:	7bbb      	ldrb	r3, [r7, #14]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d103      	bne.n	800795c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2202      	movs	r2, #2
 8007958:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800795a:	e145      	b.n	8007be8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800795c:	7bbb      	ldrb	r3, [r7, #14]
 800795e:	2b03      	cmp	r3, #3
 8007960:	f040 8142 	bne.w	8007be8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800796a:	3301      	adds	r3, #1
 800796c:	b2da      	uxtb	r2, r3
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800797a:	2b03      	cmp	r3, #3
 800797c:	d903      	bls.n	8007986 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	220d      	movs	r2, #13
 8007982:	701a      	strb	r2, [r3, #0]
      break;
 8007984:	e130      	b.n	8007be8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	795b      	ldrb	r3, [r3, #5]
 800798a:	4619      	mov	r1, r3
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f001 f853 	bl	8008a38 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	791b      	ldrb	r3, [r3, #4]
 8007996:	4619      	mov	r1, r3
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f001 f84d 	bl	8008a38 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	701a      	strb	r2, [r3, #0]
      break;
 80079aa:	e11d      	b.n	8007be8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80079ac:	2101      	movs	r1, #1
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fa68 	bl	8007e84 <USBH_SetAddress>
 80079b4:	4603      	mov	r3, r0
 80079b6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079b8:	7bbb      	ldrb	r3, [r7, #14]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d132      	bne.n	8007a24 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80079be:	2002      	movs	r0, #2
 80079c0:	f001 fb30 	bl	8009024 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2203      	movs	r2, #3
 80079d0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	7919      	ldrb	r1, [r3, #4]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80079e6:	b292      	uxth	r2, r2
 80079e8:	9202      	str	r2, [sp, #8]
 80079ea:	2200      	movs	r2, #0
 80079ec:	9201      	str	r2, [sp, #4]
 80079ee:	9300      	str	r3, [sp, #0]
 80079f0:	4603      	mov	r3, r0
 80079f2:	2280      	movs	r2, #128	; 0x80
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 ffcf 	bl	8008998 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	7959      	ldrb	r1, [r3, #5]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a0e:	b292      	uxth	r2, r2
 8007a10:	9202      	str	r2, [sp, #8]
 8007a12:	2200      	movs	r2, #0
 8007a14:	9201      	str	r2, [sp, #4]
 8007a16:	9300      	str	r3, [sp, #0]
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 ffbb 	bl	8008998 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007a22:	e0e3      	b.n	8007bec <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a24:	7bbb      	ldrb	r3, [r7, #14]
 8007a26:	2b03      	cmp	r3, #3
 8007a28:	f040 80e0 	bne.w	8007bec <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	220d      	movs	r2, #13
 8007a30:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	705a      	strb	r2, [r3, #1]
      break;
 8007a38:	e0d8      	b.n	8007bec <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007a3a:	2109      	movs	r1, #9
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 f99d 	bl	8007d7c <USBH_Get_CfgDesc>
 8007a42:	4603      	mov	r3, r0
 8007a44:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a46:	7bbb      	ldrb	r3, [r7, #14]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d103      	bne.n	8007a54 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2204      	movs	r2, #4
 8007a50:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007a52:	e0cd      	b.n	8007bf0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a54:	7bbb      	ldrb	r3, [r7, #14]
 8007a56:	2b03      	cmp	r3, #3
 8007a58:	f040 80ca 	bne.w	8007bf0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a62:	3301      	adds	r3, #1
 8007a64:	b2da      	uxtb	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a72:	2b03      	cmp	r3, #3
 8007a74:	d903      	bls.n	8007a7e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	220d      	movs	r2, #13
 8007a7a:	701a      	strb	r2, [r3, #0]
      break;
 8007a7c:	e0b8      	b.n	8007bf0 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	795b      	ldrb	r3, [r3, #5]
 8007a82:	4619      	mov	r1, r3
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 ffd7 	bl	8008a38 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	791b      	ldrb	r3, [r3, #4]
 8007a8e:	4619      	mov	r1, r3
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 ffd1 	bl	8008a38 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	701a      	strb	r2, [r3, #0]
      break;
 8007aa2:	e0a5      	b.n	8007bf0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007aaa:	4619      	mov	r1, r3
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 f965 	bl	8007d7c <USBH_Get_CfgDesc>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007ab6:	7bbb      	ldrb	r3, [r7, #14]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d103      	bne.n	8007ac4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2205      	movs	r2, #5
 8007ac0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007ac2:	e097      	b.n	8007bf4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ac4:	7bbb      	ldrb	r3, [r7, #14]
 8007ac6:	2b03      	cmp	r3, #3
 8007ac8:	f040 8094 	bne.w	8007bf4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	b2da      	uxtb	r2, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ae2:	2b03      	cmp	r3, #3
 8007ae4:	d903      	bls.n	8007aee <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	220d      	movs	r2, #13
 8007aea:	701a      	strb	r2, [r3, #0]
      break;
 8007aec:	e082      	b.n	8007bf4 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	795b      	ldrb	r3, [r3, #5]
 8007af2:	4619      	mov	r1, r3
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 ff9f 	bl	8008a38 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	791b      	ldrb	r3, [r3, #4]
 8007afe:	4619      	mov	r1, r3
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 ff99 	bl	8008a38 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	701a      	strb	r2, [r3, #0]
      break;
 8007b12:	e06f      	b.n	8007bf4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d019      	beq.n	8007b52 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007b2a:	23ff      	movs	r3, #255	; 0xff
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 f949 	bl	8007dc4 <USBH_Get_StringDesc>
 8007b32:	4603      	mov	r3, r0
 8007b34:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007b36:	7bbb      	ldrb	r3, [r7, #14]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d103      	bne.n	8007b44 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2206      	movs	r2, #6
 8007b40:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007b42:	e059      	b.n	8007bf8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b44:	7bbb      	ldrb	r3, [r7, #14]
 8007b46:	2b03      	cmp	r3, #3
 8007b48:	d156      	bne.n	8007bf8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2206      	movs	r2, #6
 8007b4e:	705a      	strb	r2, [r3, #1]
      break;
 8007b50:	e052      	b.n	8007bf8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2206      	movs	r2, #6
 8007b56:	705a      	strb	r2, [r3, #1]
      break;
 8007b58:	e04e      	b.n	8007bf8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d019      	beq.n	8007b98 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007b70:	23ff      	movs	r3, #255	; 0xff
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 f926 	bl	8007dc4 <USBH_Get_StringDesc>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007b7c:	7bbb      	ldrb	r3, [r7, #14]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d103      	bne.n	8007b8a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2207      	movs	r2, #7
 8007b86:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007b88:	e038      	b.n	8007bfc <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b8a:	7bbb      	ldrb	r3, [r7, #14]
 8007b8c:	2b03      	cmp	r3, #3
 8007b8e:	d135      	bne.n	8007bfc <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2207      	movs	r2, #7
 8007b94:	705a      	strb	r2, [r3, #1]
      break;
 8007b96:	e031      	b.n	8007bfc <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2207      	movs	r2, #7
 8007b9c:	705a      	strb	r2, [r3, #1]
      break;
 8007b9e:	e02d      	b.n	8007bfc <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d017      	beq.n	8007bda <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007bb6:	23ff      	movs	r3, #255	; 0xff
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 f903 	bl	8007dc4 <USBH_Get_StringDesc>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007bc2:	7bbb      	ldrb	r3, [r7, #14]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d102      	bne.n	8007bce <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007bcc:	e018      	b.n	8007c00 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bce:	7bbb      	ldrb	r3, [r7, #14]
 8007bd0:	2b03      	cmp	r3, #3
 8007bd2:	d115      	bne.n	8007c00 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8007bd8:	e012      	b.n	8007c00 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	73fb      	strb	r3, [r7, #15]
      break;
 8007bde:	e00f      	b.n	8007c00 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007be0:	bf00      	nop
 8007be2:	e00e      	b.n	8007c02 <USBH_HandleEnum+0x3be>
      break;
 8007be4:	bf00      	nop
 8007be6:	e00c      	b.n	8007c02 <USBH_HandleEnum+0x3be>
      break;
 8007be8:	bf00      	nop
 8007bea:	e00a      	b.n	8007c02 <USBH_HandleEnum+0x3be>
      break;
 8007bec:	bf00      	nop
 8007bee:	e008      	b.n	8007c02 <USBH_HandleEnum+0x3be>
      break;
 8007bf0:	bf00      	nop
 8007bf2:	e006      	b.n	8007c02 <USBH_HandleEnum+0x3be>
      break;
 8007bf4:	bf00      	nop
 8007bf6:	e004      	b.n	8007c02 <USBH_HandleEnum+0x3be>
      break;
 8007bf8:	bf00      	nop
 8007bfa:	e002      	b.n	8007c02 <USBH_HandleEnum+0x3be>
      break;
 8007bfc:	bf00      	nop
 8007bfe:	e000      	b.n	8007c02 <USBH_HandleEnum+0x3be>
      break;
 8007c00:	bf00      	nop
  }
  return Status;
 8007c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3710      	adds	r7, #16
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	683a      	ldr	r2, [r7, #0]
 8007c1a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007c1e:	bf00      	nop
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr

08007c2a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b082      	sub	sp, #8
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c38:	1c5a      	adds	r2, r3, #1
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 f804 	bl	8007c4e <USBH_HandleSof>
}
 8007c46:	bf00      	nop
 8007c48:	3708      	adds	r7, #8
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b082      	sub	sp, #8
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	2b0b      	cmp	r3, #11
 8007c5e:	d10a      	bne.n	8007c76 <USBH_HandleSof+0x28>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d005      	beq.n	8007c76 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c70:	699b      	ldr	r3, [r3, #24]
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	4798      	blx	r3
  }
}
 8007c76:	bf00      	nop
 8007c78:	3708      	adds	r7, #8
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007c7e:	b480      	push	{r7}
 8007c80:	b083      	sub	sp, #12
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007c8e:	bf00      	nop
}
 8007c90:	370c      	adds	r7, #12
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr

08007c9a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007c9a:	b480      	push	{r7}
 8007c9c:	b083      	sub	sp, #12
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007caa:	bf00      	nop
}
 8007cac:	370c      	adds	r7, #12
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr

08007cb6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007cb6:	b480      	push	{r7}
 8007cb8:	b083      	sub	sp, #12
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f001 f844 	bl	8008d92 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	791b      	ldrb	r3, [r3, #4]
 8007d0e:	4619      	mov	r1, r3
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 fe91 	bl	8008a38 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	795b      	ldrb	r3, [r3, #5]
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 fe8b 	bl	8008a38 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b086      	sub	sp, #24
 8007d30:	af02      	add	r7, sp, #8
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	460b      	mov	r3, r1
 8007d36:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007d3e:	78fb      	ldrb	r3, [r7, #3]
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	9300      	str	r3, [sp, #0]
 8007d44:	4613      	mov	r3, r2
 8007d46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 f864 	bl	8007e1a <USBH_GetDescriptor>
 8007d52:	4603      	mov	r3, r0
 8007d54:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007d56:	7bfb      	ldrb	r3, [r7, #15]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d10a      	bne.n	8007d72 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007d68:	78fa      	ldrb	r2, [r7, #3]
 8007d6a:	b292      	uxth	r2, r2
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	f000 f918 	bl	8007fa2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3710      	adds	r7, #16
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b086      	sub	sp, #24
 8007d80:	af02      	add	r7, sp, #8
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	460b      	mov	r3, r1
 8007d86:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	331c      	adds	r3, #28
 8007d8c:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007d8e:	887b      	ldrh	r3, [r7, #2]
 8007d90:	9300      	str	r3, [sp, #0]
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d98:	2100      	movs	r1, #0
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f83d 	bl	8007e1a <USBH_GetDescriptor>
 8007da0:	4603      	mov	r3, r0
 8007da2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007da4:	7bfb      	ldrb	r3, [r7, #15]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d107      	bne.n	8007dba <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007daa:	887b      	ldrh	r3, [r7, #2]
 8007dac:	461a      	mov	r2, r3
 8007dae:	68b9      	ldr	r1, [r7, #8]
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 f987 	bl	80080c4 <USBH_ParseCfgDesc>
 8007db6:	4603      	mov	r3, r0
 8007db8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b088      	sub	sp, #32
 8007dc8:	af02      	add	r7, sp, #8
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	607a      	str	r2, [r7, #4]
 8007dce:	461a      	mov	r2, r3
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	72fb      	strb	r3, [r7, #11]
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007dd8:	7afb      	ldrb	r3, [r7, #11]
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007de0:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007de8:	893b      	ldrh	r3, [r7, #8]
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	460b      	mov	r3, r1
 8007dee:	2100      	movs	r1, #0
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f000 f812 	bl	8007e1a <USBH_GetDescriptor>
 8007df6:	4603      	mov	r3, r0
 8007df8:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007dfa:	7dfb      	ldrb	r3, [r7, #23]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d107      	bne.n	8007e10 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007e06:	893a      	ldrh	r2, [r7, #8]
 8007e08:	6879      	ldr	r1, [r7, #4]
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f000 fb24 	bl	8008458 <USBH_ParseStringDesc>
  }

  return status;
 8007e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3718      	adds	r7, #24
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b084      	sub	sp, #16
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	60f8      	str	r0, [r7, #12]
 8007e22:	607b      	str	r3, [r7, #4]
 8007e24:	460b      	mov	r3, r1
 8007e26:	72fb      	strb	r3, [r7, #11]
 8007e28:	4613      	mov	r3, r2
 8007e2a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	789b      	ldrb	r3, [r3, #2]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d11c      	bne.n	8007e6e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007e34:	7afb      	ldrb	r3, [r7, #11]
 8007e36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e3a:	b2da      	uxtb	r2, r3
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2206      	movs	r2, #6
 8007e44:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	893a      	ldrh	r2, [r7, #8]
 8007e4a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007e4c:	893b      	ldrh	r3, [r7, #8]
 8007e4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007e52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e56:	d104      	bne.n	8007e62 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f240 4209 	movw	r2, #1033	; 0x409
 8007e5e:	829a      	strh	r2, [r3, #20]
 8007e60:	e002      	b.n	8007e68 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2200      	movs	r2, #0
 8007e66:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	8b3a      	ldrh	r2, [r7, #24]
 8007e6c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007e6e:	8b3b      	ldrh	r3, [r7, #24]
 8007e70:	461a      	mov	r2, r3
 8007e72:	6879      	ldr	r1, [r7, #4]
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	f000 fb3d 	bl	80084f4 <USBH_CtlReq>
 8007e7a:	4603      	mov	r3, r0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3710      	adds	r7, #16
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	789b      	ldrb	r3, [r3, #2]
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d10f      	bne.n	8007eb8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2205      	movs	r2, #5
 8007ea2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007ea4:	78fb      	ldrb	r3, [r7, #3]
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007eb8:	2200      	movs	r2, #0
 8007eba:	2100      	movs	r1, #0
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 fb19 	bl	80084f4 <USBH_CtlReq>
 8007ec2:	4603      	mov	r3, r0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3708      	adds	r7, #8
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	789b      	ldrb	r3, [r3, #2]
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d10e      	bne.n	8007efe <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2209      	movs	r2, #9
 8007eea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	887a      	ldrh	r2, [r7, #2]
 8007ef0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007efe:	2200      	movs	r2, #0
 8007f00:	2100      	movs	r1, #0
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 faf6 	bl	80084f4 <USBH_CtlReq>
 8007f08:	4603      	mov	r3, r0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3708      	adds	r7, #8
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b082      	sub	sp, #8
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	789b      	ldrb	r3, [r3, #2]
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d10f      	bne.n	8007f46 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2203      	movs	r2, #3
 8007f30:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007f32:	78fb      	ldrb	r3, [r7, #3]
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007f46:	2200      	movs	r2, #0
 8007f48:	2100      	movs	r1, #0
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 fad2 	bl	80084f4 <USBH_CtlReq>
 8007f50:	4603      	mov	r3, r0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3708      	adds	r7, #8
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b082      	sub	sp, #8
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
 8007f62:	460b      	mov	r3, r1
 8007f64:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	789b      	ldrb	r3, [r3, #2]
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d10f      	bne.n	8007f8e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2202      	movs	r2, #2
 8007f72:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007f80:	78fb      	ldrb	r3, [r7, #3]
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007f8e:	2200      	movs	r2, #0
 8007f90:	2100      	movs	r1, #0
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 faae 	bl	80084f4 <USBH_CtlReq>
 8007f98:	4603      	mov	r3, r0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3708      	adds	r7, #8
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007fa2:	b480      	push	{r7}
 8007fa4:	b085      	sub	sp, #20
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	60f8      	str	r0, [r7, #12]
 8007faa:	60b9      	str	r1, [r7, #8]
 8007fac:	4613      	mov	r3, r2
 8007fae:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	781a      	ldrb	r2, [r3, #0]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	785a      	ldrb	r2, [r3, #1]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	3302      	adds	r3, #2
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	b29a      	uxth	r2, r3
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	3303      	adds	r3, #3
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	021b      	lsls	r3, r3, #8
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	791a      	ldrb	r2, [r3, #4]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	795a      	ldrb	r2, [r3, #5]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	799a      	ldrb	r2, [r3, #6]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	79da      	ldrb	r2, [r3, #7]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	79db      	ldrb	r3, [r3, #7]
 8008000:	2b20      	cmp	r3, #32
 8008002:	dc11      	bgt.n	8008028 <USBH_ParseDevDesc+0x86>
 8008004:	2b08      	cmp	r3, #8
 8008006:	db16      	blt.n	8008036 <USBH_ParseDevDesc+0x94>
 8008008:	3b08      	subs	r3, #8
 800800a:	2201      	movs	r2, #1
 800800c:	fa02 f303 	lsl.w	r3, r2, r3
 8008010:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8008014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008018:	2b00      	cmp	r3, #0
 800801a:	bf14      	ite	ne
 800801c:	2301      	movne	r3, #1
 800801e:	2300      	moveq	r3, #0
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b00      	cmp	r3, #0
 8008024:	d102      	bne.n	800802c <USBH_ParseDevDesc+0x8a>
 8008026:	e006      	b.n	8008036 <USBH_ParseDevDesc+0x94>
 8008028:	2b40      	cmp	r3, #64	; 0x40
 800802a:	d104      	bne.n	8008036 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	79da      	ldrb	r2, [r3, #7]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	71da      	strb	r2, [r3, #7]
      break;
 8008034:	e003      	b.n	800803e <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2240      	movs	r2, #64	; 0x40
 800803a:	71da      	strb	r2, [r3, #7]
      break;
 800803c:	bf00      	nop
  }

  if (length > 8U)
 800803e:	88fb      	ldrh	r3, [r7, #6]
 8008040:	2b08      	cmp	r3, #8
 8008042:	d939      	bls.n	80080b8 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	3308      	adds	r3, #8
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	b29a      	uxth	r2, r3
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	3309      	adds	r3, #9
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	b29b      	uxth	r3, r3
 8008054:	021b      	lsls	r3, r3, #8
 8008056:	b29b      	uxth	r3, r3
 8008058:	4313      	orrs	r3, r2
 800805a:	b29a      	uxth	r2, r3
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	330a      	adds	r3, #10
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	b29a      	uxth	r2, r3
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	330b      	adds	r3, #11
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	b29b      	uxth	r3, r3
 8008070:	021b      	lsls	r3, r3, #8
 8008072:	b29b      	uxth	r3, r3
 8008074:	4313      	orrs	r3, r2
 8008076:	b29a      	uxth	r2, r3
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	330c      	adds	r3, #12
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	b29a      	uxth	r2, r3
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	330d      	adds	r3, #13
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	b29b      	uxth	r3, r3
 800808c:	021b      	lsls	r3, r3, #8
 800808e:	b29b      	uxth	r3, r3
 8008090:	4313      	orrs	r3, r2
 8008092:	b29a      	uxth	r2, r3
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	7b9a      	ldrb	r2, [r3, #14]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	7bda      	ldrb	r2, [r3, #15]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	7c1a      	ldrb	r2, [r3, #16]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	7c5a      	ldrb	r2, [r3, #17]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	745a      	strb	r2, [r3, #17]
  }
}
 80080b8:	bf00      	nop
 80080ba:	3714      	adds	r7, #20
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b08c      	sub	sp, #48	; 0x30
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	4613      	mov	r3, r2
 80080d0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80080d8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80080da:	2300      	movs	r3, #0
 80080dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80080e4:	2300      	movs	r3, #0
 80080e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80080ea:	2300      	movs	r3, #0
 80080ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	781a      	ldrb	r2, [r3, #0]
 80080f8:	6a3b      	ldr	r3, [r7, #32]
 80080fa:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	785a      	ldrb	r2, [r3, #1]
 8008100:	6a3b      	ldr	r3, [r7, #32]
 8008102:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	3302      	adds	r3, #2
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	b29a      	uxth	r2, r3
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	3303      	adds	r3, #3
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	b29b      	uxth	r3, r3
 8008114:	021b      	lsls	r3, r3, #8
 8008116:	b29b      	uxth	r3, r3
 8008118:	4313      	orrs	r3, r2
 800811a:	b29b      	uxth	r3, r3
 800811c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008120:	bf28      	it	cs
 8008122:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008126:	b29a      	uxth	r2, r3
 8008128:	6a3b      	ldr	r3, [r7, #32]
 800812a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	791a      	ldrb	r2, [r3, #4]
 8008130:	6a3b      	ldr	r3, [r7, #32]
 8008132:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	795a      	ldrb	r2, [r3, #5]
 8008138:	6a3b      	ldr	r3, [r7, #32]
 800813a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	799a      	ldrb	r2, [r3, #6]
 8008140:	6a3b      	ldr	r3, [r7, #32]
 8008142:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	79da      	ldrb	r2, [r3, #7]
 8008148:	6a3b      	ldr	r3, [r7, #32]
 800814a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	7a1a      	ldrb	r2, [r3, #8]
 8008150:	6a3b      	ldr	r3, [r7, #32]
 8008152:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008154:	6a3b      	ldr	r3, [r7, #32]
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	2b09      	cmp	r3, #9
 800815a:	d002      	beq.n	8008162 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800815c:	6a3b      	ldr	r3, [r7, #32]
 800815e:	2209      	movs	r2, #9
 8008160:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008162:	88fb      	ldrh	r3, [r7, #6]
 8008164:	2b09      	cmp	r3, #9
 8008166:	f240 809d 	bls.w	80082a4 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800816a:	2309      	movs	r3, #9
 800816c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800816e:	2300      	movs	r3, #0
 8008170:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008172:	e081      	b.n	8008278 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008174:	f107 0316 	add.w	r3, r7, #22
 8008178:	4619      	mov	r1, r3
 800817a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800817c:	f000 f99f 	bl	80084be <USBH_GetNextDesc>
 8008180:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008184:	785b      	ldrb	r3, [r3, #1]
 8008186:	2b04      	cmp	r3, #4
 8008188:	d176      	bne.n	8008278 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800818a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	2b09      	cmp	r3, #9
 8008190:	d002      	beq.n	8008198 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008194:	2209      	movs	r2, #9
 8008196:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800819c:	221a      	movs	r2, #26
 800819e:	fb02 f303 	mul.w	r3, r2, r3
 80081a2:	3308      	adds	r3, #8
 80081a4:	6a3a      	ldr	r2, [r7, #32]
 80081a6:	4413      	add	r3, r2
 80081a8:	3302      	adds	r3, #2
 80081aa:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80081ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081ae:	69f8      	ldr	r0, [r7, #28]
 80081b0:	f000 f87e 	bl	80082b0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80081b4:	2300      	movs	r3, #0
 80081b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80081ba:	2300      	movs	r3, #0
 80081bc:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80081be:	e043      	b.n	8008248 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80081c0:	f107 0316 	add.w	r3, r7, #22
 80081c4:	4619      	mov	r1, r3
 80081c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081c8:	f000 f979 	bl	80084be <USBH_GetNextDesc>
 80081cc:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80081ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d0:	785b      	ldrb	r3, [r3, #1]
 80081d2:	2b05      	cmp	r3, #5
 80081d4:	d138      	bne.n	8008248 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80081d6:	69fb      	ldr	r3, [r7, #28]
 80081d8:	795b      	ldrb	r3, [r3, #5]
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d10f      	bne.n	80081fe <USBH_ParseCfgDesc+0x13a>
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	799b      	ldrb	r3, [r3, #6]
 80081e2:	2b02      	cmp	r3, #2
 80081e4:	d10b      	bne.n	80081fe <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	79db      	ldrb	r3, [r3, #7]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d10f      	bne.n	800820e <USBH_ParseCfgDesc+0x14a>
 80081ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	2b09      	cmp	r3, #9
 80081f4:	d00b      	beq.n	800820e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80081f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f8:	2209      	movs	r2, #9
 80081fa:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80081fc:	e007      	b.n	800820e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80081fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	2b07      	cmp	r3, #7
 8008204:	d004      	beq.n	8008210 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008208:	2207      	movs	r2, #7
 800820a:	701a      	strb	r2, [r3, #0]
 800820c:	e000      	b.n	8008210 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800820e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008210:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008214:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008218:	3201      	adds	r2, #1
 800821a:	00d2      	lsls	r2, r2, #3
 800821c:	211a      	movs	r1, #26
 800821e:	fb01 f303 	mul.w	r3, r1, r3
 8008222:	4413      	add	r3, r2
 8008224:	3308      	adds	r3, #8
 8008226:	6a3a      	ldr	r2, [r7, #32]
 8008228:	4413      	add	r3, r2
 800822a:	3304      	adds	r3, #4
 800822c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800822e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008230:	69b9      	ldr	r1, [r7, #24]
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	f000 f86b 	bl	800830e <USBH_ParseEPDesc>
 8008238:	4603      	mov	r3, r0
 800823a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800823e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008242:	3301      	adds	r3, #1
 8008244:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	791b      	ldrb	r3, [r3, #4]
 800824c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008250:	429a      	cmp	r2, r3
 8008252:	d204      	bcs.n	800825e <USBH_ParseCfgDesc+0x19a>
 8008254:	6a3b      	ldr	r3, [r7, #32]
 8008256:	885a      	ldrh	r2, [r3, #2]
 8008258:	8afb      	ldrh	r3, [r7, #22]
 800825a:	429a      	cmp	r2, r3
 800825c:	d8b0      	bhi.n	80081c0 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800825e:	69fb      	ldr	r3, [r7, #28]
 8008260:	791b      	ldrb	r3, [r3, #4]
 8008262:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008266:	429a      	cmp	r2, r3
 8008268:	d201      	bcs.n	800826e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800826a:	2303      	movs	r3, #3
 800826c:	e01c      	b.n	80082a8 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800826e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008272:	3301      	adds	r3, #1
 8008274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008278:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800827c:	2b01      	cmp	r3, #1
 800827e:	d805      	bhi.n	800828c <USBH_ParseCfgDesc+0x1c8>
 8008280:	6a3b      	ldr	r3, [r7, #32]
 8008282:	885a      	ldrh	r2, [r3, #2]
 8008284:	8afb      	ldrh	r3, [r7, #22]
 8008286:	429a      	cmp	r2, r3
 8008288:	f63f af74 	bhi.w	8008174 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800828c:	6a3b      	ldr	r3, [r7, #32]
 800828e:	791b      	ldrb	r3, [r3, #4]
 8008290:	2b02      	cmp	r3, #2
 8008292:	bf28      	it	cs
 8008294:	2302      	movcs	r3, #2
 8008296:	b2db      	uxtb	r3, r3
 8008298:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800829c:	429a      	cmp	r2, r3
 800829e:	d201      	bcs.n	80082a4 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80082a0:	2303      	movs	r3, #3
 80082a2:	e001      	b.n	80082a8 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80082a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3730      	adds	r7, #48	; 0x30
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	781a      	ldrb	r2, [r3, #0]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	785a      	ldrb	r2, [r3, #1]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	789a      	ldrb	r2, [r3, #2]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	78da      	ldrb	r2, [r3, #3]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	791a      	ldrb	r2, [r3, #4]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	795a      	ldrb	r2, [r3, #5]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	799a      	ldrb	r2, [r3, #6]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	79da      	ldrb	r2, [r3, #7]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	7a1a      	ldrb	r2, [r3, #8]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	721a      	strb	r2, [r3, #8]
}
 8008302:	bf00      	nop
 8008304:	370c      	adds	r7, #12
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr

0800830e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800830e:	b480      	push	{r7}
 8008310:	b087      	sub	sp, #28
 8008312:	af00      	add	r7, sp, #0
 8008314:	60f8      	str	r0, [r7, #12]
 8008316:	60b9      	str	r1, [r7, #8]
 8008318:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800831a:	2300      	movs	r3, #0
 800831c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	781a      	ldrb	r2, [r3, #0]
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	785a      	ldrb	r2, [r3, #1]
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	789a      	ldrb	r2, [r3, #2]
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	78da      	ldrb	r2, [r3, #3]
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	3304      	adds	r3, #4
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	b29a      	uxth	r2, r3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	3305      	adds	r3, #5
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	b29b      	uxth	r3, r3
 800834e:	021b      	lsls	r3, r3, #8
 8008350:	b29b      	uxth	r3, r3
 8008352:	4313      	orrs	r3, r2
 8008354:	b29a      	uxth	r2, r3
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	799a      	ldrb	r2, [r3, #6]
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	889b      	ldrh	r3, [r3, #4]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d102      	bne.n	8008370 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800836a:	2303      	movs	r3, #3
 800836c:	75fb      	strb	r3, [r7, #23]
 800836e:	e033      	b.n	80083d8 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	889b      	ldrh	r3, [r3, #4]
 8008374:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008378:	f023 0307 	bic.w	r3, r3, #7
 800837c:	b29a      	uxth	r2, r3
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	889b      	ldrh	r3, [r3, #4]
 8008386:	b21a      	sxth	r2, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	3304      	adds	r3, #4
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	b299      	uxth	r1, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	3305      	adds	r3, #5
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	b29b      	uxth	r3, r3
 8008398:	021b      	lsls	r3, r3, #8
 800839a:	b29b      	uxth	r3, r3
 800839c:	430b      	orrs	r3, r1
 800839e:	b29b      	uxth	r3, r3
 80083a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d110      	bne.n	80083ca <USBH_ParseEPDesc+0xbc>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	3304      	adds	r3, #4
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	b299      	uxth	r1, r3
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	3305      	adds	r3, #5
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	021b      	lsls	r3, r3, #8
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	430b      	orrs	r3, r1
 80083be:	b29b      	uxth	r3, r3
 80083c0:	b21b      	sxth	r3, r3
 80083c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80083c6:	b21b      	sxth	r3, r3
 80083c8:	e001      	b.n	80083ce <USBH_ParseEPDesc+0xc0>
 80083ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083ce:	4313      	orrs	r3, r2
 80083d0:	b21b      	sxth	r3, r3
 80083d2:	b29a      	uxth	r2, r3
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d116      	bne.n	8008410 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	78db      	ldrb	r3, [r3, #3]
 80083e6:	f003 0303 	and.w	r3, r3, #3
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d005      	beq.n	80083fa <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	78db      	ldrb	r3, [r3, #3]
 80083f2:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80083f6:	2b03      	cmp	r3, #3
 80083f8:	d127      	bne.n	800844a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	799b      	ldrb	r3, [r3, #6]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d003      	beq.n	800840a <USBH_ParseEPDesc+0xfc>
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	799b      	ldrb	r3, [r3, #6]
 8008406:	2b10      	cmp	r3, #16
 8008408:	d91f      	bls.n	800844a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800840a:	2303      	movs	r3, #3
 800840c:	75fb      	strb	r3, [r7, #23]
 800840e:	e01c      	b.n	800844a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	78db      	ldrb	r3, [r3, #3]
 8008414:	f003 0303 	and.w	r3, r3, #3
 8008418:	2b01      	cmp	r3, #1
 800841a:	d10a      	bne.n	8008432 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	799b      	ldrb	r3, [r3, #6]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d003      	beq.n	800842c <USBH_ParseEPDesc+0x11e>
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	799b      	ldrb	r3, [r3, #6]
 8008428:	2b10      	cmp	r3, #16
 800842a:	d90e      	bls.n	800844a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800842c:	2303      	movs	r3, #3
 800842e:	75fb      	strb	r3, [r7, #23]
 8008430:	e00b      	b.n	800844a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	78db      	ldrb	r3, [r3, #3]
 8008436:	f003 0303 	and.w	r3, r3, #3
 800843a:	2b03      	cmp	r3, #3
 800843c:	d105      	bne.n	800844a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	799b      	ldrb	r3, [r3, #6]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d101      	bne.n	800844a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008446:	2303      	movs	r3, #3
 8008448:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800844a:	7dfb      	ldrb	r3, [r7, #23]
}
 800844c:	4618      	mov	r0, r3
 800844e:	371c      	adds	r7, #28
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008458:	b480      	push	{r7}
 800845a:	b087      	sub	sp, #28
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	4613      	mov	r3, r2
 8008464:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	3301      	adds	r3, #1
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	2b03      	cmp	r3, #3
 800846e:	d120      	bne.n	80084b2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	1e9a      	subs	r2, r3, #2
 8008476:	88fb      	ldrh	r3, [r7, #6]
 8008478:	4293      	cmp	r3, r2
 800847a:	bf28      	it	cs
 800847c:	4613      	movcs	r3, r2
 800847e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	3302      	adds	r3, #2
 8008484:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008486:	2300      	movs	r3, #0
 8008488:	82fb      	strh	r3, [r7, #22]
 800848a:	e00b      	b.n	80084a4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800848c:	8afb      	ldrh	r3, [r7, #22]
 800848e:	68fa      	ldr	r2, [r7, #12]
 8008490:	4413      	add	r3, r2
 8008492:	781a      	ldrb	r2, [r3, #0]
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	3301      	adds	r3, #1
 800849c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800849e:	8afb      	ldrh	r3, [r7, #22]
 80084a0:	3302      	adds	r3, #2
 80084a2:	82fb      	strh	r3, [r7, #22]
 80084a4:	8afa      	ldrh	r2, [r7, #22]
 80084a6:	8abb      	ldrh	r3, [r7, #20]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d3ef      	bcc.n	800848c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	2200      	movs	r2, #0
 80084b0:	701a      	strb	r2, [r3, #0]
  }
}
 80084b2:	bf00      	nop
 80084b4:	371c      	adds	r7, #28
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr

080084be <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80084be:	b480      	push	{r7}
 80084c0:	b085      	sub	sp, #20
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
 80084c6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	881a      	ldrh	r2, [r3, #0]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	4413      	add	r3, r2
 80084d4:	b29a      	uxth	r2, r3
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	4413      	add	r3, r2
 80084e4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80084e6:	68fb      	ldr	r3, [r7, #12]
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3714      	adds	r7, #20
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b086      	sub	sp, #24
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	4613      	mov	r3, r2
 8008500:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008502:	2301      	movs	r3, #1
 8008504:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	789b      	ldrb	r3, [r3, #2]
 800850a:	2b01      	cmp	r3, #1
 800850c:	d002      	beq.n	8008514 <USBH_CtlReq+0x20>
 800850e:	2b02      	cmp	r3, #2
 8008510:	d00f      	beq.n	8008532 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008512:	e027      	b.n	8008564 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	68ba      	ldr	r2, [r7, #8]
 8008518:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	88fa      	ldrh	r2, [r7, #6]
 800851e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2201      	movs	r2, #1
 8008524:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2202      	movs	r2, #2
 800852a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800852c:	2301      	movs	r3, #1
 800852e:	75fb      	strb	r3, [r7, #23]
      break;
 8008530:	e018      	b.n	8008564 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008532:	68f8      	ldr	r0, [r7, #12]
 8008534:	f000 f81c 	bl	8008570 <USBH_HandleControl>
 8008538:	4603      	mov	r3, r0
 800853a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800853c:	7dfb      	ldrb	r3, [r7, #23]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d002      	beq.n	8008548 <USBH_CtlReq+0x54>
 8008542:	7dfb      	ldrb	r3, [r7, #23]
 8008544:	2b03      	cmp	r3, #3
 8008546:	d106      	bne.n	8008556 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2201      	movs	r2, #1
 800854c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2200      	movs	r2, #0
 8008552:	761a      	strb	r2, [r3, #24]
      break;
 8008554:	e005      	b.n	8008562 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008556:	7dfb      	ldrb	r3, [r7, #23]
 8008558:	2b02      	cmp	r3, #2
 800855a:	d102      	bne.n	8008562 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2201      	movs	r2, #1
 8008560:	709a      	strb	r2, [r3, #2]
      break;
 8008562:	bf00      	nop
  }
  return status;
 8008564:	7dfb      	ldrb	r3, [r7, #23]
}
 8008566:	4618      	mov	r0, r3
 8008568:	3718      	adds	r7, #24
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
	...

08008570 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af02      	add	r7, sp, #8
 8008576:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008578:	2301      	movs	r3, #1
 800857a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800857c:	2300      	movs	r3, #0
 800857e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	7e1b      	ldrb	r3, [r3, #24]
 8008584:	3b01      	subs	r3, #1
 8008586:	2b0a      	cmp	r3, #10
 8008588:	f200 8156 	bhi.w	8008838 <USBH_HandleControl+0x2c8>
 800858c:	a201      	add	r2, pc, #4	; (adr r2, 8008594 <USBH_HandleControl+0x24>)
 800858e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008592:	bf00      	nop
 8008594:	080085c1 	.word	0x080085c1
 8008598:	080085db 	.word	0x080085db
 800859c:	08008645 	.word	0x08008645
 80085a0:	0800866b 	.word	0x0800866b
 80085a4:	080086a3 	.word	0x080086a3
 80085a8:	080086cd 	.word	0x080086cd
 80085ac:	0800871f 	.word	0x0800871f
 80085b0:	08008741 	.word	0x08008741
 80085b4:	0800877d 	.word	0x0800877d
 80085b8:	080087a3 	.word	0x080087a3
 80085bc:	080087e1 	.word	0x080087e1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f103 0110 	add.w	r1, r3, #16
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	795b      	ldrb	r3, [r3, #5]
 80085ca:	461a      	mov	r2, r3
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 f943 	bl	8008858 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2202      	movs	r2, #2
 80085d6:	761a      	strb	r2, [r3, #24]
      break;
 80085d8:	e139      	b.n	800884e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	795b      	ldrb	r3, [r3, #5]
 80085de:	4619      	mov	r1, r3
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 fcc5 	bl	8008f70 <USBH_LL_GetURBState>
 80085e6:	4603      	mov	r3, r0
 80085e8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80085ea:	7bbb      	ldrb	r3, [r7, #14]
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d11e      	bne.n	800862e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	7c1b      	ldrb	r3, [r3, #16]
 80085f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80085f8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	8adb      	ldrh	r3, [r3, #22]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00a      	beq.n	8008618 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008602:	7b7b      	ldrb	r3, [r7, #13]
 8008604:	2b80      	cmp	r3, #128	; 0x80
 8008606:	d103      	bne.n	8008610 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2203      	movs	r2, #3
 800860c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800860e:	e115      	b.n	800883c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2205      	movs	r2, #5
 8008614:	761a      	strb	r2, [r3, #24]
      break;
 8008616:	e111      	b.n	800883c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008618:	7b7b      	ldrb	r3, [r7, #13]
 800861a:	2b80      	cmp	r3, #128	; 0x80
 800861c:	d103      	bne.n	8008626 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2209      	movs	r2, #9
 8008622:	761a      	strb	r2, [r3, #24]
      break;
 8008624:	e10a      	b.n	800883c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2207      	movs	r2, #7
 800862a:	761a      	strb	r2, [r3, #24]
      break;
 800862c:	e106      	b.n	800883c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800862e:	7bbb      	ldrb	r3, [r7, #14]
 8008630:	2b04      	cmp	r3, #4
 8008632:	d003      	beq.n	800863c <USBH_HandleControl+0xcc>
 8008634:	7bbb      	ldrb	r3, [r7, #14]
 8008636:	2b02      	cmp	r3, #2
 8008638:	f040 8100 	bne.w	800883c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	220b      	movs	r2, #11
 8008640:	761a      	strb	r2, [r3, #24]
      break;
 8008642:	e0fb      	b.n	800883c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800864a:	b29a      	uxth	r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6899      	ldr	r1, [r3, #8]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	899a      	ldrh	r2, [r3, #12]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	791b      	ldrb	r3, [r3, #4]
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 f93a 	bl	80088d6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2204      	movs	r2, #4
 8008666:	761a      	strb	r2, [r3, #24]
      break;
 8008668:	e0f1      	b.n	800884e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	791b      	ldrb	r3, [r3, #4]
 800866e:	4619      	mov	r1, r3
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 fc7d 	bl	8008f70 <USBH_LL_GetURBState>
 8008676:	4603      	mov	r3, r0
 8008678:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800867a:	7bbb      	ldrb	r3, [r7, #14]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d102      	bne.n	8008686 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2209      	movs	r2, #9
 8008684:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008686:	7bbb      	ldrb	r3, [r7, #14]
 8008688:	2b05      	cmp	r3, #5
 800868a:	d102      	bne.n	8008692 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800868c:	2303      	movs	r3, #3
 800868e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008690:	e0d6      	b.n	8008840 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008692:	7bbb      	ldrb	r3, [r7, #14]
 8008694:	2b04      	cmp	r3, #4
 8008696:	f040 80d3 	bne.w	8008840 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	220b      	movs	r2, #11
 800869e:	761a      	strb	r2, [r3, #24]
      break;
 80086a0:	e0ce      	b.n	8008840 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6899      	ldr	r1, [r3, #8]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	899a      	ldrh	r2, [r3, #12]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	795b      	ldrb	r3, [r3, #5]
 80086ae:	2001      	movs	r0, #1
 80086b0:	9000      	str	r0, [sp, #0]
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 f8ea 	bl	800888c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80086be:	b29a      	uxth	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2206      	movs	r2, #6
 80086c8:	761a      	strb	r2, [r3, #24]
      break;
 80086ca:	e0c0      	b.n	800884e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	795b      	ldrb	r3, [r3, #5]
 80086d0:	4619      	mov	r1, r3
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fc4c 	bl	8008f70 <USBH_LL_GetURBState>
 80086d8:	4603      	mov	r3, r0
 80086da:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80086dc:	7bbb      	ldrb	r3, [r7, #14]
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d103      	bne.n	80086ea <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2207      	movs	r2, #7
 80086e6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80086e8:	e0ac      	b.n	8008844 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80086ea:	7bbb      	ldrb	r3, [r7, #14]
 80086ec:	2b05      	cmp	r3, #5
 80086ee:	d105      	bne.n	80086fc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	220c      	movs	r2, #12
 80086f4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80086f6:	2303      	movs	r3, #3
 80086f8:	73fb      	strb	r3, [r7, #15]
      break;
 80086fa:	e0a3      	b.n	8008844 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80086fc:	7bbb      	ldrb	r3, [r7, #14]
 80086fe:	2b02      	cmp	r3, #2
 8008700:	d103      	bne.n	800870a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2205      	movs	r2, #5
 8008706:	761a      	strb	r2, [r3, #24]
      break;
 8008708:	e09c      	b.n	8008844 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800870a:	7bbb      	ldrb	r3, [r7, #14]
 800870c:	2b04      	cmp	r3, #4
 800870e:	f040 8099 	bne.w	8008844 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	220b      	movs	r2, #11
 8008716:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008718:	2302      	movs	r3, #2
 800871a:	73fb      	strb	r3, [r7, #15]
      break;
 800871c:	e092      	b.n	8008844 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	791b      	ldrb	r3, [r3, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	2100      	movs	r1, #0
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 f8d5 	bl	80088d6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008732:	b29a      	uxth	r2, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2208      	movs	r2, #8
 800873c:	761a      	strb	r2, [r3, #24]

      break;
 800873e:	e086      	b.n	800884e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	791b      	ldrb	r3, [r3, #4]
 8008744:	4619      	mov	r1, r3
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 fc12 	bl	8008f70 <USBH_LL_GetURBState>
 800874c:	4603      	mov	r3, r0
 800874e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008750:	7bbb      	ldrb	r3, [r7, #14]
 8008752:	2b01      	cmp	r3, #1
 8008754:	d105      	bne.n	8008762 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	220d      	movs	r2, #13
 800875a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800875c:	2300      	movs	r3, #0
 800875e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008760:	e072      	b.n	8008848 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008762:	7bbb      	ldrb	r3, [r7, #14]
 8008764:	2b04      	cmp	r3, #4
 8008766:	d103      	bne.n	8008770 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	220b      	movs	r2, #11
 800876c:	761a      	strb	r2, [r3, #24]
      break;
 800876e:	e06b      	b.n	8008848 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008770:	7bbb      	ldrb	r3, [r7, #14]
 8008772:	2b05      	cmp	r3, #5
 8008774:	d168      	bne.n	8008848 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008776:	2303      	movs	r3, #3
 8008778:	73fb      	strb	r3, [r7, #15]
      break;
 800877a:	e065      	b.n	8008848 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	795b      	ldrb	r3, [r3, #5]
 8008780:	2201      	movs	r2, #1
 8008782:	9200      	str	r2, [sp, #0]
 8008784:	2200      	movs	r2, #0
 8008786:	2100      	movs	r1, #0
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 f87f 	bl	800888c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008794:	b29a      	uxth	r2, r3
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	220a      	movs	r2, #10
 800879e:	761a      	strb	r2, [r3, #24]
      break;
 80087a0:	e055      	b.n	800884e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	795b      	ldrb	r3, [r3, #5]
 80087a6:	4619      	mov	r1, r3
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 fbe1 	bl	8008f70 <USBH_LL_GetURBState>
 80087ae:	4603      	mov	r3, r0
 80087b0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80087b2:	7bbb      	ldrb	r3, [r7, #14]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d105      	bne.n	80087c4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80087b8:	2300      	movs	r3, #0
 80087ba:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	220d      	movs	r2, #13
 80087c0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80087c2:	e043      	b.n	800884c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80087c4:	7bbb      	ldrb	r3, [r7, #14]
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	d103      	bne.n	80087d2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2209      	movs	r2, #9
 80087ce:	761a      	strb	r2, [r3, #24]
      break;
 80087d0:	e03c      	b.n	800884c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80087d2:	7bbb      	ldrb	r3, [r7, #14]
 80087d4:	2b04      	cmp	r3, #4
 80087d6:	d139      	bne.n	800884c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	220b      	movs	r2, #11
 80087dc:	761a      	strb	r2, [r3, #24]
      break;
 80087de:	e035      	b.n	800884c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	7e5b      	ldrb	r3, [r3, #25]
 80087e4:	3301      	adds	r3, #1
 80087e6:	b2da      	uxtb	r2, r3
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	765a      	strb	r2, [r3, #25]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	7e5b      	ldrb	r3, [r3, #25]
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	d806      	bhi.n	8008802 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2201      	movs	r2, #1
 80087f8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2201      	movs	r2, #1
 80087fe:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008800:	e025      	b.n	800884e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008808:	2106      	movs	r1, #6
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	795b      	ldrb	r3, [r3, #5]
 8008818:	4619      	mov	r1, r3
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 f90c 	bl	8008a38 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	791b      	ldrb	r3, [r3, #4]
 8008824:	4619      	mov	r1, r3
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f906 	bl	8008a38 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008832:	2302      	movs	r3, #2
 8008834:	73fb      	strb	r3, [r7, #15]
      break;
 8008836:	e00a      	b.n	800884e <USBH_HandleControl+0x2de>

    default:
      break;
 8008838:	bf00      	nop
 800883a:	e008      	b.n	800884e <USBH_HandleControl+0x2de>
      break;
 800883c:	bf00      	nop
 800883e:	e006      	b.n	800884e <USBH_HandleControl+0x2de>
      break;
 8008840:	bf00      	nop
 8008842:	e004      	b.n	800884e <USBH_HandleControl+0x2de>
      break;
 8008844:	bf00      	nop
 8008846:	e002      	b.n	800884e <USBH_HandleControl+0x2de>
      break;
 8008848:	bf00      	nop
 800884a:	e000      	b.n	800884e <USBH_HandleControl+0x2de>
      break;
 800884c:	bf00      	nop
  }

  return status;
 800884e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008850:	4618      	mov	r0, r3
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b088      	sub	sp, #32
 800885c:	af04      	add	r7, sp, #16
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	4613      	mov	r3, r2
 8008864:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008866:	79f9      	ldrb	r1, [r7, #7]
 8008868:	2300      	movs	r3, #0
 800886a:	9303      	str	r3, [sp, #12]
 800886c:	2308      	movs	r3, #8
 800886e:	9302      	str	r3, [sp, #8]
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	9301      	str	r3, [sp, #4]
 8008874:	2300      	movs	r3, #0
 8008876:	9300      	str	r3, [sp, #0]
 8008878:	2300      	movs	r3, #0
 800887a:	2200      	movs	r2, #0
 800887c:	68f8      	ldr	r0, [r7, #12]
 800887e:	f000 fb46 	bl	8008f0e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008882:	2300      	movs	r3, #0
}
 8008884:	4618      	mov	r0, r3
 8008886:	3710      	adds	r7, #16
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b088      	sub	sp, #32
 8008890:	af04      	add	r7, sp, #16
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	60b9      	str	r1, [r7, #8]
 8008896:	4611      	mov	r1, r2
 8008898:	461a      	mov	r2, r3
 800889a:	460b      	mov	r3, r1
 800889c:	80fb      	strh	r3, [r7, #6]
 800889e:	4613      	mov	r3, r2
 80088a0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d001      	beq.n	80088b0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80088ac:	2300      	movs	r3, #0
 80088ae:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80088b0:	7979      	ldrb	r1, [r7, #5]
 80088b2:	7e3b      	ldrb	r3, [r7, #24]
 80088b4:	9303      	str	r3, [sp, #12]
 80088b6:	88fb      	ldrh	r3, [r7, #6]
 80088b8:	9302      	str	r3, [sp, #8]
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	9301      	str	r3, [sp, #4]
 80088be:	2301      	movs	r3, #1
 80088c0:	9300      	str	r3, [sp, #0]
 80088c2:	2300      	movs	r3, #0
 80088c4:	2200      	movs	r2, #0
 80088c6:	68f8      	ldr	r0, [r7, #12]
 80088c8:	f000 fb21 	bl	8008f0e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b088      	sub	sp, #32
 80088da:	af04      	add	r7, sp, #16
 80088dc:	60f8      	str	r0, [r7, #12]
 80088de:	60b9      	str	r1, [r7, #8]
 80088e0:	4611      	mov	r1, r2
 80088e2:	461a      	mov	r2, r3
 80088e4:	460b      	mov	r3, r1
 80088e6:	80fb      	strh	r3, [r7, #6]
 80088e8:	4613      	mov	r3, r2
 80088ea:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80088ec:	7979      	ldrb	r1, [r7, #5]
 80088ee:	2300      	movs	r3, #0
 80088f0:	9303      	str	r3, [sp, #12]
 80088f2:	88fb      	ldrh	r3, [r7, #6]
 80088f4:	9302      	str	r3, [sp, #8]
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	9301      	str	r3, [sp, #4]
 80088fa:	2301      	movs	r3, #1
 80088fc:	9300      	str	r3, [sp, #0]
 80088fe:	2300      	movs	r3, #0
 8008900:	2201      	movs	r2, #1
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	f000 fb03 	bl	8008f0e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008908:	2300      	movs	r3, #0

}
 800890a:	4618      	mov	r0, r3
 800890c:	3710      	adds	r7, #16
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}

08008912 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008912:	b580      	push	{r7, lr}
 8008914:	b088      	sub	sp, #32
 8008916:	af04      	add	r7, sp, #16
 8008918:	60f8      	str	r0, [r7, #12]
 800891a:	60b9      	str	r1, [r7, #8]
 800891c:	4611      	mov	r1, r2
 800891e:	461a      	mov	r2, r3
 8008920:	460b      	mov	r3, r1
 8008922:	80fb      	strh	r3, [r7, #6]
 8008924:	4613      	mov	r3, r2
 8008926:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800892e:	2b00      	cmp	r3, #0
 8008930:	d001      	beq.n	8008936 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008932:	2300      	movs	r3, #0
 8008934:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008936:	7979      	ldrb	r1, [r7, #5]
 8008938:	7e3b      	ldrb	r3, [r7, #24]
 800893a:	9303      	str	r3, [sp, #12]
 800893c:	88fb      	ldrh	r3, [r7, #6]
 800893e:	9302      	str	r3, [sp, #8]
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	9301      	str	r3, [sp, #4]
 8008944:	2301      	movs	r3, #1
 8008946:	9300      	str	r3, [sp, #0]
 8008948:	2302      	movs	r3, #2
 800894a:	2200      	movs	r2, #0
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f000 fade 	bl	8008f0e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008952:	2300      	movs	r3, #0
}
 8008954:	4618      	mov	r0, r3
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b088      	sub	sp, #32
 8008960:	af04      	add	r7, sp, #16
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	4611      	mov	r1, r2
 8008968:	461a      	mov	r2, r3
 800896a:	460b      	mov	r3, r1
 800896c:	80fb      	strh	r3, [r7, #6]
 800896e:	4613      	mov	r3, r2
 8008970:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008972:	7979      	ldrb	r1, [r7, #5]
 8008974:	2300      	movs	r3, #0
 8008976:	9303      	str	r3, [sp, #12]
 8008978:	88fb      	ldrh	r3, [r7, #6]
 800897a:	9302      	str	r3, [sp, #8]
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	9301      	str	r3, [sp, #4]
 8008980:	2301      	movs	r3, #1
 8008982:	9300      	str	r3, [sp, #0]
 8008984:	2302      	movs	r3, #2
 8008986:	2201      	movs	r2, #1
 8008988:	68f8      	ldr	r0, [r7, #12]
 800898a:	f000 fac0 	bl	8008f0e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800898e:	2300      	movs	r3, #0
}
 8008990:	4618      	mov	r0, r3
 8008992:	3710      	adds	r7, #16
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b086      	sub	sp, #24
 800899c:	af04      	add	r7, sp, #16
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	4608      	mov	r0, r1
 80089a2:	4611      	mov	r1, r2
 80089a4:	461a      	mov	r2, r3
 80089a6:	4603      	mov	r3, r0
 80089a8:	70fb      	strb	r3, [r7, #3]
 80089aa:	460b      	mov	r3, r1
 80089ac:	70bb      	strb	r3, [r7, #2]
 80089ae:	4613      	mov	r3, r2
 80089b0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80089b2:	7878      	ldrb	r0, [r7, #1]
 80089b4:	78ba      	ldrb	r2, [r7, #2]
 80089b6:	78f9      	ldrb	r1, [r7, #3]
 80089b8:	8b3b      	ldrh	r3, [r7, #24]
 80089ba:	9302      	str	r3, [sp, #8]
 80089bc:	7d3b      	ldrb	r3, [r7, #20]
 80089be:	9301      	str	r3, [sp, #4]
 80089c0:	7c3b      	ldrb	r3, [r7, #16]
 80089c2:	9300      	str	r3, [sp, #0]
 80089c4:	4603      	mov	r3, r0
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 fa53 	bl	8008e72 <USBH_LL_OpenPipe>

  return USBH_OK;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3708      	adds	r7, #8
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b082      	sub	sp, #8
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
 80089de:	460b      	mov	r3, r1
 80089e0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80089e2:	78fb      	ldrb	r3, [r7, #3]
 80089e4:	4619      	mov	r1, r3
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 fa72 	bl	8008ed0 <USBH_LL_ClosePipe>

  return USBH_OK;
 80089ec:	2300      	movs	r3, #0
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3708      	adds	r7, #8
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b084      	sub	sp, #16
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
 80089fe:	460b      	mov	r3, r1
 8008a00:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 f836 	bl	8008a74 <USBH_GetFreePipe>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008a0c:	89fb      	ldrh	r3, [r7, #14]
 8008a0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d00a      	beq.n	8008a2c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008a16:	78fa      	ldrb	r2, [r7, #3]
 8008a18:	89fb      	ldrh	r3, [r7, #14]
 8008a1a:	f003 030f 	and.w	r3, r3, #15
 8008a1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a22:	6879      	ldr	r1, [r7, #4]
 8008a24:	33e0      	adds	r3, #224	; 0xe0
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	440b      	add	r3, r1
 8008a2a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008a2c:	89fb      	ldrh	r3, [r7, #14]
 8008a2e:	b2db      	uxtb	r3, r3
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3710      	adds	r7, #16
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	460b      	mov	r3, r1
 8008a42:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008a44:	78fb      	ldrb	r3, [r7, #3]
 8008a46:	2b0f      	cmp	r3, #15
 8008a48:	d80d      	bhi.n	8008a66 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008a4a:	78fb      	ldrb	r3, [r7, #3]
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	33e0      	adds	r3, #224	; 0xe0
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	4413      	add	r3, r2
 8008a54:	685a      	ldr	r2, [r3, #4]
 8008a56:	78fb      	ldrb	r3, [r7, #3]
 8008a58:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008a5c:	6879      	ldr	r1, [r7, #4]
 8008a5e:	33e0      	adds	r3, #224	; 0xe0
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	440b      	add	r3, r1
 8008a64:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008a66:	2300      	movs	r3, #0
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	370c      	adds	r7, #12
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b085      	sub	sp, #20
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008a80:	2300      	movs	r3, #0
 8008a82:	73fb      	strb	r3, [r7, #15]
 8008a84:	e00f      	b.n	8008aa6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008a86:	7bfb      	ldrb	r3, [r7, #15]
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	33e0      	adds	r3, #224	; 0xe0
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	4413      	add	r3, r2
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d102      	bne.n	8008aa0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008a9a:	7bfb      	ldrb	r3, [r7, #15]
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	e007      	b.n	8008ab0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008aa0:	7bfb      	ldrb	r3, [r7, #15]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	73fb      	strb	r3, [r7, #15]
 8008aa6:	7bfb      	ldrb	r3, [r7, #15]
 8008aa8:	2b0f      	cmp	r3, #15
 8008aaa:	d9ec      	bls.n	8008a86 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008aac:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3714      	adds	r7, #20
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	490e      	ldr	r1, [pc, #56]	; (8008afc <MX_USB_HOST_Init+0x40>)
 8008ac4:	480e      	ldr	r0, [pc, #56]	; (8008b00 <MX_USB_HOST_Init+0x44>)
 8008ac6:	f7fe fba7 	bl	8007218 <USBH_Init>
 8008aca:	4603      	mov	r3, r0
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d001      	beq.n	8008ad4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008ad0:	f7f8 fd7c 	bl	80015cc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008ad4:	490b      	ldr	r1, [pc, #44]	; (8008b04 <MX_USB_HOST_Init+0x48>)
 8008ad6:	480a      	ldr	r0, [pc, #40]	; (8008b00 <MX_USB_HOST_Init+0x44>)
 8008ad8:	f7fe fc2c 	bl	8007334 <USBH_RegisterClass>
 8008adc:	4603      	mov	r3, r0
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d001      	beq.n	8008ae6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008ae2:	f7f8 fd73 	bl	80015cc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008ae6:	4806      	ldr	r0, [pc, #24]	; (8008b00 <MX_USB_HOST_Init+0x44>)
 8008ae8:	f7fe fcb0 	bl	800744c <USBH_Start>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d001      	beq.n	8008af6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008af2:	f7f8 fd6b 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008af6:	bf00      	nop
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop
 8008afc:	08008b1d 	.word	0x08008b1d
 8008b00:	2000025c 	.word	0x2000025c
 8008b04:	2000000c 	.word	0x2000000c

08008b08 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008b0c:	4802      	ldr	r0, [pc, #8]	; (8008b18 <MX_USB_HOST_Process+0x10>)
 8008b0e:	f7fe fcad 	bl	800746c <USBH_Process>
}
 8008b12:	bf00      	nop
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	2000025c 	.word	0x2000025c

08008b1c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	460b      	mov	r3, r1
 8008b26:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008b28:	78fb      	ldrb	r3, [r7, #3]
 8008b2a:	3b01      	subs	r3, #1
 8008b2c:	2b04      	cmp	r3, #4
 8008b2e:	d819      	bhi.n	8008b64 <USBH_UserProcess+0x48>
 8008b30:	a201      	add	r2, pc, #4	; (adr r2, 8008b38 <USBH_UserProcess+0x1c>)
 8008b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b36:	bf00      	nop
 8008b38:	08008b65 	.word	0x08008b65
 8008b3c:	08008b55 	.word	0x08008b55
 8008b40:	08008b65 	.word	0x08008b65
 8008b44:	08008b5d 	.word	0x08008b5d
 8008b48:	08008b4d 	.word	0x08008b4d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008b4c:	4b09      	ldr	r3, [pc, #36]	; (8008b74 <USBH_UserProcess+0x58>)
 8008b4e:	2203      	movs	r2, #3
 8008b50:	701a      	strb	r2, [r3, #0]
  break;
 8008b52:	e008      	b.n	8008b66 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008b54:	4b07      	ldr	r3, [pc, #28]	; (8008b74 <USBH_UserProcess+0x58>)
 8008b56:	2202      	movs	r2, #2
 8008b58:	701a      	strb	r2, [r3, #0]
  break;
 8008b5a:	e004      	b.n	8008b66 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008b5c:	4b05      	ldr	r3, [pc, #20]	; (8008b74 <USBH_UserProcess+0x58>)
 8008b5e:	2201      	movs	r2, #1
 8008b60:	701a      	strb	r2, [r3, #0]
  break;
 8008b62:	e000      	b.n	8008b66 <USBH_UserProcess+0x4a>

  default:
  break;
 8008b64:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008b66:	bf00      	nop
 8008b68:	370c      	adds	r7, #12
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop
 8008b74:	20000634 	.word	0x20000634

08008b78 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b08a      	sub	sp, #40	; 0x28
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b80:	f107 0314 	add.w	r3, r7, #20
 8008b84:	2200      	movs	r2, #0
 8008b86:	601a      	str	r2, [r3, #0]
 8008b88:	605a      	str	r2, [r3, #4]
 8008b8a:	609a      	str	r2, [r3, #8]
 8008b8c:	60da      	str	r2, [r3, #12]
 8008b8e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b98:	d147      	bne.n	8008c2a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	613b      	str	r3, [r7, #16]
 8008b9e:	4b25      	ldr	r3, [pc, #148]	; (8008c34 <HAL_HCD_MspInit+0xbc>)
 8008ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba2:	4a24      	ldr	r2, [pc, #144]	; (8008c34 <HAL_HCD_MspInit+0xbc>)
 8008ba4:	f043 0301 	orr.w	r3, r3, #1
 8008ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8008baa:	4b22      	ldr	r3, [pc, #136]	; (8008c34 <HAL_HCD_MspInit+0xbc>)
 8008bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bae:	f003 0301 	and.w	r3, r3, #1
 8008bb2:	613b      	str	r3, [r7, #16]
 8008bb4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008bb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008bc4:	f107 0314 	add.w	r3, r7, #20
 8008bc8:	4619      	mov	r1, r3
 8008bca:	481b      	ldr	r0, [pc, #108]	; (8008c38 <HAL_HCD_MspInit+0xc0>)
 8008bcc:	f7f9 f8fe 	bl	8001dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008bd0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bd6:	2302      	movs	r3, #2
 8008bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008bde:	2303      	movs	r3, #3
 8008be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008be2:	230a      	movs	r3, #10
 8008be4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008be6:	f107 0314 	add.w	r3, r7, #20
 8008bea:	4619      	mov	r1, r3
 8008bec:	4812      	ldr	r0, [pc, #72]	; (8008c38 <HAL_HCD_MspInit+0xc0>)
 8008bee:	f7f9 f8ed 	bl	8001dcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008bf2:	4b10      	ldr	r3, [pc, #64]	; (8008c34 <HAL_HCD_MspInit+0xbc>)
 8008bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bf6:	4a0f      	ldr	r2, [pc, #60]	; (8008c34 <HAL_HCD_MspInit+0xbc>)
 8008bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bfc:	6353      	str	r3, [r2, #52]	; 0x34
 8008bfe:	2300      	movs	r3, #0
 8008c00:	60fb      	str	r3, [r7, #12]
 8008c02:	4b0c      	ldr	r3, [pc, #48]	; (8008c34 <HAL_HCD_MspInit+0xbc>)
 8008c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c06:	4a0b      	ldr	r2, [pc, #44]	; (8008c34 <HAL_HCD_MspInit+0xbc>)
 8008c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8008c0e:	4b09      	ldr	r3, [pc, #36]	; (8008c34 <HAL_HCD_MspInit+0xbc>)
 8008c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c16:	60fb      	str	r3, [r7, #12]
 8008c18:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	2043      	movs	r0, #67	; 0x43
 8008c20:	f7f9 f89d 	bl	8001d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008c24:	2043      	movs	r0, #67	; 0x43
 8008c26:	f7f9 f8b6 	bl	8001d96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008c2a:	bf00      	nop
 8008c2c:	3728      	adds	r7, #40	; 0x28
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	40023800 	.word	0x40023800
 8008c38:	40020000 	.word	0x40020000

08008c3c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7fe ffed 	bl	8007c2a <USBH_LL_IncTimer>
}
 8008c50:	bf00      	nop
 8008c52:	3708      	adds	r7, #8
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7ff f825 	bl	8007cb6 <USBH_LL_Connect>
}
 8008c6c:	bf00      	nop
 8008c6e:	3708      	adds	r7, #8
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7ff f82e 	bl	8007ce4 <USBH_LL_Disconnect>
}
 8008c88:	bf00      	nop
 8008c8a:	3708      	adds	r7, #8
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	460b      	mov	r3, r1
 8008c9a:	70fb      	strb	r3, [r7, #3]
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7fe ffdf 	bl	8007c7e <USBH_LL_PortEnabled>
}
 8008cc0:	bf00      	nop
 8008cc2:	3708      	adds	r7, #8
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7fe ffdf 	bl	8007c9a <USBH_LL_PortDisabled>
}
 8008cdc:	bf00      	nop
 8008cde:	3708      	adds	r7, #8
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d12a      	bne.n	8008d4c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008cf6:	4a18      	ldr	r2, [pc, #96]	; (8008d58 <USBH_LL_Init+0x74>)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4a15      	ldr	r2, [pc, #84]	; (8008d58 <USBH_LL_Init+0x74>)
 8008d02:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008d06:	4b14      	ldr	r3, [pc, #80]	; (8008d58 <USBH_LL_Init+0x74>)
 8008d08:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008d0c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008d0e:	4b12      	ldr	r3, [pc, #72]	; (8008d58 <USBH_LL_Init+0x74>)
 8008d10:	2208      	movs	r2, #8
 8008d12:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008d14:	4b10      	ldr	r3, [pc, #64]	; (8008d58 <USBH_LL_Init+0x74>)
 8008d16:	2201      	movs	r2, #1
 8008d18:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008d1a:	4b0f      	ldr	r3, [pc, #60]	; (8008d58 <USBH_LL_Init+0x74>)
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008d20:	4b0d      	ldr	r3, [pc, #52]	; (8008d58 <USBH_LL_Init+0x74>)
 8008d22:	2202      	movs	r2, #2
 8008d24:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008d26:	4b0c      	ldr	r3, [pc, #48]	; (8008d58 <USBH_LL_Init+0x74>)
 8008d28:	2200      	movs	r2, #0
 8008d2a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008d2c:	480a      	ldr	r0, [pc, #40]	; (8008d58 <USBH_LL_Init+0x74>)
 8008d2e:	f7f9 fa03 	bl	8002138 <HAL_HCD_Init>
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d001      	beq.n	8008d3c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008d38:	f7f8 fc48 	bl	80015cc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008d3c:	4806      	ldr	r0, [pc, #24]	; (8008d58 <USBH_LL_Init+0x74>)
 8008d3e:	f7f9 fde6 	bl	800290e <HAL_HCD_GetCurrentFrame>
 8008d42:	4603      	mov	r3, r0
 8008d44:	4619      	mov	r1, r3
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f7fe ff60 	bl	8007c0c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3708      	adds	r7, #8
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	20000638 	.word	0x20000638

08008d5c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d64:	2300      	movs	r3, #0
 8008d66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7f9 fd55 	bl	8002822 <HAL_HCD_Start>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d7c:	7bfb      	ldrb	r3, [r7, #15]
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f000 f95c 	bl	800903c <USBH_Get_USB_Status>
 8008d84:	4603      	mov	r3, r0
 8008d86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d88:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3710      	adds	r7, #16
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}

08008d92 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b084      	sub	sp, #16
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7f9 fd5d 	bl	8002868 <HAL_HCD_Stop>
 8008dae:	4603      	mov	r3, r0
 8008db0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008db2:	7bfb      	ldrb	r3, [r7, #15]
 8008db4:	4618      	mov	r0, r3
 8008db6:	f000 f941 	bl	800903c <USBH_Get_USB_Status>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7f9 fda5 	bl	800292a <HAL_HCD_GetCurrentSpeed>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b02      	cmp	r3, #2
 8008de4:	d00c      	beq.n	8008e00 <USBH_LL_GetSpeed+0x38>
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	d80d      	bhi.n	8008e06 <USBH_LL_GetSpeed+0x3e>
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d002      	beq.n	8008df4 <USBH_LL_GetSpeed+0x2c>
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d003      	beq.n	8008dfa <USBH_LL_GetSpeed+0x32>
 8008df2:	e008      	b.n	8008e06 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008df4:	2300      	movs	r3, #0
 8008df6:	73fb      	strb	r3, [r7, #15]
    break;
 8008df8:	e008      	b.n	8008e0c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	73fb      	strb	r3, [r7, #15]
    break;
 8008dfe:	e005      	b.n	8008e0c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008e00:	2302      	movs	r3, #2
 8008e02:	73fb      	strb	r3, [r7, #15]
    break;
 8008e04:	e002      	b.n	8008e0c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008e06:	2301      	movs	r3, #1
 8008e08:	73fb      	strb	r3, [r7, #15]
    break;
 8008e0a:	bf00      	nop
  }
  return  speed;
 8008e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3710      	adds	r7, #16
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b084      	sub	sp, #16
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e22:	2300      	movs	r3, #0
 8008e24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f7f9 fd38 	bl	80028a2 <HAL_HCD_ResetPort>
 8008e32:	4603      	mov	r3, r0
 8008e34:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e36:	7bfb      	ldrb	r3, [r7, #15]
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f000 f8ff 	bl	800903c <USBH_Get_USB_Status>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e42:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3710      	adds	r7, #16
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	460b      	mov	r3, r1
 8008e56:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e5e:	78fa      	ldrb	r2, [r7, #3]
 8008e60:	4611      	mov	r1, r2
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7f9 fd3f 	bl	80028e6 <HAL_HCD_HC_GetXferCount>
 8008e68:	4603      	mov	r3, r0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3708      	adds	r7, #8
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008e72:	b590      	push	{r4, r7, lr}
 8008e74:	b089      	sub	sp, #36	; 0x24
 8008e76:	af04      	add	r7, sp, #16
 8008e78:	6078      	str	r0, [r7, #4]
 8008e7a:	4608      	mov	r0, r1
 8008e7c:	4611      	mov	r1, r2
 8008e7e:	461a      	mov	r2, r3
 8008e80:	4603      	mov	r3, r0
 8008e82:	70fb      	strb	r3, [r7, #3]
 8008e84:	460b      	mov	r3, r1
 8008e86:	70bb      	strb	r3, [r7, #2]
 8008e88:	4613      	mov	r3, r2
 8008e8a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e90:	2300      	movs	r3, #0
 8008e92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008e9a:	787c      	ldrb	r4, [r7, #1]
 8008e9c:	78ba      	ldrb	r2, [r7, #2]
 8008e9e:	78f9      	ldrb	r1, [r7, #3]
 8008ea0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008ea2:	9302      	str	r3, [sp, #8]
 8008ea4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008ea8:	9301      	str	r3, [sp, #4]
 8008eaa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008eae:	9300      	str	r3, [sp, #0]
 8008eb0:	4623      	mov	r3, r4
 8008eb2:	f7f9 f9a3 	bl	80021fc <HAL_HCD_HC_Init>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008eba:	7bfb      	ldrb	r3, [r7, #15]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f000 f8bd 	bl	800903c <USBH_Get_USB_Status>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ec6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3714      	adds	r7, #20
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd90      	pop	{r4, r7, pc}

08008ed0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	460b      	mov	r3, r1
 8008eda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008edc:	2300      	movs	r3, #0
 8008ede:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008eea:	78fa      	ldrb	r2, [r7, #3]
 8008eec:	4611      	mov	r1, r2
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7f9 fa13 	bl	800231a <HAL_HCD_HC_Halt>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ef8:	7bfb      	ldrb	r3, [r7, #15]
 8008efa:	4618      	mov	r0, r3
 8008efc:	f000 f89e 	bl	800903c <USBH_Get_USB_Status>
 8008f00:	4603      	mov	r3, r0
 8008f02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f04:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}

08008f0e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008f0e:	b590      	push	{r4, r7, lr}
 8008f10:	b089      	sub	sp, #36	; 0x24
 8008f12:	af04      	add	r7, sp, #16
 8008f14:	6078      	str	r0, [r7, #4]
 8008f16:	4608      	mov	r0, r1
 8008f18:	4611      	mov	r1, r2
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	70fb      	strb	r3, [r7, #3]
 8008f20:	460b      	mov	r3, r1
 8008f22:	70bb      	strb	r3, [r7, #2]
 8008f24:	4613      	mov	r3, r2
 8008f26:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008f36:	787c      	ldrb	r4, [r7, #1]
 8008f38:	78ba      	ldrb	r2, [r7, #2]
 8008f3a:	78f9      	ldrb	r1, [r7, #3]
 8008f3c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008f40:	9303      	str	r3, [sp, #12]
 8008f42:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008f44:	9302      	str	r3, [sp, #8]
 8008f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f48:	9301      	str	r3, [sp, #4]
 8008f4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008f4e:	9300      	str	r3, [sp, #0]
 8008f50:	4623      	mov	r3, r4
 8008f52:	f7f9 fa05 	bl	8002360 <HAL_HCD_HC_SubmitRequest>
 8008f56:	4603      	mov	r3, r0
 8008f58:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008f5a:	7bfb      	ldrb	r3, [r7, #15]
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f000 f86d 	bl	800903c <USBH_Get_USB_Status>
 8008f62:	4603      	mov	r3, r0
 8008f64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f66:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3714      	adds	r7, #20
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd90      	pop	{r4, r7, pc}

08008f70 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	460b      	mov	r3, r1
 8008f7a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f82:	78fa      	ldrb	r2, [r7, #3]
 8008f84:	4611      	mov	r1, r2
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7f9 fc99 	bl	80028be <HAL_HCD_HC_GetURBState>
 8008f8c:	4603      	mov	r3, r0
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3708      	adds	r7, #8
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}

08008f96 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b082      	sub	sp, #8
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d103      	bne.n	8008fb4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008fac:	78fb      	ldrb	r3, [r7, #3]
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f000 f870 	bl	8009094 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008fb4:	20c8      	movs	r0, #200	; 0xc8
 8008fb6:	f7f8 fdd3 	bl	8001b60 <HAL_Delay>
  return USBH_OK;
 8008fba:	2300      	movs	r3, #0
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3708      	adds	r7, #8
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b085      	sub	sp, #20
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	460b      	mov	r3, r1
 8008fce:	70fb      	strb	r3, [r7, #3]
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008fda:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008fdc:	78fb      	ldrb	r3, [r7, #3]
 8008fde:	68fa      	ldr	r2, [r7, #12]
 8008fe0:	212c      	movs	r1, #44	; 0x2c
 8008fe2:	fb01 f303 	mul.w	r3, r1, r3
 8008fe6:	4413      	add	r3, r2
 8008fe8:	333b      	adds	r3, #59	; 0x3b
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d009      	beq.n	8009004 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008ff0:	78fb      	ldrb	r3, [r7, #3]
 8008ff2:	68fa      	ldr	r2, [r7, #12]
 8008ff4:	212c      	movs	r1, #44	; 0x2c
 8008ff6:	fb01 f303 	mul.w	r3, r1, r3
 8008ffa:	4413      	add	r3, r2
 8008ffc:	3354      	adds	r3, #84	; 0x54
 8008ffe:	78ba      	ldrb	r2, [r7, #2]
 8009000:	701a      	strb	r2, [r3, #0]
 8009002:	e008      	b.n	8009016 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009004:	78fb      	ldrb	r3, [r7, #3]
 8009006:	68fa      	ldr	r2, [r7, #12]
 8009008:	212c      	movs	r1, #44	; 0x2c
 800900a:	fb01 f303 	mul.w	r3, r1, r3
 800900e:	4413      	add	r3, r2
 8009010:	3355      	adds	r3, #85	; 0x55
 8009012:	78ba      	ldrb	r2, [r7, #2]
 8009014:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009016:	2300      	movs	r3, #0
}
 8009018:	4618      	mov	r0, r3
 800901a:	3714      	adds	r7, #20
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f7f8 fd97 	bl	8001b60 <HAL_Delay>
}
 8009032:	bf00      	nop
 8009034:	3708      	adds	r7, #8
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
	...

0800903c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800903c:	b480      	push	{r7}
 800903e:	b085      	sub	sp, #20
 8009040:	af00      	add	r7, sp, #0
 8009042:	4603      	mov	r3, r0
 8009044:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009046:	2300      	movs	r3, #0
 8009048:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800904a:	79fb      	ldrb	r3, [r7, #7]
 800904c:	2b03      	cmp	r3, #3
 800904e:	d817      	bhi.n	8009080 <USBH_Get_USB_Status+0x44>
 8009050:	a201      	add	r2, pc, #4	; (adr r2, 8009058 <USBH_Get_USB_Status+0x1c>)
 8009052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009056:	bf00      	nop
 8009058:	08009069 	.word	0x08009069
 800905c:	0800906f 	.word	0x0800906f
 8009060:	08009075 	.word	0x08009075
 8009064:	0800907b 	.word	0x0800907b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009068:	2300      	movs	r3, #0
 800906a:	73fb      	strb	r3, [r7, #15]
    break;
 800906c:	e00b      	b.n	8009086 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800906e:	2302      	movs	r3, #2
 8009070:	73fb      	strb	r3, [r7, #15]
    break;
 8009072:	e008      	b.n	8009086 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009074:	2301      	movs	r3, #1
 8009076:	73fb      	strb	r3, [r7, #15]
    break;
 8009078:	e005      	b.n	8009086 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800907a:	2302      	movs	r3, #2
 800907c:	73fb      	strb	r3, [r7, #15]
    break;
 800907e:	e002      	b.n	8009086 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009080:	2302      	movs	r3, #2
 8009082:	73fb      	strb	r3, [r7, #15]
    break;
 8009084:	bf00      	nop
  }
  return usb_status;
 8009086:	7bfb      	ldrb	r3, [r7, #15]
}
 8009088:	4618      	mov	r0, r3
 800908a:	3714      	adds	r7, #20
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr

08009094 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b084      	sub	sp, #16
 8009098:	af00      	add	r7, sp, #0
 800909a:	4603      	mov	r3, r0
 800909c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800909e:	79fb      	ldrb	r3, [r7, #7]
 80090a0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80090a2:	79fb      	ldrb	r3, [r7, #7]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d102      	bne.n	80090ae <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80090a8:	2300      	movs	r3, #0
 80090aa:	73fb      	strb	r3, [r7, #15]
 80090ac:	e001      	b.n	80090b2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80090ae:	2301      	movs	r3, #1
 80090b0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80090b2:	7bfb      	ldrb	r3, [r7, #15]
 80090b4:	461a      	mov	r2, r3
 80090b6:	2101      	movs	r1, #1
 80090b8:	4803      	ldr	r0, [pc, #12]	; (80090c8 <MX_DriverVbusFS+0x34>)
 80090ba:	f7f9 f80b 	bl	80020d4 <HAL_GPIO_WritePin>
}
 80090be:	bf00      	nop
 80090c0:	3710      	adds	r7, #16
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	bf00      	nop
 80090c8:	40020800 	.word	0x40020800

080090cc <__errno>:
 80090cc:	4b01      	ldr	r3, [pc, #4]	; (80090d4 <__errno+0x8>)
 80090ce:	6818      	ldr	r0, [r3, #0]
 80090d0:	4770      	bx	lr
 80090d2:	bf00      	nop
 80090d4:	2000002c 	.word	0x2000002c

080090d8 <__libc_init_array>:
 80090d8:	b570      	push	{r4, r5, r6, lr}
 80090da:	4d0d      	ldr	r5, [pc, #52]	; (8009110 <__libc_init_array+0x38>)
 80090dc:	4c0d      	ldr	r4, [pc, #52]	; (8009114 <__libc_init_array+0x3c>)
 80090de:	1b64      	subs	r4, r4, r5
 80090e0:	10a4      	asrs	r4, r4, #2
 80090e2:	2600      	movs	r6, #0
 80090e4:	42a6      	cmp	r6, r4
 80090e6:	d109      	bne.n	80090fc <__libc_init_array+0x24>
 80090e8:	4d0b      	ldr	r5, [pc, #44]	; (8009118 <__libc_init_array+0x40>)
 80090ea:	4c0c      	ldr	r4, [pc, #48]	; (800911c <__libc_init_array+0x44>)
 80090ec:	f000 fcb8 	bl	8009a60 <_init>
 80090f0:	1b64      	subs	r4, r4, r5
 80090f2:	10a4      	asrs	r4, r4, #2
 80090f4:	2600      	movs	r6, #0
 80090f6:	42a6      	cmp	r6, r4
 80090f8:	d105      	bne.n	8009106 <__libc_init_array+0x2e>
 80090fa:	bd70      	pop	{r4, r5, r6, pc}
 80090fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009100:	4798      	blx	r3
 8009102:	3601      	adds	r6, #1
 8009104:	e7ee      	b.n	80090e4 <__libc_init_array+0xc>
 8009106:	f855 3b04 	ldr.w	r3, [r5], #4
 800910a:	4798      	blx	r3
 800910c:	3601      	adds	r6, #1
 800910e:	e7f2      	b.n	80090f6 <__libc_init_array+0x1e>
 8009110:	0800a258 	.word	0x0800a258
 8009114:	0800a258 	.word	0x0800a258
 8009118:	0800a258 	.word	0x0800a258
 800911c:	0800a25c 	.word	0x0800a25c

08009120 <malloc>:
 8009120:	4b02      	ldr	r3, [pc, #8]	; (800912c <malloc+0xc>)
 8009122:	4601      	mov	r1, r0
 8009124:	6818      	ldr	r0, [r3, #0]
 8009126:	f000 b87f 	b.w	8009228 <_malloc_r>
 800912a:	bf00      	nop
 800912c:	2000002c 	.word	0x2000002c

08009130 <free>:
 8009130:	4b02      	ldr	r3, [pc, #8]	; (800913c <free+0xc>)
 8009132:	4601      	mov	r1, r0
 8009134:	6818      	ldr	r0, [r3, #0]
 8009136:	f000 b80b 	b.w	8009150 <_free_r>
 800913a:	bf00      	nop
 800913c:	2000002c 	.word	0x2000002c

08009140 <memset>:
 8009140:	4402      	add	r2, r0
 8009142:	4603      	mov	r3, r0
 8009144:	4293      	cmp	r3, r2
 8009146:	d100      	bne.n	800914a <memset+0xa>
 8009148:	4770      	bx	lr
 800914a:	f803 1b01 	strb.w	r1, [r3], #1
 800914e:	e7f9      	b.n	8009144 <memset+0x4>

08009150 <_free_r>:
 8009150:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009152:	2900      	cmp	r1, #0
 8009154:	d044      	beq.n	80091e0 <_free_r+0x90>
 8009156:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800915a:	9001      	str	r0, [sp, #4]
 800915c:	2b00      	cmp	r3, #0
 800915e:	f1a1 0404 	sub.w	r4, r1, #4
 8009162:	bfb8      	it	lt
 8009164:	18e4      	addlt	r4, r4, r3
 8009166:	f000 f91d 	bl	80093a4 <__malloc_lock>
 800916a:	4a1e      	ldr	r2, [pc, #120]	; (80091e4 <_free_r+0x94>)
 800916c:	9801      	ldr	r0, [sp, #4]
 800916e:	6813      	ldr	r3, [r2, #0]
 8009170:	b933      	cbnz	r3, 8009180 <_free_r+0x30>
 8009172:	6063      	str	r3, [r4, #4]
 8009174:	6014      	str	r4, [r2, #0]
 8009176:	b003      	add	sp, #12
 8009178:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800917c:	f000 b918 	b.w	80093b0 <__malloc_unlock>
 8009180:	42a3      	cmp	r3, r4
 8009182:	d908      	bls.n	8009196 <_free_r+0x46>
 8009184:	6825      	ldr	r5, [r4, #0]
 8009186:	1961      	adds	r1, r4, r5
 8009188:	428b      	cmp	r3, r1
 800918a:	bf01      	itttt	eq
 800918c:	6819      	ldreq	r1, [r3, #0]
 800918e:	685b      	ldreq	r3, [r3, #4]
 8009190:	1949      	addeq	r1, r1, r5
 8009192:	6021      	streq	r1, [r4, #0]
 8009194:	e7ed      	b.n	8009172 <_free_r+0x22>
 8009196:	461a      	mov	r2, r3
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	b10b      	cbz	r3, 80091a0 <_free_r+0x50>
 800919c:	42a3      	cmp	r3, r4
 800919e:	d9fa      	bls.n	8009196 <_free_r+0x46>
 80091a0:	6811      	ldr	r1, [r2, #0]
 80091a2:	1855      	adds	r5, r2, r1
 80091a4:	42a5      	cmp	r5, r4
 80091a6:	d10b      	bne.n	80091c0 <_free_r+0x70>
 80091a8:	6824      	ldr	r4, [r4, #0]
 80091aa:	4421      	add	r1, r4
 80091ac:	1854      	adds	r4, r2, r1
 80091ae:	42a3      	cmp	r3, r4
 80091b0:	6011      	str	r1, [r2, #0]
 80091b2:	d1e0      	bne.n	8009176 <_free_r+0x26>
 80091b4:	681c      	ldr	r4, [r3, #0]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	6053      	str	r3, [r2, #4]
 80091ba:	4421      	add	r1, r4
 80091bc:	6011      	str	r1, [r2, #0]
 80091be:	e7da      	b.n	8009176 <_free_r+0x26>
 80091c0:	d902      	bls.n	80091c8 <_free_r+0x78>
 80091c2:	230c      	movs	r3, #12
 80091c4:	6003      	str	r3, [r0, #0]
 80091c6:	e7d6      	b.n	8009176 <_free_r+0x26>
 80091c8:	6825      	ldr	r5, [r4, #0]
 80091ca:	1961      	adds	r1, r4, r5
 80091cc:	428b      	cmp	r3, r1
 80091ce:	bf04      	itt	eq
 80091d0:	6819      	ldreq	r1, [r3, #0]
 80091d2:	685b      	ldreq	r3, [r3, #4]
 80091d4:	6063      	str	r3, [r4, #4]
 80091d6:	bf04      	itt	eq
 80091d8:	1949      	addeq	r1, r1, r5
 80091da:	6021      	streq	r1, [r4, #0]
 80091dc:	6054      	str	r4, [r2, #4]
 80091de:	e7ca      	b.n	8009176 <_free_r+0x26>
 80091e0:	b003      	add	sp, #12
 80091e2:	bd30      	pop	{r4, r5, pc}
 80091e4:	2000093c 	.word	0x2000093c

080091e8 <sbrk_aligned>:
 80091e8:	b570      	push	{r4, r5, r6, lr}
 80091ea:	4e0e      	ldr	r6, [pc, #56]	; (8009224 <sbrk_aligned+0x3c>)
 80091ec:	460c      	mov	r4, r1
 80091ee:	6831      	ldr	r1, [r6, #0]
 80091f0:	4605      	mov	r5, r0
 80091f2:	b911      	cbnz	r1, 80091fa <sbrk_aligned+0x12>
 80091f4:	f000 f88c 	bl	8009310 <_sbrk_r>
 80091f8:	6030      	str	r0, [r6, #0]
 80091fa:	4621      	mov	r1, r4
 80091fc:	4628      	mov	r0, r5
 80091fe:	f000 f887 	bl	8009310 <_sbrk_r>
 8009202:	1c43      	adds	r3, r0, #1
 8009204:	d00a      	beq.n	800921c <sbrk_aligned+0x34>
 8009206:	1cc4      	adds	r4, r0, #3
 8009208:	f024 0403 	bic.w	r4, r4, #3
 800920c:	42a0      	cmp	r0, r4
 800920e:	d007      	beq.n	8009220 <sbrk_aligned+0x38>
 8009210:	1a21      	subs	r1, r4, r0
 8009212:	4628      	mov	r0, r5
 8009214:	f000 f87c 	bl	8009310 <_sbrk_r>
 8009218:	3001      	adds	r0, #1
 800921a:	d101      	bne.n	8009220 <sbrk_aligned+0x38>
 800921c:	f04f 34ff 	mov.w	r4, #4294967295
 8009220:	4620      	mov	r0, r4
 8009222:	bd70      	pop	{r4, r5, r6, pc}
 8009224:	20000940 	.word	0x20000940

08009228 <_malloc_r>:
 8009228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800922c:	1ccd      	adds	r5, r1, #3
 800922e:	f025 0503 	bic.w	r5, r5, #3
 8009232:	3508      	adds	r5, #8
 8009234:	2d0c      	cmp	r5, #12
 8009236:	bf38      	it	cc
 8009238:	250c      	movcc	r5, #12
 800923a:	2d00      	cmp	r5, #0
 800923c:	4607      	mov	r7, r0
 800923e:	db01      	blt.n	8009244 <_malloc_r+0x1c>
 8009240:	42a9      	cmp	r1, r5
 8009242:	d905      	bls.n	8009250 <_malloc_r+0x28>
 8009244:	230c      	movs	r3, #12
 8009246:	603b      	str	r3, [r7, #0]
 8009248:	2600      	movs	r6, #0
 800924a:	4630      	mov	r0, r6
 800924c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009250:	4e2e      	ldr	r6, [pc, #184]	; (800930c <_malloc_r+0xe4>)
 8009252:	f000 f8a7 	bl	80093a4 <__malloc_lock>
 8009256:	6833      	ldr	r3, [r6, #0]
 8009258:	461c      	mov	r4, r3
 800925a:	bb34      	cbnz	r4, 80092aa <_malloc_r+0x82>
 800925c:	4629      	mov	r1, r5
 800925e:	4638      	mov	r0, r7
 8009260:	f7ff ffc2 	bl	80091e8 <sbrk_aligned>
 8009264:	1c43      	adds	r3, r0, #1
 8009266:	4604      	mov	r4, r0
 8009268:	d14d      	bne.n	8009306 <_malloc_r+0xde>
 800926a:	6834      	ldr	r4, [r6, #0]
 800926c:	4626      	mov	r6, r4
 800926e:	2e00      	cmp	r6, #0
 8009270:	d140      	bne.n	80092f4 <_malloc_r+0xcc>
 8009272:	6823      	ldr	r3, [r4, #0]
 8009274:	4631      	mov	r1, r6
 8009276:	4638      	mov	r0, r7
 8009278:	eb04 0803 	add.w	r8, r4, r3
 800927c:	f000 f848 	bl	8009310 <_sbrk_r>
 8009280:	4580      	cmp	r8, r0
 8009282:	d13a      	bne.n	80092fa <_malloc_r+0xd2>
 8009284:	6821      	ldr	r1, [r4, #0]
 8009286:	3503      	adds	r5, #3
 8009288:	1a6d      	subs	r5, r5, r1
 800928a:	f025 0503 	bic.w	r5, r5, #3
 800928e:	3508      	adds	r5, #8
 8009290:	2d0c      	cmp	r5, #12
 8009292:	bf38      	it	cc
 8009294:	250c      	movcc	r5, #12
 8009296:	4629      	mov	r1, r5
 8009298:	4638      	mov	r0, r7
 800929a:	f7ff ffa5 	bl	80091e8 <sbrk_aligned>
 800929e:	3001      	adds	r0, #1
 80092a0:	d02b      	beq.n	80092fa <_malloc_r+0xd2>
 80092a2:	6823      	ldr	r3, [r4, #0]
 80092a4:	442b      	add	r3, r5
 80092a6:	6023      	str	r3, [r4, #0]
 80092a8:	e00e      	b.n	80092c8 <_malloc_r+0xa0>
 80092aa:	6822      	ldr	r2, [r4, #0]
 80092ac:	1b52      	subs	r2, r2, r5
 80092ae:	d41e      	bmi.n	80092ee <_malloc_r+0xc6>
 80092b0:	2a0b      	cmp	r2, #11
 80092b2:	d916      	bls.n	80092e2 <_malloc_r+0xba>
 80092b4:	1961      	adds	r1, r4, r5
 80092b6:	42a3      	cmp	r3, r4
 80092b8:	6025      	str	r5, [r4, #0]
 80092ba:	bf18      	it	ne
 80092bc:	6059      	strne	r1, [r3, #4]
 80092be:	6863      	ldr	r3, [r4, #4]
 80092c0:	bf08      	it	eq
 80092c2:	6031      	streq	r1, [r6, #0]
 80092c4:	5162      	str	r2, [r4, r5]
 80092c6:	604b      	str	r3, [r1, #4]
 80092c8:	4638      	mov	r0, r7
 80092ca:	f104 060b 	add.w	r6, r4, #11
 80092ce:	f000 f86f 	bl	80093b0 <__malloc_unlock>
 80092d2:	f026 0607 	bic.w	r6, r6, #7
 80092d6:	1d23      	adds	r3, r4, #4
 80092d8:	1af2      	subs	r2, r6, r3
 80092da:	d0b6      	beq.n	800924a <_malloc_r+0x22>
 80092dc:	1b9b      	subs	r3, r3, r6
 80092de:	50a3      	str	r3, [r4, r2]
 80092e0:	e7b3      	b.n	800924a <_malloc_r+0x22>
 80092e2:	6862      	ldr	r2, [r4, #4]
 80092e4:	42a3      	cmp	r3, r4
 80092e6:	bf0c      	ite	eq
 80092e8:	6032      	streq	r2, [r6, #0]
 80092ea:	605a      	strne	r2, [r3, #4]
 80092ec:	e7ec      	b.n	80092c8 <_malloc_r+0xa0>
 80092ee:	4623      	mov	r3, r4
 80092f0:	6864      	ldr	r4, [r4, #4]
 80092f2:	e7b2      	b.n	800925a <_malloc_r+0x32>
 80092f4:	4634      	mov	r4, r6
 80092f6:	6876      	ldr	r6, [r6, #4]
 80092f8:	e7b9      	b.n	800926e <_malloc_r+0x46>
 80092fa:	230c      	movs	r3, #12
 80092fc:	603b      	str	r3, [r7, #0]
 80092fe:	4638      	mov	r0, r7
 8009300:	f000 f856 	bl	80093b0 <__malloc_unlock>
 8009304:	e7a1      	b.n	800924a <_malloc_r+0x22>
 8009306:	6025      	str	r5, [r4, #0]
 8009308:	e7de      	b.n	80092c8 <_malloc_r+0xa0>
 800930a:	bf00      	nop
 800930c:	2000093c 	.word	0x2000093c

08009310 <_sbrk_r>:
 8009310:	b538      	push	{r3, r4, r5, lr}
 8009312:	4d06      	ldr	r5, [pc, #24]	; (800932c <_sbrk_r+0x1c>)
 8009314:	2300      	movs	r3, #0
 8009316:	4604      	mov	r4, r0
 8009318:	4608      	mov	r0, r1
 800931a:	602b      	str	r3, [r5, #0]
 800931c:	f7f8 fb3c 	bl	8001998 <_sbrk>
 8009320:	1c43      	adds	r3, r0, #1
 8009322:	d102      	bne.n	800932a <_sbrk_r+0x1a>
 8009324:	682b      	ldr	r3, [r5, #0]
 8009326:	b103      	cbz	r3, 800932a <_sbrk_r+0x1a>
 8009328:	6023      	str	r3, [r4, #0]
 800932a:	bd38      	pop	{r3, r4, r5, pc}
 800932c:	20000944 	.word	0x20000944

08009330 <_vsniprintf_r>:
 8009330:	b530      	push	{r4, r5, lr}
 8009332:	4614      	mov	r4, r2
 8009334:	2c00      	cmp	r4, #0
 8009336:	b09b      	sub	sp, #108	; 0x6c
 8009338:	4605      	mov	r5, r0
 800933a:	461a      	mov	r2, r3
 800933c:	da05      	bge.n	800934a <_vsniprintf_r+0x1a>
 800933e:	238b      	movs	r3, #139	; 0x8b
 8009340:	6003      	str	r3, [r0, #0]
 8009342:	f04f 30ff 	mov.w	r0, #4294967295
 8009346:	b01b      	add	sp, #108	; 0x6c
 8009348:	bd30      	pop	{r4, r5, pc}
 800934a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800934e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009352:	bf14      	ite	ne
 8009354:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009358:	4623      	moveq	r3, r4
 800935a:	9302      	str	r3, [sp, #8]
 800935c:	9305      	str	r3, [sp, #20]
 800935e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009362:	9100      	str	r1, [sp, #0]
 8009364:	9104      	str	r1, [sp, #16]
 8009366:	f8ad 300e 	strh.w	r3, [sp, #14]
 800936a:	4669      	mov	r1, sp
 800936c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800936e:	f000 f881 	bl	8009474 <_svfiprintf_r>
 8009372:	1c43      	adds	r3, r0, #1
 8009374:	bfbc      	itt	lt
 8009376:	238b      	movlt	r3, #139	; 0x8b
 8009378:	602b      	strlt	r3, [r5, #0]
 800937a:	2c00      	cmp	r4, #0
 800937c:	d0e3      	beq.n	8009346 <_vsniprintf_r+0x16>
 800937e:	9b00      	ldr	r3, [sp, #0]
 8009380:	2200      	movs	r2, #0
 8009382:	701a      	strb	r2, [r3, #0]
 8009384:	e7df      	b.n	8009346 <_vsniprintf_r+0x16>
	...

08009388 <vsniprintf>:
 8009388:	b507      	push	{r0, r1, r2, lr}
 800938a:	9300      	str	r3, [sp, #0]
 800938c:	4613      	mov	r3, r2
 800938e:	460a      	mov	r2, r1
 8009390:	4601      	mov	r1, r0
 8009392:	4803      	ldr	r0, [pc, #12]	; (80093a0 <vsniprintf+0x18>)
 8009394:	6800      	ldr	r0, [r0, #0]
 8009396:	f7ff ffcb 	bl	8009330 <_vsniprintf_r>
 800939a:	b003      	add	sp, #12
 800939c:	f85d fb04 	ldr.w	pc, [sp], #4
 80093a0:	2000002c 	.word	0x2000002c

080093a4 <__malloc_lock>:
 80093a4:	4801      	ldr	r0, [pc, #4]	; (80093ac <__malloc_lock+0x8>)
 80093a6:	f000 baf9 	b.w	800999c <__retarget_lock_acquire_recursive>
 80093aa:	bf00      	nop
 80093ac:	20000948 	.word	0x20000948

080093b0 <__malloc_unlock>:
 80093b0:	4801      	ldr	r0, [pc, #4]	; (80093b8 <__malloc_unlock+0x8>)
 80093b2:	f000 baf4 	b.w	800999e <__retarget_lock_release_recursive>
 80093b6:	bf00      	nop
 80093b8:	20000948 	.word	0x20000948

080093bc <__ssputs_r>:
 80093bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093c0:	688e      	ldr	r6, [r1, #8]
 80093c2:	429e      	cmp	r6, r3
 80093c4:	4682      	mov	sl, r0
 80093c6:	460c      	mov	r4, r1
 80093c8:	4690      	mov	r8, r2
 80093ca:	461f      	mov	r7, r3
 80093cc:	d838      	bhi.n	8009440 <__ssputs_r+0x84>
 80093ce:	898a      	ldrh	r2, [r1, #12]
 80093d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80093d4:	d032      	beq.n	800943c <__ssputs_r+0x80>
 80093d6:	6825      	ldr	r5, [r4, #0]
 80093d8:	6909      	ldr	r1, [r1, #16]
 80093da:	eba5 0901 	sub.w	r9, r5, r1
 80093de:	6965      	ldr	r5, [r4, #20]
 80093e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80093e8:	3301      	adds	r3, #1
 80093ea:	444b      	add	r3, r9
 80093ec:	106d      	asrs	r5, r5, #1
 80093ee:	429d      	cmp	r5, r3
 80093f0:	bf38      	it	cc
 80093f2:	461d      	movcc	r5, r3
 80093f4:	0553      	lsls	r3, r2, #21
 80093f6:	d531      	bpl.n	800945c <__ssputs_r+0xa0>
 80093f8:	4629      	mov	r1, r5
 80093fa:	f7ff ff15 	bl	8009228 <_malloc_r>
 80093fe:	4606      	mov	r6, r0
 8009400:	b950      	cbnz	r0, 8009418 <__ssputs_r+0x5c>
 8009402:	230c      	movs	r3, #12
 8009404:	f8ca 3000 	str.w	r3, [sl]
 8009408:	89a3      	ldrh	r3, [r4, #12]
 800940a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800940e:	81a3      	strh	r3, [r4, #12]
 8009410:	f04f 30ff 	mov.w	r0, #4294967295
 8009414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009418:	6921      	ldr	r1, [r4, #16]
 800941a:	464a      	mov	r2, r9
 800941c:	f000 fac0 	bl	80099a0 <memcpy>
 8009420:	89a3      	ldrh	r3, [r4, #12]
 8009422:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800942a:	81a3      	strh	r3, [r4, #12]
 800942c:	6126      	str	r6, [r4, #16]
 800942e:	6165      	str	r5, [r4, #20]
 8009430:	444e      	add	r6, r9
 8009432:	eba5 0509 	sub.w	r5, r5, r9
 8009436:	6026      	str	r6, [r4, #0]
 8009438:	60a5      	str	r5, [r4, #8]
 800943a:	463e      	mov	r6, r7
 800943c:	42be      	cmp	r6, r7
 800943e:	d900      	bls.n	8009442 <__ssputs_r+0x86>
 8009440:	463e      	mov	r6, r7
 8009442:	6820      	ldr	r0, [r4, #0]
 8009444:	4632      	mov	r2, r6
 8009446:	4641      	mov	r1, r8
 8009448:	f000 fab8 	bl	80099bc <memmove>
 800944c:	68a3      	ldr	r3, [r4, #8]
 800944e:	1b9b      	subs	r3, r3, r6
 8009450:	60a3      	str	r3, [r4, #8]
 8009452:	6823      	ldr	r3, [r4, #0]
 8009454:	4433      	add	r3, r6
 8009456:	6023      	str	r3, [r4, #0]
 8009458:	2000      	movs	r0, #0
 800945a:	e7db      	b.n	8009414 <__ssputs_r+0x58>
 800945c:	462a      	mov	r2, r5
 800945e:	f000 fac7 	bl	80099f0 <_realloc_r>
 8009462:	4606      	mov	r6, r0
 8009464:	2800      	cmp	r0, #0
 8009466:	d1e1      	bne.n	800942c <__ssputs_r+0x70>
 8009468:	6921      	ldr	r1, [r4, #16]
 800946a:	4650      	mov	r0, sl
 800946c:	f7ff fe70 	bl	8009150 <_free_r>
 8009470:	e7c7      	b.n	8009402 <__ssputs_r+0x46>
	...

08009474 <_svfiprintf_r>:
 8009474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009478:	4698      	mov	r8, r3
 800947a:	898b      	ldrh	r3, [r1, #12]
 800947c:	061b      	lsls	r3, r3, #24
 800947e:	b09d      	sub	sp, #116	; 0x74
 8009480:	4607      	mov	r7, r0
 8009482:	460d      	mov	r5, r1
 8009484:	4614      	mov	r4, r2
 8009486:	d50e      	bpl.n	80094a6 <_svfiprintf_r+0x32>
 8009488:	690b      	ldr	r3, [r1, #16]
 800948a:	b963      	cbnz	r3, 80094a6 <_svfiprintf_r+0x32>
 800948c:	2140      	movs	r1, #64	; 0x40
 800948e:	f7ff fecb 	bl	8009228 <_malloc_r>
 8009492:	6028      	str	r0, [r5, #0]
 8009494:	6128      	str	r0, [r5, #16]
 8009496:	b920      	cbnz	r0, 80094a2 <_svfiprintf_r+0x2e>
 8009498:	230c      	movs	r3, #12
 800949a:	603b      	str	r3, [r7, #0]
 800949c:	f04f 30ff 	mov.w	r0, #4294967295
 80094a0:	e0d1      	b.n	8009646 <_svfiprintf_r+0x1d2>
 80094a2:	2340      	movs	r3, #64	; 0x40
 80094a4:	616b      	str	r3, [r5, #20]
 80094a6:	2300      	movs	r3, #0
 80094a8:	9309      	str	r3, [sp, #36]	; 0x24
 80094aa:	2320      	movs	r3, #32
 80094ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80094b4:	2330      	movs	r3, #48	; 0x30
 80094b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009660 <_svfiprintf_r+0x1ec>
 80094ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094be:	f04f 0901 	mov.w	r9, #1
 80094c2:	4623      	mov	r3, r4
 80094c4:	469a      	mov	sl, r3
 80094c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094ca:	b10a      	cbz	r2, 80094d0 <_svfiprintf_r+0x5c>
 80094cc:	2a25      	cmp	r2, #37	; 0x25
 80094ce:	d1f9      	bne.n	80094c4 <_svfiprintf_r+0x50>
 80094d0:	ebba 0b04 	subs.w	fp, sl, r4
 80094d4:	d00b      	beq.n	80094ee <_svfiprintf_r+0x7a>
 80094d6:	465b      	mov	r3, fp
 80094d8:	4622      	mov	r2, r4
 80094da:	4629      	mov	r1, r5
 80094dc:	4638      	mov	r0, r7
 80094de:	f7ff ff6d 	bl	80093bc <__ssputs_r>
 80094e2:	3001      	adds	r0, #1
 80094e4:	f000 80aa 	beq.w	800963c <_svfiprintf_r+0x1c8>
 80094e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094ea:	445a      	add	r2, fp
 80094ec:	9209      	str	r2, [sp, #36]	; 0x24
 80094ee:	f89a 3000 	ldrb.w	r3, [sl]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	f000 80a2 	beq.w	800963c <_svfiprintf_r+0x1c8>
 80094f8:	2300      	movs	r3, #0
 80094fa:	f04f 32ff 	mov.w	r2, #4294967295
 80094fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009502:	f10a 0a01 	add.w	sl, sl, #1
 8009506:	9304      	str	r3, [sp, #16]
 8009508:	9307      	str	r3, [sp, #28]
 800950a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800950e:	931a      	str	r3, [sp, #104]	; 0x68
 8009510:	4654      	mov	r4, sl
 8009512:	2205      	movs	r2, #5
 8009514:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009518:	4851      	ldr	r0, [pc, #324]	; (8009660 <_svfiprintf_r+0x1ec>)
 800951a:	f7f6 fe61 	bl	80001e0 <memchr>
 800951e:	9a04      	ldr	r2, [sp, #16]
 8009520:	b9d8      	cbnz	r0, 800955a <_svfiprintf_r+0xe6>
 8009522:	06d0      	lsls	r0, r2, #27
 8009524:	bf44      	itt	mi
 8009526:	2320      	movmi	r3, #32
 8009528:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800952c:	0711      	lsls	r1, r2, #28
 800952e:	bf44      	itt	mi
 8009530:	232b      	movmi	r3, #43	; 0x2b
 8009532:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009536:	f89a 3000 	ldrb.w	r3, [sl]
 800953a:	2b2a      	cmp	r3, #42	; 0x2a
 800953c:	d015      	beq.n	800956a <_svfiprintf_r+0xf6>
 800953e:	9a07      	ldr	r2, [sp, #28]
 8009540:	4654      	mov	r4, sl
 8009542:	2000      	movs	r0, #0
 8009544:	f04f 0c0a 	mov.w	ip, #10
 8009548:	4621      	mov	r1, r4
 800954a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800954e:	3b30      	subs	r3, #48	; 0x30
 8009550:	2b09      	cmp	r3, #9
 8009552:	d94e      	bls.n	80095f2 <_svfiprintf_r+0x17e>
 8009554:	b1b0      	cbz	r0, 8009584 <_svfiprintf_r+0x110>
 8009556:	9207      	str	r2, [sp, #28]
 8009558:	e014      	b.n	8009584 <_svfiprintf_r+0x110>
 800955a:	eba0 0308 	sub.w	r3, r0, r8
 800955e:	fa09 f303 	lsl.w	r3, r9, r3
 8009562:	4313      	orrs	r3, r2
 8009564:	9304      	str	r3, [sp, #16]
 8009566:	46a2      	mov	sl, r4
 8009568:	e7d2      	b.n	8009510 <_svfiprintf_r+0x9c>
 800956a:	9b03      	ldr	r3, [sp, #12]
 800956c:	1d19      	adds	r1, r3, #4
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	9103      	str	r1, [sp, #12]
 8009572:	2b00      	cmp	r3, #0
 8009574:	bfbb      	ittet	lt
 8009576:	425b      	neglt	r3, r3
 8009578:	f042 0202 	orrlt.w	r2, r2, #2
 800957c:	9307      	strge	r3, [sp, #28]
 800957e:	9307      	strlt	r3, [sp, #28]
 8009580:	bfb8      	it	lt
 8009582:	9204      	strlt	r2, [sp, #16]
 8009584:	7823      	ldrb	r3, [r4, #0]
 8009586:	2b2e      	cmp	r3, #46	; 0x2e
 8009588:	d10c      	bne.n	80095a4 <_svfiprintf_r+0x130>
 800958a:	7863      	ldrb	r3, [r4, #1]
 800958c:	2b2a      	cmp	r3, #42	; 0x2a
 800958e:	d135      	bne.n	80095fc <_svfiprintf_r+0x188>
 8009590:	9b03      	ldr	r3, [sp, #12]
 8009592:	1d1a      	adds	r2, r3, #4
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	9203      	str	r2, [sp, #12]
 8009598:	2b00      	cmp	r3, #0
 800959a:	bfb8      	it	lt
 800959c:	f04f 33ff 	movlt.w	r3, #4294967295
 80095a0:	3402      	adds	r4, #2
 80095a2:	9305      	str	r3, [sp, #20]
 80095a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009670 <_svfiprintf_r+0x1fc>
 80095a8:	7821      	ldrb	r1, [r4, #0]
 80095aa:	2203      	movs	r2, #3
 80095ac:	4650      	mov	r0, sl
 80095ae:	f7f6 fe17 	bl	80001e0 <memchr>
 80095b2:	b140      	cbz	r0, 80095c6 <_svfiprintf_r+0x152>
 80095b4:	2340      	movs	r3, #64	; 0x40
 80095b6:	eba0 000a 	sub.w	r0, r0, sl
 80095ba:	fa03 f000 	lsl.w	r0, r3, r0
 80095be:	9b04      	ldr	r3, [sp, #16]
 80095c0:	4303      	orrs	r3, r0
 80095c2:	3401      	adds	r4, #1
 80095c4:	9304      	str	r3, [sp, #16]
 80095c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095ca:	4826      	ldr	r0, [pc, #152]	; (8009664 <_svfiprintf_r+0x1f0>)
 80095cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095d0:	2206      	movs	r2, #6
 80095d2:	f7f6 fe05 	bl	80001e0 <memchr>
 80095d6:	2800      	cmp	r0, #0
 80095d8:	d038      	beq.n	800964c <_svfiprintf_r+0x1d8>
 80095da:	4b23      	ldr	r3, [pc, #140]	; (8009668 <_svfiprintf_r+0x1f4>)
 80095dc:	bb1b      	cbnz	r3, 8009626 <_svfiprintf_r+0x1b2>
 80095de:	9b03      	ldr	r3, [sp, #12]
 80095e0:	3307      	adds	r3, #7
 80095e2:	f023 0307 	bic.w	r3, r3, #7
 80095e6:	3308      	adds	r3, #8
 80095e8:	9303      	str	r3, [sp, #12]
 80095ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095ec:	4433      	add	r3, r6
 80095ee:	9309      	str	r3, [sp, #36]	; 0x24
 80095f0:	e767      	b.n	80094c2 <_svfiprintf_r+0x4e>
 80095f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80095f6:	460c      	mov	r4, r1
 80095f8:	2001      	movs	r0, #1
 80095fa:	e7a5      	b.n	8009548 <_svfiprintf_r+0xd4>
 80095fc:	2300      	movs	r3, #0
 80095fe:	3401      	adds	r4, #1
 8009600:	9305      	str	r3, [sp, #20]
 8009602:	4619      	mov	r1, r3
 8009604:	f04f 0c0a 	mov.w	ip, #10
 8009608:	4620      	mov	r0, r4
 800960a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800960e:	3a30      	subs	r2, #48	; 0x30
 8009610:	2a09      	cmp	r2, #9
 8009612:	d903      	bls.n	800961c <_svfiprintf_r+0x1a8>
 8009614:	2b00      	cmp	r3, #0
 8009616:	d0c5      	beq.n	80095a4 <_svfiprintf_r+0x130>
 8009618:	9105      	str	r1, [sp, #20]
 800961a:	e7c3      	b.n	80095a4 <_svfiprintf_r+0x130>
 800961c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009620:	4604      	mov	r4, r0
 8009622:	2301      	movs	r3, #1
 8009624:	e7f0      	b.n	8009608 <_svfiprintf_r+0x194>
 8009626:	ab03      	add	r3, sp, #12
 8009628:	9300      	str	r3, [sp, #0]
 800962a:	462a      	mov	r2, r5
 800962c:	4b0f      	ldr	r3, [pc, #60]	; (800966c <_svfiprintf_r+0x1f8>)
 800962e:	a904      	add	r1, sp, #16
 8009630:	4638      	mov	r0, r7
 8009632:	f3af 8000 	nop.w
 8009636:	1c42      	adds	r2, r0, #1
 8009638:	4606      	mov	r6, r0
 800963a:	d1d6      	bne.n	80095ea <_svfiprintf_r+0x176>
 800963c:	89ab      	ldrh	r3, [r5, #12]
 800963e:	065b      	lsls	r3, r3, #25
 8009640:	f53f af2c 	bmi.w	800949c <_svfiprintf_r+0x28>
 8009644:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009646:	b01d      	add	sp, #116	; 0x74
 8009648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800964c:	ab03      	add	r3, sp, #12
 800964e:	9300      	str	r3, [sp, #0]
 8009650:	462a      	mov	r2, r5
 8009652:	4b06      	ldr	r3, [pc, #24]	; (800966c <_svfiprintf_r+0x1f8>)
 8009654:	a904      	add	r1, sp, #16
 8009656:	4638      	mov	r0, r7
 8009658:	f000 f87a 	bl	8009750 <_printf_i>
 800965c:	e7eb      	b.n	8009636 <_svfiprintf_r+0x1c2>
 800965e:	bf00      	nop
 8009660:	0800a21d 	.word	0x0800a21d
 8009664:	0800a227 	.word	0x0800a227
 8009668:	00000000 	.word	0x00000000
 800966c:	080093bd 	.word	0x080093bd
 8009670:	0800a223 	.word	0x0800a223

08009674 <_printf_common>:
 8009674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009678:	4616      	mov	r6, r2
 800967a:	4699      	mov	r9, r3
 800967c:	688a      	ldr	r2, [r1, #8]
 800967e:	690b      	ldr	r3, [r1, #16]
 8009680:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009684:	4293      	cmp	r3, r2
 8009686:	bfb8      	it	lt
 8009688:	4613      	movlt	r3, r2
 800968a:	6033      	str	r3, [r6, #0]
 800968c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009690:	4607      	mov	r7, r0
 8009692:	460c      	mov	r4, r1
 8009694:	b10a      	cbz	r2, 800969a <_printf_common+0x26>
 8009696:	3301      	adds	r3, #1
 8009698:	6033      	str	r3, [r6, #0]
 800969a:	6823      	ldr	r3, [r4, #0]
 800969c:	0699      	lsls	r1, r3, #26
 800969e:	bf42      	ittt	mi
 80096a0:	6833      	ldrmi	r3, [r6, #0]
 80096a2:	3302      	addmi	r3, #2
 80096a4:	6033      	strmi	r3, [r6, #0]
 80096a6:	6825      	ldr	r5, [r4, #0]
 80096a8:	f015 0506 	ands.w	r5, r5, #6
 80096ac:	d106      	bne.n	80096bc <_printf_common+0x48>
 80096ae:	f104 0a19 	add.w	sl, r4, #25
 80096b2:	68e3      	ldr	r3, [r4, #12]
 80096b4:	6832      	ldr	r2, [r6, #0]
 80096b6:	1a9b      	subs	r3, r3, r2
 80096b8:	42ab      	cmp	r3, r5
 80096ba:	dc26      	bgt.n	800970a <_printf_common+0x96>
 80096bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80096c0:	1e13      	subs	r3, r2, #0
 80096c2:	6822      	ldr	r2, [r4, #0]
 80096c4:	bf18      	it	ne
 80096c6:	2301      	movne	r3, #1
 80096c8:	0692      	lsls	r2, r2, #26
 80096ca:	d42b      	bmi.n	8009724 <_printf_common+0xb0>
 80096cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096d0:	4649      	mov	r1, r9
 80096d2:	4638      	mov	r0, r7
 80096d4:	47c0      	blx	r8
 80096d6:	3001      	adds	r0, #1
 80096d8:	d01e      	beq.n	8009718 <_printf_common+0xa4>
 80096da:	6823      	ldr	r3, [r4, #0]
 80096dc:	68e5      	ldr	r5, [r4, #12]
 80096de:	6832      	ldr	r2, [r6, #0]
 80096e0:	f003 0306 	and.w	r3, r3, #6
 80096e4:	2b04      	cmp	r3, #4
 80096e6:	bf08      	it	eq
 80096e8:	1aad      	subeq	r5, r5, r2
 80096ea:	68a3      	ldr	r3, [r4, #8]
 80096ec:	6922      	ldr	r2, [r4, #16]
 80096ee:	bf0c      	ite	eq
 80096f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096f4:	2500      	movne	r5, #0
 80096f6:	4293      	cmp	r3, r2
 80096f8:	bfc4      	itt	gt
 80096fa:	1a9b      	subgt	r3, r3, r2
 80096fc:	18ed      	addgt	r5, r5, r3
 80096fe:	2600      	movs	r6, #0
 8009700:	341a      	adds	r4, #26
 8009702:	42b5      	cmp	r5, r6
 8009704:	d11a      	bne.n	800973c <_printf_common+0xc8>
 8009706:	2000      	movs	r0, #0
 8009708:	e008      	b.n	800971c <_printf_common+0xa8>
 800970a:	2301      	movs	r3, #1
 800970c:	4652      	mov	r2, sl
 800970e:	4649      	mov	r1, r9
 8009710:	4638      	mov	r0, r7
 8009712:	47c0      	blx	r8
 8009714:	3001      	adds	r0, #1
 8009716:	d103      	bne.n	8009720 <_printf_common+0xac>
 8009718:	f04f 30ff 	mov.w	r0, #4294967295
 800971c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009720:	3501      	adds	r5, #1
 8009722:	e7c6      	b.n	80096b2 <_printf_common+0x3e>
 8009724:	18e1      	adds	r1, r4, r3
 8009726:	1c5a      	adds	r2, r3, #1
 8009728:	2030      	movs	r0, #48	; 0x30
 800972a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800972e:	4422      	add	r2, r4
 8009730:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009734:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009738:	3302      	adds	r3, #2
 800973a:	e7c7      	b.n	80096cc <_printf_common+0x58>
 800973c:	2301      	movs	r3, #1
 800973e:	4622      	mov	r2, r4
 8009740:	4649      	mov	r1, r9
 8009742:	4638      	mov	r0, r7
 8009744:	47c0      	blx	r8
 8009746:	3001      	adds	r0, #1
 8009748:	d0e6      	beq.n	8009718 <_printf_common+0xa4>
 800974a:	3601      	adds	r6, #1
 800974c:	e7d9      	b.n	8009702 <_printf_common+0x8e>
	...

08009750 <_printf_i>:
 8009750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009754:	7e0f      	ldrb	r7, [r1, #24]
 8009756:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009758:	2f78      	cmp	r7, #120	; 0x78
 800975a:	4691      	mov	r9, r2
 800975c:	4680      	mov	r8, r0
 800975e:	460c      	mov	r4, r1
 8009760:	469a      	mov	sl, r3
 8009762:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009766:	d807      	bhi.n	8009778 <_printf_i+0x28>
 8009768:	2f62      	cmp	r7, #98	; 0x62
 800976a:	d80a      	bhi.n	8009782 <_printf_i+0x32>
 800976c:	2f00      	cmp	r7, #0
 800976e:	f000 80d8 	beq.w	8009922 <_printf_i+0x1d2>
 8009772:	2f58      	cmp	r7, #88	; 0x58
 8009774:	f000 80a3 	beq.w	80098be <_printf_i+0x16e>
 8009778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800977c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009780:	e03a      	b.n	80097f8 <_printf_i+0xa8>
 8009782:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009786:	2b15      	cmp	r3, #21
 8009788:	d8f6      	bhi.n	8009778 <_printf_i+0x28>
 800978a:	a101      	add	r1, pc, #4	; (adr r1, 8009790 <_printf_i+0x40>)
 800978c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009790:	080097e9 	.word	0x080097e9
 8009794:	080097fd 	.word	0x080097fd
 8009798:	08009779 	.word	0x08009779
 800979c:	08009779 	.word	0x08009779
 80097a0:	08009779 	.word	0x08009779
 80097a4:	08009779 	.word	0x08009779
 80097a8:	080097fd 	.word	0x080097fd
 80097ac:	08009779 	.word	0x08009779
 80097b0:	08009779 	.word	0x08009779
 80097b4:	08009779 	.word	0x08009779
 80097b8:	08009779 	.word	0x08009779
 80097bc:	08009909 	.word	0x08009909
 80097c0:	0800982d 	.word	0x0800982d
 80097c4:	080098eb 	.word	0x080098eb
 80097c8:	08009779 	.word	0x08009779
 80097cc:	08009779 	.word	0x08009779
 80097d0:	0800992b 	.word	0x0800992b
 80097d4:	08009779 	.word	0x08009779
 80097d8:	0800982d 	.word	0x0800982d
 80097dc:	08009779 	.word	0x08009779
 80097e0:	08009779 	.word	0x08009779
 80097e4:	080098f3 	.word	0x080098f3
 80097e8:	682b      	ldr	r3, [r5, #0]
 80097ea:	1d1a      	adds	r2, r3, #4
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	602a      	str	r2, [r5, #0]
 80097f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80097f8:	2301      	movs	r3, #1
 80097fa:	e0a3      	b.n	8009944 <_printf_i+0x1f4>
 80097fc:	6820      	ldr	r0, [r4, #0]
 80097fe:	6829      	ldr	r1, [r5, #0]
 8009800:	0606      	lsls	r6, r0, #24
 8009802:	f101 0304 	add.w	r3, r1, #4
 8009806:	d50a      	bpl.n	800981e <_printf_i+0xce>
 8009808:	680e      	ldr	r6, [r1, #0]
 800980a:	602b      	str	r3, [r5, #0]
 800980c:	2e00      	cmp	r6, #0
 800980e:	da03      	bge.n	8009818 <_printf_i+0xc8>
 8009810:	232d      	movs	r3, #45	; 0x2d
 8009812:	4276      	negs	r6, r6
 8009814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009818:	485e      	ldr	r0, [pc, #376]	; (8009994 <_printf_i+0x244>)
 800981a:	230a      	movs	r3, #10
 800981c:	e019      	b.n	8009852 <_printf_i+0x102>
 800981e:	680e      	ldr	r6, [r1, #0]
 8009820:	602b      	str	r3, [r5, #0]
 8009822:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009826:	bf18      	it	ne
 8009828:	b236      	sxthne	r6, r6
 800982a:	e7ef      	b.n	800980c <_printf_i+0xbc>
 800982c:	682b      	ldr	r3, [r5, #0]
 800982e:	6820      	ldr	r0, [r4, #0]
 8009830:	1d19      	adds	r1, r3, #4
 8009832:	6029      	str	r1, [r5, #0]
 8009834:	0601      	lsls	r1, r0, #24
 8009836:	d501      	bpl.n	800983c <_printf_i+0xec>
 8009838:	681e      	ldr	r6, [r3, #0]
 800983a:	e002      	b.n	8009842 <_printf_i+0xf2>
 800983c:	0646      	lsls	r6, r0, #25
 800983e:	d5fb      	bpl.n	8009838 <_printf_i+0xe8>
 8009840:	881e      	ldrh	r6, [r3, #0]
 8009842:	4854      	ldr	r0, [pc, #336]	; (8009994 <_printf_i+0x244>)
 8009844:	2f6f      	cmp	r7, #111	; 0x6f
 8009846:	bf0c      	ite	eq
 8009848:	2308      	moveq	r3, #8
 800984a:	230a      	movne	r3, #10
 800984c:	2100      	movs	r1, #0
 800984e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009852:	6865      	ldr	r5, [r4, #4]
 8009854:	60a5      	str	r5, [r4, #8]
 8009856:	2d00      	cmp	r5, #0
 8009858:	bfa2      	ittt	ge
 800985a:	6821      	ldrge	r1, [r4, #0]
 800985c:	f021 0104 	bicge.w	r1, r1, #4
 8009860:	6021      	strge	r1, [r4, #0]
 8009862:	b90e      	cbnz	r6, 8009868 <_printf_i+0x118>
 8009864:	2d00      	cmp	r5, #0
 8009866:	d04d      	beq.n	8009904 <_printf_i+0x1b4>
 8009868:	4615      	mov	r5, r2
 800986a:	fbb6 f1f3 	udiv	r1, r6, r3
 800986e:	fb03 6711 	mls	r7, r3, r1, r6
 8009872:	5dc7      	ldrb	r7, [r0, r7]
 8009874:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009878:	4637      	mov	r7, r6
 800987a:	42bb      	cmp	r3, r7
 800987c:	460e      	mov	r6, r1
 800987e:	d9f4      	bls.n	800986a <_printf_i+0x11a>
 8009880:	2b08      	cmp	r3, #8
 8009882:	d10b      	bne.n	800989c <_printf_i+0x14c>
 8009884:	6823      	ldr	r3, [r4, #0]
 8009886:	07de      	lsls	r6, r3, #31
 8009888:	d508      	bpl.n	800989c <_printf_i+0x14c>
 800988a:	6923      	ldr	r3, [r4, #16]
 800988c:	6861      	ldr	r1, [r4, #4]
 800988e:	4299      	cmp	r1, r3
 8009890:	bfde      	ittt	le
 8009892:	2330      	movle	r3, #48	; 0x30
 8009894:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009898:	f105 35ff 	addle.w	r5, r5, #4294967295
 800989c:	1b52      	subs	r2, r2, r5
 800989e:	6122      	str	r2, [r4, #16]
 80098a0:	f8cd a000 	str.w	sl, [sp]
 80098a4:	464b      	mov	r3, r9
 80098a6:	aa03      	add	r2, sp, #12
 80098a8:	4621      	mov	r1, r4
 80098aa:	4640      	mov	r0, r8
 80098ac:	f7ff fee2 	bl	8009674 <_printf_common>
 80098b0:	3001      	adds	r0, #1
 80098b2:	d14c      	bne.n	800994e <_printf_i+0x1fe>
 80098b4:	f04f 30ff 	mov.w	r0, #4294967295
 80098b8:	b004      	add	sp, #16
 80098ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098be:	4835      	ldr	r0, [pc, #212]	; (8009994 <_printf_i+0x244>)
 80098c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80098c4:	6829      	ldr	r1, [r5, #0]
 80098c6:	6823      	ldr	r3, [r4, #0]
 80098c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80098cc:	6029      	str	r1, [r5, #0]
 80098ce:	061d      	lsls	r5, r3, #24
 80098d0:	d514      	bpl.n	80098fc <_printf_i+0x1ac>
 80098d2:	07df      	lsls	r7, r3, #31
 80098d4:	bf44      	itt	mi
 80098d6:	f043 0320 	orrmi.w	r3, r3, #32
 80098da:	6023      	strmi	r3, [r4, #0]
 80098dc:	b91e      	cbnz	r6, 80098e6 <_printf_i+0x196>
 80098de:	6823      	ldr	r3, [r4, #0]
 80098e0:	f023 0320 	bic.w	r3, r3, #32
 80098e4:	6023      	str	r3, [r4, #0]
 80098e6:	2310      	movs	r3, #16
 80098e8:	e7b0      	b.n	800984c <_printf_i+0xfc>
 80098ea:	6823      	ldr	r3, [r4, #0]
 80098ec:	f043 0320 	orr.w	r3, r3, #32
 80098f0:	6023      	str	r3, [r4, #0]
 80098f2:	2378      	movs	r3, #120	; 0x78
 80098f4:	4828      	ldr	r0, [pc, #160]	; (8009998 <_printf_i+0x248>)
 80098f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80098fa:	e7e3      	b.n	80098c4 <_printf_i+0x174>
 80098fc:	0659      	lsls	r1, r3, #25
 80098fe:	bf48      	it	mi
 8009900:	b2b6      	uxthmi	r6, r6
 8009902:	e7e6      	b.n	80098d2 <_printf_i+0x182>
 8009904:	4615      	mov	r5, r2
 8009906:	e7bb      	b.n	8009880 <_printf_i+0x130>
 8009908:	682b      	ldr	r3, [r5, #0]
 800990a:	6826      	ldr	r6, [r4, #0]
 800990c:	6961      	ldr	r1, [r4, #20]
 800990e:	1d18      	adds	r0, r3, #4
 8009910:	6028      	str	r0, [r5, #0]
 8009912:	0635      	lsls	r5, r6, #24
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	d501      	bpl.n	800991c <_printf_i+0x1cc>
 8009918:	6019      	str	r1, [r3, #0]
 800991a:	e002      	b.n	8009922 <_printf_i+0x1d2>
 800991c:	0670      	lsls	r0, r6, #25
 800991e:	d5fb      	bpl.n	8009918 <_printf_i+0x1c8>
 8009920:	8019      	strh	r1, [r3, #0]
 8009922:	2300      	movs	r3, #0
 8009924:	6123      	str	r3, [r4, #16]
 8009926:	4615      	mov	r5, r2
 8009928:	e7ba      	b.n	80098a0 <_printf_i+0x150>
 800992a:	682b      	ldr	r3, [r5, #0]
 800992c:	1d1a      	adds	r2, r3, #4
 800992e:	602a      	str	r2, [r5, #0]
 8009930:	681d      	ldr	r5, [r3, #0]
 8009932:	6862      	ldr	r2, [r4, #4]
 8009934:	2100      	movs	r1, #0
 8009936:	4628      	mov	r0, r5
 8009938:	f7f6 fc52 	bl	80001e0 <memchr>
 800993c:	b108      	cbz	r0, 8009942 <_printf_i+0x1f2>
 800993e:	1b40      	subs	r0, r0, r5
 8009940:	6060      	str	r0, [r4, #4]
 8009942:	6863      	ldr	r3, [r4, #4]
 8009944:	6123      	str	r3, [r4, #16]
 8009946:	2300      	movs	r3, #0
 8009948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800994c:	e7a8      	b.n	80098a0 <_printf_i+0x150>
 800994e:	6923      	ldr	r3, [r4, #16]
 8009950:	462a      	mov	r2, r5
 8009952:	4649      	mov	r1, r9
 8009954:	4640      	mov	r0, r8
 8009956:	47d0      	blx	sl
 8009958:	3001      	adds	r0, #1
 800995a:	d0ab      	beq.n	80098b4 <_printf_i+0x164>
 800995c:	6823      	ldr	r3, [r4, #0]
 800995e:	079b      	lsls	r3, r3, #30
 8009960:	d413      	bmi.n	800998a <_printf_i+0x23a>
 8009962:	68e0      	ldr	r0, [r4, #12]
 8009964:	9b03      	ldr	r3, [sp, #12]
 8009966:	4298      	cmp	r0, r3
 8009968:	bfb8      	it	lt
 800996a:	4618      	movlt	r0, r3
 800996c:	e7a4      	b.n	80098b8 <_printf_i+0x168>
 800996e:	2301      	movs	r3, #1
 8009970:	4632      	mov	r2, r6
 8009972:	4649      	mov	r1, r9
 8009974:	4640      	mov	r0, r8
 8009976:	47d0      	blx	sl
 8009978:	3001      	adds	r0, #1
 800997a:	d09b      	beq.n	80098b4 <_printf_i+0x164>
 800997c:	3501      	adds	r5, #1
 800997e:	68e3      	ldr	r3, [r4, #12]
 8009980:	9903      	ldr	r1, [sp, #12]
 8009982:	1a5b      	subs	r3, r3, r1
 8009984:	42ab      	cmp	r3, r5
 8009986:	dcf2      	bgt.n	800996e <_printf_i+0x21e>
 8009988:	e7eb      	b.n	8009962 <_printf_i+0x212>
 800998a:	2500      	movs	r5, #0
 800998c:	f104 0619 	add.w	r6, r4, #25
 8009990:	e7f5      	b.n	800997e <_printf_i+0x22e>
 8009992:	bf00      	nop
 8009994:	0800a22e 	.word	0x0800a22e
 8009998:	0800a23f 	.word	0x0800a23f

0800999c <__retarget_lock_acquire_recursive>:
 800999c:	4770      	bx	lr

0800999e <__retarget_lock_release_recursive>:
 800999e:	4770      	bx	lr

080099a0 <memcpy>:
 80099a0:	440a      	add	r2, r1
 80099a2:	4291      	cmp	r1, r2
 80099a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80099a8:	d100      	bne.n	80099ac <memcpy+0xc>
 80099aa:	4770      	bx	lr
 80099ac:	b510      	push	{r4, lr}
 80099ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099b6:	4291      	cmp	r1, r2
 80099b8:	d1f9      	bne.n	80099ae <memcpy+0xe>
 80099ba:	bd10      	pop	{r4, pc}

080099bc <memmove>:
 80099bc:	4288      	cmp	r0, r1
 80099be:	b510      	push	{r4, lr}
 80099c0:	eb01 0402 	add.w	r4, r1, r2
 80099c4:	d902      	bls.n	80099cc <memmove+0x10>
 80099c6:	4284      	cmp	r4, r0
 80099c8:	4623      	mov	r3, r4
 80099ca:	d807      	bhi.n	80099dc <memmove+0x20>
 80099cc:	1e43      	subs	r3, r0, #1
 80099ce:	42a1      	cmp	r1, r4
 80099d0:	d008      	beq.n	80099e4 <memmove+0x28>
 80099d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80099da:	e7f8      	b.n	80099ce <memmove+0x12>
 80099dc:	4402      	add	r2, r0
 80099de:	4601      	mov	r1, r0
 80099e0:	428a      	cmp	r2, r1
 80099e2:	d100      	bne.n	80099e6 <memmove+0x2a>
 80099e4:	bd10      	pop	{r4, pc}
 80099e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80099ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80099ee:	e7f7      	b.n	80099e0 <memmove+0x24>

080099f0 <_realloc_r>:
 80099f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099f4:	4680      	mov	r8, r0
 80099f6:	4614      	mov	r4, r2
 80099f8:	460e      	mov	r6, r1
 80099fa:	b921      	cbnz	r1, 8009a06 <_realloc_r+0x16>
 80099fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a00:	4611      	mov	r1, r2
 8009a02:	f7ff bc11 	b.w	8009228 <_malloc_r>
 8009a06:	b92a      	cbnz	r2, 8009a14 <_realloc_r+0x24>
 8009a08:	f7ff fba2 	bl	8009150 <_free_r>
 8009a0c:	4625      	mov	r5, r4
 8009a0e:	4628      	mov	r0, r5
 8009a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a14:	f000 f81b 	bl	8009a4e <_malloc_usable_size_r>
 8009a18:	4284      	cmp	r4, r0
 8009a1a:	4607      	mov	r7, r0
 8009a1c:	d802      	bhi.n	8009a24 <_realloc_r+0x34>
 8009a1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009a22:	d812      	bhi.n	8009a4a <_realloc_r+0x5a>
 8009a24:	4621      	mov	r1, r4
 8009a26:	4640      	mov	r0, r8
 8009a28:	f7ff fbfe 	bl	8009228 <_malloc_r>
 8009a2c:	4605      	mov	r5, r0
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	d0ed      	beq.n	8009a0e <_realloc_r+0x1e>
 8009a32:	42bc      	cmp	r4, r7
 8009a34:	4622      	mov	r2, r4
 8009a36:	4631      	mov	r1, r6
 8009a38:	bf28      	it	cs
 8009a3a:	463a      	movcs	r2, r7
 8009a3c:	f7ff ffb0 	bl	80099a0 <memcpy>
 8009a40:	4631      	mov	r1, r6
 8009a42:	4640      	mov	r0, r8
 8009a44:	f7ff fb84 	bl	8009150 <_free_r>
 8009a48:	e7e1      	b.n	8009a0e <_realloc_r+0x1e>
 8009a4a:	4635      	mov	r5, r6
 8009a4c:	e7df      	b.n	8009a0e <_realloc_r+0x1e>

08009a4e <_malloc_usable_size_r>:
 8009a4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a52:	1f18      	subs	r0, r3, #4
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	bfbc      	itt	lt
 8009a58:	580b      	ldrlt	r3, [r1, r0]
 8009a5a:	18c0      	addlt	r0, r0, r3
 8009a5c:	4770      	bx	lr
	...

08009a60 <_init>:
 8009a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a62:	bf00      	nop
 8009a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a66:	bc08      	pop	{r3}
 8009a68:	469e      	mov	lr, r3
 8009a6a:	4770      	bx	lr

08009a6c <_fini>:
 8009a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a6e:	bf00      	nop
 8009a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a72:	bc08      	pop	{r3}
 8009a74:	469e      	mov	lr, r3
 8009a76:	4770      	bx	lr
