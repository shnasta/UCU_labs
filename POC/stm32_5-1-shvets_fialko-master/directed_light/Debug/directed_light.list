
directed_light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c3c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08008dd4  08008dd4  00018dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e00  08008e00  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08008e00  08008e00  00018e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e08  08008e08  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e08  08008e08  00018e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e0c  08008e0c  00018e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08008e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a0  20000094  08008ea4  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000934  08008ea4  00020934  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a623  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c96  00000000  00000000  0003a6e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001698  00000000  00000000  0003e380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001508  00000000  00000000  0003fa18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b97  00000000  00000000  00040f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cc38  00000000  00000000  0005aab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096e08  00000000  00000000  000776ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010e4f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006220  00000000  00000000  0010e548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000094 	.word	0x20000094
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008dbc 	.word	0x08008dbc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000098 	.word	0x20000098
 80001d4:	08008dbc 	.word	0x08008dbc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN PFP */
volatile int pressed = 0;
volatile bool button_is_pressed = false;
volatile bool direction = true;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	80fb      	strh	r3, [r7, #6]
	if( GPIO_Pin != USR_BUTTON_Pin) {
 80004e6:	88fb      	ldrh	r3, [r7, #6]
 80004e8:	2b01      	cmp	r3, #1
 80004ea:	d132      	bne.n	8000552 <HAL_GPIO_EXTI_Callback+0x76>
		return;
	}

	static uint32_t last_change_tick;
	if( HAL_GetTick() - last_change_tick < 50 ) {
 80004ec:	f000 feb8 	bl	8001260 <HAL_GetTick>
 80004f0:	4602      	mov	r2, r0
 80004f2:	4b1b      	ldr	r3, [pc, #108]	; (8000560 <HAL_GPIO_EXTI_Callback+0x84>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	1ad3      	subs	r3, r2, r3
 80004f8:	2b31      	cmp	r3, #49	; 0x31
 80004fa:	d92c      	bls.n	8000556 <HAL_GPIO_EXTI_Callback+0x7a>
		return;
	}

	last_change_tick = HAL_GetTick();
 80004fc:	f000 feb0 	bl	8001260 <HAL_GetTick>
 8000500:	4603      	mov	r3, r0
 8000502:	4a17      	ldr	r2, [pc, #92]	; (8000560 <HAL_GPIO_EXTI_Callback+0x84>)
 8000504:	6013      	str	r3, [r2, #0]
	if(button_is_pressed) {
 8000506:	4b17      	ldr	r3, [pc, #92]	; (8000564 <HAL_GPIO_EXTI_Callback+0x88>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	b2db      	uxtb	r3, r3
 800050c:	2b00      	cmp	r3, #0
 800050e:	d00f      	beq.n	8000530 <HAL_GPIO_EXTI_Callback+0x54>
	  direction = !direction;
 8000510:	4b15      	ldr	r3, [pc, #84]	; (8000568 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	b2db      	uxtb	r3, r3
 8000516:	2b00      	cmp	r3, #0
 8000518:	bf14      	ite	ne
 800051a:	2301      	movne	r3, #1
 800051c:	2300      	moveq	r3, #0
 800051e:	b2db      	uxtb	r3, r3
 8000520:	f083 0301 	eor.w	r3, r3, #1
 8000524:	b2db      	uxtb	r3, r3
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	b2da      	uxtb	r2, r3
 800052c:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <HAL_GPIO_EXTI_Callback+0x8c>)
 800052e:	701a      	strb	r2, [r3, #0]
	}

	button_is_pressed = !button_is_pressed;
 8000530:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <HAL_GPIO_EXTI_Callback+0x88>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	b2db      	uxtb	r3, r3
 8000536:	2b00      	cmp	r3, #0
 8000538:	bf14      	ite	ne
 800053a:	2301      	movne	r3, #1
 800053c:	2300      	moveq	r3, #0
 800053e:	b2db      	uxtb	r3, r3
 8000540:	f083 0301 	eor.w	r3, r3, #1
 8000544:	b2db      	uxtb	r3, r3
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	b2da      	uxtb	r2, r3
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <HAL_GPIO_EXTI_Callback+0x88>)
 800054e:	701a      	strb	r2, [r3, #0]
 8000550:	e002      	b.n	8000558 <HAL_GPIO_EXTI_Callback+0x7c>
		return;
 8000552:	bf00      	nop
 8000554:	e000      	b.n	8000558 <HAL_GPIO_EXTI_Callback+0x7c>
		return;
 8000556:	bf00      	nop
}
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000238 	.word	0x20000238
 8000564:	20000234 	.word	0x20000234
 8000568:	20000000 	.word	0x20000000

0800056c <led_pwm.0>:
  /* USER CODE BEGIN 1 */
	volatile uint32_t* tim4_crrs[] = {&TIM4->CCR4, &TIM4->CCR3, &TIM4->CCR2, &TIM4->CCR1};
	int i = 0;


	void led_pwm() {
 800056c:	b590      	push	{r4, r7, lr}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	4664      	mov	r4, ip
 8000574:	f8c7 c004 	str.w	ip, [r7, #4]
		while(*tim4_crrs[i] < TIM4->ARR) {
 8000578:	e011      	b.n	800059e <led_pwm.0+0x32>
			*tim4_crrs[i]+=TIM4->ARR/15;
 800057a:	4b1c      	ldr	r3, [pc, #112]	; (80005ec <led_pwm.0+0x80>)
 800057c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800057e:	4a1c      	ldr	r2, [pc, #112]	; (80005f0 <led_pwm.0+0x84>)
 8000580:	fba2 2303 	umull	r2, r3, r2, r3
 8000584:	08d9      	lsrs	r1, r3, #3
 8000586:	6923      	ldr	r3, [r4, #16]
 8000588:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	6923      	ldr	r3, [r4, #16]
 8000590:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8000594:	440a      	add	r2, r1
 8000596:	601a      	str	r2, [r3, #0]
			HAL_Delay(25);
 8000598:	2019      	movs	r0, #25
 800059a:	f000 fe6d 	bl	8001278 <HAL_Delay>
		while(*tim4_crrs[i] < TIM4->ARR) {
 800059e:	6923      	ldr	r3, [r4, #16]
 80005a0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	4b11      	ldr	r3, [pc, #68]	; (80005ec <led_pwm.0+0x80>)
 80005a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005aa:	429a      	cmp	r2, r3
 80005ac:	d3e5      	bcc.n	800057a <led_pwm.0+0xe>
		}
		while(*tim4_crrs[i] > 0) {
 80005ae:	e011      	b.n	80005d4 <led_pwm.0+0x68>
			*tim4_crrs[i]-=TIM4->ARR/15;
 80005b0:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <led_pwm.0+0x80>)
 80005b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005b4:	4a0e      	ldr	r2, [pc, #56]	; (80005f0 <led_pwm.0+0x84>)
 80005b6:	fba2 2303 	umull	r2, r3, r2, r3
 80005ba:	08da      	lsrs	r2, r3, #3
 80005bc:	6923      	ldr	r3, [r4, #16]
 80005be:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80005c2:	6819      	ldr	r1, [r3, #0]
 80005c4:	6923      	ldr	r3, [r4, #16]
 80005c6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80005ca:	1a8a      	subs	r2, r1, r2
 80005cc:	601a      	str	r2, [r3, #0]
			HAL_Delay(25);
 80005ce:	2019      	movs	r0, #25
 80005d0:	f000 fe52 	bl	8001278 <HAL_Delay>
		while(*tim4_crrs[i] > 0) {
 80005d4:	6923      	ldr	r3, [r4, #16]
 80005d6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d1e7      	bne.n	80005b0 <led_pwm.0+0x44>
		}
	}
 80005e0:	bf00      	nop
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd90      	pop	{r4, r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40000800 	.word	0x40000800
 80005f0:	88888889 	.word	0x88888889

080005f4 <main>:
{
 80005f4:	b590      	push	{r4, r7, lr}
 80005f6:	b089      	sub	sp, #36	; 0x24
 80005f8:	af00      	add	r7, sp, #0
int main(void)
 80005fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005fe:	61bb      	str	r3, [r7, #24]
	volatile uint32_t* tim4_crrs[] = {&TIM4->CCR4, &TIM4->CCR3, &TIM4->CCR2, &TIM4->CCR1};
 8000600:	4b35      	ldr	r3, [pc, #212]	; (80006d8 <main+0xe4>)
 8000602:	1d3c      	adds	r4, r7, #4
 8000604:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000606:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int i = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060e:	f000 fdc1 	bl	8001194 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000612:	f000 f867 	bl	80006e4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000616:	f000 f8cd 	bl	80007b4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 fa45 	bl	8000aa8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800061e:	f000 f8e9 	bl	80007f4 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000622:	f000 f915 	bl	8000850 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000626:	f000 f941 	bl	80008ac <MX_I2S3_Init>
  MX_SPI1_Init();
 800062a:	f000 f96f 	bl	800090c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800062e:	f007 ff7d 	bl	800852c <MX_USB_HOST_Init>
  MX_TIM4_Init();
 8000632:	f000 f9a1 	bl	8000978 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1) != HAL_OK) {
 8000636:	2100      	movs	r1, #0
 8000638:	4828      	ldr	r0, [pc, #160]	; (80006dc <main+0xe8>)
 800063a:	f004 fa2f 	bl	8004a9c <HAL_TIM_PWM_Start>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <main+0x54>
	  Error_Handler();
 8000644:	f000 fb10 	bl	8000c68 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2) != HAL_OK) {
 8000648:	2104      	movs	r1, #4
 800064a:	4824      	ldr	r0, [pc, #144]	; (80006dc <main+0xe8>)
 800064c:	f004 fa26 	bl	8004a9c <HAL_TIM_PWM_Start>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <main+0x66>
	  Error_Handler();
 8000656:	f000 fb07 	bl	8000c68 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3) != HAL_OK) {
 800065a:	2108      	movs	r1, #8
 800065c:	481f      	ldr	r0, [pc, #124]	; (80006dc <main+0xe8>)
 800065e:	f004 fa1d 	bl	8004a9c <HAL_TIM_PWM_Start>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <main+0x78>
	  Error_Handler();
 8000668:	f000 fafe 	bl	8000c68 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4) != HAL_OK) {
 800066c:	210c      	movs	r1, #12
 800066e:	481b      	ldr	r0, [pc, #108]	; (80006dc <main+0xe8>)
 8000670:	f004 fa14 	bl	8004a9c <HAL_TIM_PWM_Start>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <main+0x8a>
	  Error_Handler();
 800067a:	f000 faf5 	bl	8000c68 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
      led_pwm();
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	469c      	mov	ip, r3
 8000682:	f7ff ff73 	bl	800056c <led_pwm.0>

      HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000686:	2006      	movs	r0, #6
 8000688:	f000 ff43 	bl	8001512 <HAL_NVIC_DisableIRQ>
      bool curr_direction = direction;
 800068c:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <main+0xec>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	77fb      	strb	r3, [r7, #31]
      HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000692:	2006      	movs	r0, #6
 8000694:	f000 ff2f 	bl	80014f6 <HAL_NVIC_EnableIRQ>


      if (curr_direction) {
 8000698:	7ffb      	ldrb	r3, [r7, #31]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d00c      	beq.n	80006b8 <main+0xc4>
    	  i++;
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	3301      	adds	r3, #1
 80006a2:	617b      	str	r3, [r7, #20]
    	  i = i%4;
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	425a      	negs	r2, r3
 80006a8:	f003 0303 	and.w	r3, r3, #3
 80006ac:	f002 0203 	and.w	r2, r2, #3
 80006b0:	bf58      	it	pl
 80006b2:	4253      	negpl	r3, r2
 80006b4:	617b      	str	r3, [r7, #20]
 80006b6:	e00b      	b.n	80006d0 <main+0xdc>
      } else {
    	  i=i+3;
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	3303      	adds	r3, #3
 80006bc:	617b      	str	r3, [r7, #20]
    	  i = i%4;
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	425a      	negs	r2, r3
 80006c2:	f003 0303 	and.w	r3, r3, #3
 80006c6:	f002 0203 	and.w	r2, r2, #3
 80006ca:	bf58      	it	pl
 80006cc:	4253      	negpl	r3, r2
 80006ce:	617b      	str	r3, [r7, #20]
      }
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80006d0:	f007 ff52 	bl	8008578 <MX_USB_HOST_Process>
    {
 80006d4:	e7d3      	b.n	800067e <main+0x8a>
 80006d6:	bf00      	nop
 80006d8:	08008dd4 	.word	0x08008dd4
 80006dc:	200001ec 	.word	0x200001ec
 80006e0:	20000000 	.word	0x20000000

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b094      	sub	sp, #80	; 0x50
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	f107 0320 	add.w	r3, r7, #32
 80006ee:	2230      	movs	r2, #48	; 0x30
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f008 fa5c 	bl	8008bb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000708:	2300      	movs	r3, #0
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	4b27      	ldr	r3, [pc, #156]	; (80007ac <SystemClock_Config+0xc8>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	4a26      	ldr	r2, [pc, #152]	; (80007ac <SystemClock_Config+0xc8>)
 8000712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000716:	6413      	str	r3, [r2, #64]	; 0x40
 8000718:	4b24      	ldr	r3, [pc, #144]	; (80007ac <SystemClock_Config+0xc8>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000724:	2300      	movs	r3, #0
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	4b21      	ldr	r3, [pc, #132]	; (80007b0 <SystemClock_Config+0xcc>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a20      	ldr	r2, [pc, #128]	; (80007b0 <SystemClock_Config+0xcc>)
 800072e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000732:	6013      	str	r3, [r2, #0]
 8000734:	4b1e      	ldr	r3, [pc, #120]	; (80007b0 <SystemClock_Config+0xcc>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000740:	2301      	movs	r3, #1
 8000742:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000744:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074a:	2302      	movs	r3, #2
 800074c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800074e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000752:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000754:	2304      	movs	r3, #4
 8000756:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000758:	23c0      	movs	r3, #192	; 0xc0
 800075a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800075c:	2304      	movs	r3, #4
 800075e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000760:	2308      	movs	r3, #8
 8000762:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000764:	f107 0320 	add.w	r3, r7, #32
 8000768:	4618      	mov	r0, r3
 800076a:	f003 fa91 	bl	8003c90 <HAL_RCC_OscConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000774:	f000 fa78 	bl	8000c68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000778:	230f      	movs	r3, #15
 800077a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077c:	2302      	movs	r3, #2
 800077e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000784:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000788:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	2103      	movs	r1, #3
 8000794:	4618      	mov	r0, r3
 8000796:	f003 fcf3 	bl	8004180 <HAL_RCC_ClockConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007a0:	f000 fa62 	bl	8000c68 <Error_Handler>
  }
}
 80007a4:	bf00      	nop
 80007a6:	3750      	adds	r7, #80	; 0x50
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40007000 	.word	0x40007000

080007b4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007ba:	463b      	mov	r3, r7
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
 80007c8:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80007ca:	2301      	movs	r3, #1
 80007cc:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80007ce:	23c8      	movs	r3, #200	; 0xc8
 80007d0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80007d2:	2305      	movs	r3, #5
 80007d4:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80007d6:	2302      	movs	r3, #2
 80007d8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007da:	463b      	mov	r3, r7
 80007dc:	4618      	mov	r0, r3
 80007de:	f003 fedb 	bl	8004598 <HAL_RCCEx_PeriphCLKConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80007e8:	f000 fa3e 	bl	8000c68 <Error_Handler>
  }
}
 80007ec:	bf00      	nop
 80007ee:	3718      	adds	r7, #24
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007f8:	4b12      	ldr	r3, [pc, #72]	; (8000844 <MX_I2C1_Init+0x50>)
 80007fa:	4a13      	ldr	r2, [pc, #76]	; (8000848 <MX_I2C1_Init+0x54>)
 80007fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_I2C1_Init+0x50>)
 8000800:	4a12      	ldr	r2, [pc, #72]	; (800084c <MX_I2C1_Init+0x58>)
 8000802:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_I2C1_Init+0x50>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_I2C1_Init+0x50>)
 800080c:	2200      	movs	r2, #0
 800080e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_I2C1_Init+0x50>)
 8000812:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000816:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000818:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <MX_I2C1_Init+0x50>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_I2C1_Init+0x50>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000824:	4b07      	ldr	r3, [pc, #28]	; (8000844 <MX_I2C1_Init+0x50>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_I2C1_Init+0x50>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000830:	4804      	ldr	r0, [pc, #16]	; (8000844 <MX_I2C1_Init+0x50>)
 8000832:	f002 fc49 	bl	80030c8 <HAL_I2C_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800083c:	f000 fa14 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200000b0 	.word	0x200000b0
 8000848:	40005400 	.word	0x40005400
 800084c:	000186a0 	.word	0x000186a0

08000850 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <MX_I2S2_Init+0x50>)
 8000856:	4a13      	ldr	r2, [pc, #76]	; (80008a4 <MX_I2S2_Init+0x54>)
 8000858:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_I2S2_Init+0x50>)
 800085c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000860:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_I2S2_Init+0x50>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000868:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <MX_I2S2_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_I2S2_Init+0x50>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000874:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <MX_I2S2_Init+0x50>)
 8000876:	4a0c      	ldr	r2, [pc, #48]	; (80008a8 <MX_I2S2_Init+0x58>)
 8000878:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_I2S2_Init+0x50>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <MX_I2S2_Init+0x50>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_I2S2_Init+0x50>)
 8000888:	2201      	movs	r2, #1
 800088a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800088c:	4804      	ldr	r0, [pc, #16]	; (80008a0 <MX_I2S2_Init+0x50>)
 800088e:	f002 fd5f 	bl	8003350 <HAL_I2S_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000898:	f000 f9e6 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000104 	.word	0x20000104
 80008a4:	40003800 	.word	0x40003800
 80008a8:	00017700 	.word	0x00017700

080008ac <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80008b0:	4b13      	ldr	r3, [pc, #76]	; (8000900 <MX_I2S3_Init+0x54>)
 80008b2:	4a14      	ldr	r2, [pc, #80]	; (8000904 <MX_I2S3_Init+0x58>)
 80008b4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80008b6:	4b12      	ldr	r3, [pc, #72]	; (8000900 <MX_I2S3_Init+0x54>)
 80008b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008bc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <MX_I2S3_Init+0x54>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008c4:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_I2S3_Init+0x54>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008ca:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <MX_I2S3_Init+0x54>)
 80008cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008d0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <MX_I2S3_Init+0x54>)
 80008d4:	4a0c      	ldr	r2, [pc, #48]	; (8000908 <MX_I2S3_Init+0x5c>)
 80008d6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_I2S3_Init+0x54>)
 80008da:	2200      	movs	r2, #0
 80008dc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <MX_I2S3_Init+0x54>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_I2S3_Init+0x54>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_I2S3_Init+0x54>)
 80008ec:	f002 fd30 	bl	8003350 <HAL_I2S_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008f6:	f000 f9b7 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	2000014c 	.word	0x2000014c
 8000904:	40003c00 	.word	0x40003c00
 8000908:	00017700 	.word	0x00017700

0800090c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000910:	4b17      	ldr	r3, [pc, #92]	; (8000970 <MX_SPI1_Init+0x64>)
 8000912:	4a18      	ldr	r2, [pc, #96]	; (8000974 <MX_SPI1_Init+0x68>)
 8000914:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000916:	4b16      	ldr	r3, [pc, #88]	; (8000970 <MX_SPI1_Init+0x64>)
 8000918:	f44f 7282 	mov.w	r2, #260	; 0x104
 800091c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800091e:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MX_SPI1_Init+0x64>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000924:	4b12      	ldr	r3, [pc, #72]	; (8000970 <MX_SPI1_Init+0x64>)
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_SPI1_Init+0x64>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000930:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <MX_SPI1_Init+0x64>)
 8000932:	2200      	movs	r2, #0
 8000934:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_SPI1_Init+0x64>)
 8000938:	f44f 7200 	mov.w	r2, #512	; 0x200
 800093c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800093e:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_SPI1_Init+0x64>)
 8000940:	2200      	movs	r2, #0
 8000942:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000944:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <MX_SPI1_Init+0x64>)
 8000946:	2200      	movs	r2, #0
 8000948:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_SPI1_Init+0x64>)
 800094c:	2200      	movs	r2, #0
 800094e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000950:	4b07      	ldr	r3, [pc, #28]	; (8000970 <MX_SPI1_Init+0x64>)
 8000952:	2200      	movs	r2, #0
 8000954:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_SPI1_Init+0x64>)
 8000958:	220a      	movs	r2, #10
 800095a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800095c:	4804      	ldr	r0, [pc, #16]	; (8000970 <MX_SPI1_Init+0x64>)
 800095e:	f003 ff6b 	bl	8004838 <HAL_SPI_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000968:	f000 f97e 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000194 	.word	0x20000194
 8000974:	40013000 	.word	0x40013000

08000978 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08e      	sub	sp, #56	; 0x38
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800097e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800098c:	f107 0320 	add.w	r3, r7, #32
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
 80009a4:	615a      	str	r2, [r3, #20]
 80009a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009a8:	4b3d      	ldr	r3, [pc, #244]	; (8000aa0 <MX_TIM4_Init+0x128>)
 80009aa:	4a3e      	ldr	r2, [pc, #248]	; (8000aa4 <MX_TIM4_Init+0x12c>)
 80009ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80009ae:	4b3c      	ldr	r3, [pc, #240]	; (8000aa0 <MX_TIM4_Init+0x128>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b4:	4b3a      	ldr	r3, [pc, #232]	; (8000aa0 <MX_TIM4_Init+0x128>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80009ba:	4b39      	ldr	r3, [pc, #228]	; (8000aa0 <MX_TIM4_Init+0x128>)
 80009bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009c0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c2:	4b37      	ldr	r3, [pc, #220]	; (8000aa0 <MX_TIM4_Init+0x128>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c8:	4b35      	ldr	r3, [pc, #212]	; (8000aa0 <MX_TIM4_Init+0x128>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80009ce:	4834      	ldr	r0, [pc, #208]	; (8000aa0 <MX_TIM4_Init+0x128>)
 80009d0:	f003 ffbb 	bl	800494a <HAL_TIM_Base_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80009da:	f000 f945 	bl	8000c68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80009e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009e8:	4619      	mov	r1, r3
 80009ea:	482d      	ldr	r0, [pc, #180]	; (8000aa0 <MX_TIM4_Init+0x128>)
 80009ec:	f004 f9c8 	bl	8004d80 <HAL_TIM_ConfigClockSource>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80009f6:	f000 f937 	bl	8000c68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009fa:	4829      	ldr	r0, [pc, #164]	; (8000aa0 <MX_TIM4_Init+0x128>)
 80009fc:	f003 fff4 	bl	80049e8 <HAL_TIM_PWM_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000a06:	f000 f92f 	bl	8000c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a12:	f107 0320 	add.w	r3, r7, #32
 8000a16:	4619      	mov	r1, r3
 8000a18:	4821      	ldr	r0, [pc, #132]	; (8000aa0 <MX_TIM4_Init+0x128>)
 8000a1a:	f004 fd45 	bl	80054a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000a24:	f000 f920 	bl	8000c68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a28:	2360      	movs	r3, #96	; 0x60
 8000a2a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4818      	ldr	r0, [pc, #96]	; (8000aa0 <MX_TIM4_Init+0x128>)
 8000a40:	f004 f8dc 	bl	8004bfc <HAL_TIM_PWM_ConfigChannel>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000a4a:	f000 f90d 	bl	8000c68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	2204      	movs	r2, #4
 8000a52:	4619      	mov	r1, r3
 8000a54:	4812      	ldr	r0, [pc, #72]	; (8000aa0 <MX_TIM4_Init+0x128>)
 8000a56:	f004 f8d1 	bl	8004bfc <HAL_TIM_PWM_ConfigChannel>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000a60:	f000 f902 	bl	8000c68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	2208      	movs	r2, #8
 8000a68:	4619      	mov	r1, r3
 8000a6a:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <MX_TIM4_Init+0x128>)
 8000a6c:	f004 f8c6 	bl	8004bfc <HAL_TIM_PWM_ConfigChannel>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000a76:	f000 f8f7 	bl	8000c68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	220c      	movs	r2, #12
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4807      	ldr	r0, [pc, #28]	; (8000aa0 <MX_TIM4_Init+0x128>)
 8000a82:	f004 f8bb 	bl	8004bfc <HAL_TIM_PWM_ConfigChannel>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8000a8c:	f000 f8ec 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a90:	4803      	ldr	r0, [pc, #12]	; (8000aa0 <MX_TIM4_Init+0x128>)
 8000a92:	f000 fa97 	bl	8000fc4 <HAL_TIM_MspPostInit>

}
 8000a96:	bf00      	nop
 8000a98:	3738      	adds	r7, #56	; 0x38
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200001ec 	.word	0x200001ec
 8000aa4:	40000800 	.word	0x40000800

08000aa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08c      	sub	sp, #48	; 0x30
 8000aac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61bb      	str	r3, [r7, #24]
 8000ac2:	4b64      	ldr	r3, [pc, #400]	; (8000c54 <MX_GPIO_Init+0x1ac>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a63      	ldr	r2, [pc, #396]	; (8000c54 <MX_GPIO_Init+0x1ac>)
 8000ac8:	f043 0310 	orr.w	r3, r3, #16
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b61      	ldr	r3, [pc, #388]	; (8000c54 <MX_GPIO_Init+0x1ac>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0310 	and.w	r3, r3, #16
 8000ad6:	61bb      	str	r3, [r7, #24]
 8000ad8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
 8000ade:	4b5d      	ldr	r3, [pc, #372]	; (8000c54 <MX_GPIO_Init+0x1ac>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a5c      	ldr	r2, [pc, #368]	; (8000c54 <MX_GPIO_Init+0x1ac>)
 8000ae4:	f043 0304 	orr.w	r3, r3, #4
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b5a      	ldr	r3, [pc, #360]	; (8000c54 <MX_GPIO_Init+0x1ac>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0304 	and.w	r3, r3, #4
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	4b56      	ldr	r3, [pc, #344]	; (8000c54 <MX_GPIO_Init+0x1ac>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a55      	ldr	r2, [pc, #340]	; (8000c54 <MX_GPIO_Init+0x1ac>)
 8000b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b53      	ldr	r3, [pc, #332]	; (8000c54 <MX_GPIO_Init+0x1ac>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	4b4f      	ldr	r3, [pc, #316]	; (8000c54 <MX_GPIO_Init+0x1ac>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a4e      	ldr	r2, [pc, #312]	; (8000c54 <MX_GPIO_Init+0x1ac>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b4c      	ldr	r3, [pc, #304]	; (8000c54 <MX_GPIO_Init+0x1ac>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	4b48      	ldr	r3, [pc, #288]	; (8000c54 <MX_GPIO_Init+0x1ac>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a47      	ldr	r2, [pc, #284]	; (8000c54 <MX_GPIO_Init+0x1ac>)
 8000b38:	f043 0302 	orr.w	r3, r3, #2
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b45      	ldr	r3, [pc, #276]	; (8000c54 <MX_GPIO_Init+0x1ac>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0302 	and.w	r3, r3, #2
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	4b41      	ldr	r3, [pc, #260]	; (8000c54 <MX_GPIO_Init+0x1ac>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a40      	ldr	r2, [pc, #256]	; (8000c54 <MX_GPIO_Init+0x1ac>)
 8000b54:	f043 0308 	orr.w	r3, r3, #8
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b3e      	ldr	r3, [pc, #248]	; (8000c54 <MX_GPIO_Init+0x1ac>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0308 	and.w	r3, r3, #8
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2108      	movs	r1, #8
 8000b6a:	483b      	ldr	r0, [pc, #236]	; (8000c58 <MX_GPIO_Init+0x1b0>)
 8000b6c:	f000 fe70 	bl	8001850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b70:	2201      	movs	r2, #1
 8000b72:	2101      	movs	r1, #1
 8000b74:	4839      	ldr	r0, [pc, #228]	; (8000c5c <MX_GPIO_Init+0x1b4>)
 8000b76:	f000 fe6b 	bl	8001850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2110      	movs	r1, #16
 8000b7e:	4838      	ldr	r0, [pc, #224]	; (8000c60 <MX_GPIO_Init+0x1b8>)
 8000b80:	f000 fe66 	bl	8001850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000b84:	2304      	movs	r3, #4
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 031c 	add.w	r3, r7, #28
 8000b94:	4619      	mov	r1, r3
 8000b96:	4830      	ldr	r0, [pc, #192]	; (8000c58 <MX_GPIO_Init+0x1b0>)
 8000b98:	f000 fcd6 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000b9c:	2308      	movs	r3, #8
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000bac:	f107 031c 	add.w	r3, r7, #28
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4829      	ldr	r0, [pc, #164]	; (8000c58 <MX_GPIO_Init+0x1b0>)
 8000bb4:	f000 fcc8 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000bb8:	2332      	movs	r3, #50	; 0x32
 8000bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bbc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bc6:	f107 031c 	add.w	r3, r7, #28
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4822      	ldr	r0, [pc, #136]	; (8000c58 <MX_GPIO_Init+0x1b0>)
 8000bce:	f000 fcbb 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000be2:	f107 031c 	add.w	r3, r7, #28
 8000be6:	4619      	mov	r1, r3
 8000be8:	481c      	ldr	r0, [pc, #112]	; (8000c5c <MX_GPIO_Init+0x1b4>)
 8000bea:	f000 fcad 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_BUTTON_Pin */
  GPIO_InitStruct.Pin = USR_BUTTON_Pin;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000bf2:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000bf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USR_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000bfc:	f107 031c 	add.w	r3, r7, #28
 8000c00:	4619      	mov	r1, r3
 8000c02:	4818      	ldr	r0, [pc, #96]	; (8000c64 <MX_GPIO_Init+0x1bc>)
 8000c04:	f000 fca0 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8000c08:	2310      	movs	r3, #16
 8000c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8000c18:	f107 031c 	add.w	r3, r7, #28
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4810      	ldr	r0, [pc, #64]	; (8000c60 <MX_GPIO_Init+0x1b8>)
 8000c20:	f000 fc92 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c24:	2320      	movs	r3, #32
 8000c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c30:	f107 031c 	add.w	r3, r7, #28
 8000c34:	4619      	mov	r1, r3
 8000c36:	480a      	ldr	r0, [pc, #40]	; (8000c60 <MX_GPIO_Init+0x1b8>)
 8000c38:	f000 fc86 	bl	8001548 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2100      	movs	r1, #0
 8000c40:	2006      	movs	r0, #6
 8000c42:	f000 fc3c 	bl	80014be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c46:	2006      	movs	r0, #6
 8000c48:	f000 fc55 	bl	80014f6 <HAL_NVIC_EnableIRQ>

}
 8000c4c:	bf00      	nop
 8000c4e:	3730      	adds	r7, #48	; 0x30
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	40020800 	.word	0x40020800
 8000c60:	40020c00 	.word	0x40020c00
 8000c64:	40020000 	.word	0x40020000

08000c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c6c:	b672      	cpsid	i
}
 8000c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <Error_Handler+0x8>
	...

08000c74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	4a0f      	ldr	r2, [pc, #60]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c88:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8a:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	603b      	str	r3, [r7, #0]
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	4a08      	ldr	r2, [pc, #32]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cae:	603b      	str	r3, [r7, #0]
 8000cb0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cb2:	2007      	movs	r0, #7
 8000cb4:	f000 fbf8 	bl	80014a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40023800 	.word	0x40023800

08000cc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08a      	sub	sp, #40	; 0x28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a19      	ldr	r2, [pc, #100]	; (8000d48 <HAL_I2C_MspInit+0x84>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d12c      	bne.n	8000d40 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	4b18      	ldr	r3, [pc, #96]	; (8000d4c <HAL_I2C_MspInit+0x88>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a17      	ldr	r2, [pc, #92]	; (8000d4c <HAL_I2C_MspInit+0x88>)
 8000cf0:	f043 0302 	orr.w	r3, r3, #2
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <HAL_I2C_MspInit+0x88>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d02:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d08:	2312      	movs	r3, #18
 8000d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d14:	2304      	movs	r3, #4
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	480c      	ldr	r0, [pc, #48]	; (8000d50 <HAL_I2C_MspInit+0x8c>)
 8000d20:	f000 fc12 	bl	8001548 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d24:	2300      	movs	r3, #0
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <HAL_I2C_MspInit+0x88>)
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2c:	4a07      	ldr	r2, [pc, #28]	; (8000d4c <HAL_I2C_MspInit+0x88>)
 8000d2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d32:	6413      	str	r3, [r2, #64]	; 0x40
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <HAL_I2C_MspInit+0x88>)
 8000d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d40:	bf00      	nop
 8000d42:	3728      	adds	r7, #40	; 0x28
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40005400 	.word	0x40005400
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40020400 	.word	0x40020400

08000d54 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08e      	sub	sp, #56	; 0x38
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a59      	ldr	r2, [pc, #356]	; (8000ed8 <HAL_I2S_MspInit+0x184>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d15b      	bne.n	8000e2e <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	623b      	str	r3, [r7, #32]
 8000d7a:	4b58      	ldr	r3, [pc, #352]	; (8000edc <HAL_I2S_MspInit+0x188>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	4a57      	ldr	r2, [pc, #348]	; (8000edc <HAL_I2S_MspInit+0x188>)
 8000d80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d84:	6413      	str	r3, [r2, #64]	; 0x40
 8000d86:	4b55      	ldr	r3, [pc, #340]	; (8000edc <HAL_I2S_MspInit+0x188>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d8e:	623b      	str	r3, [r7, #32]
 8000d90:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
 8000d96:	4b51      	ldr	r3, [pc, #324]	; (8000edc <HAL_I2S_MspInit+0x188>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a50      	ldr	r2, [pc, #320]	; (8000edc <HAL_I2S_MspInit+0x188>)
 8000d9c:	f043 0304 	orr.w	r3, r3, #4
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b4e      	ldr	r3, [pc, #312]	; (8000edc <HAL_I2S_MspInit+0x188>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0304 	and.w	r3, r3, #4
 8000daa:	61fb      	str	r3, [r7, #28]
 8000dac:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	61bb      	str	r3, [r7, #24]
 8000db2:	4b4a      	ldr	r3, [pc, #296]	; (8000edc <HAL_I2S_MspInit+0x188>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a49      	ldr	r2, [pc, #292]	; (8000edc <HAL_I2S_MspInit+0x188>)
 8000db8:	f043 0302 	orr.w	r3, r3, #2
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b47      	ldr	r3, [pc, #284]	; (8000edc <HAL_I2S_MspInit+0x188>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	61bb      	str	r3, [r7, #24]
 8000dc8:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dca:	2304      	movs	r3, #4
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000dda:	2306      	movs	r3, #6
 8000ddc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de2:	4619      	mov	r1, r3
 8000de4:	483e      	ldr	r0, [pc, #248]	; (8000ee0 <HAL_I2S_MspInit+0x18c>)
 8000de6:	f000 fbaf 	bl	8001548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000dea:	2308      	movs	r3, #8
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dfa:	2305      	movs	r3, #5
 8000dfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e02:	4619      	mov	r1, r3
 8000e04:	4836      	ldr	r0, [pc, #216]	; (8000ee0 <HAL_I2S_MspInit+0x18c>)
 8000e06:	f000 fb9f 	bl	8001548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000e0a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e1c:	2305      	movs	r3, #5
 8000e1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e24:	4619      	mov	r1, r3
 8000e26:	482f      	ldr	r0, [pc, #188]	; (8000ee4 <HAL_I2S_MspInit+0x190>)
 8000e28:	f000 fb8e 	bl	8001548 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e2c:	e04f      	b.n	8000ece <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a2d      	ldr	r2, [pc, #180]	; (8000ee8 <HAL_I2S_MspInit+0x194>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d14a      	bne.n	8000ece <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
 8000e3c:	4b27      	ldr	r3, [pc, #156]	; (8000edc <HAL_I2S_MspInit+0x188>)
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e40:	4a26      	ldr	r2, [pc, #152]	; (8000edc <HAL_I2S_MspInit+0x188>)
 8000e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e46:	6413      	str	r3, [r2, #64]	; 0x40
 8000e48:	4b24      	ldr	r3, [pc, #144]	; (8000edc <HAL_I2S_MspInit+0x188>)
 8000e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e50:	617b      	str	r3, [r7, #20]
 8000e52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e54:	2300      	movs	r3, #0
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	4b20      	ldr	r3, [pc, #128]	; (8000edc <HAL_I2S_MspInit+0x188>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5c:	4a1f      	ldr	r2, [pc, #124]	; (8000edc <HAL_I2S_MspInit+0x188>)
 8000e5e:	f043 0301 	orr.w	r3, r3, #1
 8000e62:	6313      	str	r3, [r2, #48]	; 0x30
 8000e64:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <HAL_I2S_MspInit+0x188>)
 8000e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	4b19      	ldr	r3, [pc, #100]	; (8000edc <HAL_I2S_MspInit+0x188>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e78:	4a18      	ldr	r2, [pc, #96]	; (8000edc <HAL_I2S_MspInit+0x188>)
 8000e7a:	f043 0304 	orr.w	r3, r3, #4
 8000e7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e80:	4b16      	ldr	r3, [pc, #88]	; (8000edc <HAL_I2S_MspInit+0x188>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e84:	f003 0304 	and.w	r3, r3, #4
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e8c:	2310      	movs	r3, #16
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e9c:	2306      	movs	r3, #6
 8000e9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4811      	ldr	r0, [pc, #68]	; (8000eec <HAL_I2S_MspInit+0x198>)
 8000ea8:	f000 fb4e 	bl	8001548 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000eac:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ebe:	2306      	movs	r3, #6
 8000ec0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <HAL_I2S_MspInit+0x18c>)
 8000eca:	f000 fb3d 	bl	8001548 <HAL_GPIO_Init>
}
 8000ece:	bf00      	nop
 8000ed0:	3738      	adds	r7, #56	; 0x38
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40003800 	.word	0x40003800
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020800 	.word	0x40020800
 8000ee4:	40020400 	.word	0x40020400
 8000ee8:	40003c00 	.word	0x40003c00
 8000eec:	40020000 	.word	0x40020000

08000ef0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	; 0x28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a19      	ldr	r2, [pc, #100]	; (8000f74 <HAL_SPI_MspInit+0x84>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d12b      	bne.n	8000f6a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <HAL_SPI_MspInit+0x88>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1a:	4a17      	ldr	r2, [pc, #92]	; (8000f78 <HAL_SPI_MspInit+0x88>)
 8000f1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f20:	6453      	str	r3, [r2, #68]	; 0x44
 8000f22:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <HAL_SPI_MspInit+0x88>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <HAL_SPI_MspInit+0x88>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a10      	ldr	r2, [pc, #64]	; (8000f78 <HAL_SPI_MspInit+0x88>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <HAL_SPI_MspInit+0x88>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f4a:	23e0      	movs	r3, #224	; 0xe0
 8000f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f56:	2303      	movs	r3, #3
 8000f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f5a:	2305      	movs	r3, #5
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	4805      	ldr	r0, [pc, #20]	; (8000f7c <HAL_SPI_MspInit+0x8c>)
 8000f66:	f000 faef 	bl	8001548 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f6a:	bf00      	nop
 8000f6c:	3728      	adds	r7, #40	; 0x28
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40013000 	.word	0x40013000
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020000 	.word	0x40020000

08000f80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a0b      	ldr	r2, [pc, #44]	; (8000fbc <HAL_TIM_Base_MspInit+0x3c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d10d      	bne.n	8000fae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <HAL_TIM_Base_MspInit+0x40>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	4a09      	ldr	r2, [pc, #36]	; (8000fc0 <HAL_TIM_Base_MspInit+0x40>)
 8000f9c:	f043 0304 	orr.w	r3, r3, #4
 8000fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa2:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <HAL_TIM_Base_MspInit+0x40>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000fae:	bf00      	nop
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	40000800 	.word	0x40000800
 8000fc0:	40023800 	.word	0x40023800

08000fc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 030c 	add.w	r3, r7, #12
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a12      	ldr	r2, [pc, #72]	; (800102c <HAL_TIM_MspPostInit+0x68>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d11e      	bne.n	8001024 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <HAL_TIM_MspPostInit+0x6c>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a10      	ldr	r2, [pc, #64]	; (8001030 <HAL_TIM_MspPostInit+0x6c>)
 8000ff0:	f043 0308 	orr.w	r3, r3, #8
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <HAL_TIM_MspPostInit+0x6c>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0308 	and.w	r3, r3, #8
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001002:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001006:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001010:	2300      	movs	r3, #0
 8001012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001014:	2302      	movs	r3, #2
 8001016:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	4619      	mov	r1, r3
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <HAL_TIM_MspPostInit+0x70>)
 8001020:	f000 fa92 	bl	8001548 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001024:	bf00      	nop
 8001026:	3720      	adds	r7, #32
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40000800 	.word	0x40000800
 8001030:	40023800 	.word	0x40023800
 8001034:	40020c00 	.word	0x40020c00

08001038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800103c:	e7fe      	b.n	800103c <NMI_Handler+0x4>

0800103e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001042:	e7fe      	b.n	8001042 <HardFault_Handler+0x4>

08001044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <MemManage_Handler+0x4>

0800104a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800104e:	e7fe      	b.n	800104e <BusFault_Handler+0x4>

08001050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <UsageFault_Handler+0x4>

08001056 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001084:	f000 f8d8 	bl	8001238 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}

0800108c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BUTTON_Pin);
 8001090:	2001      	movs	r0, #1
 8001092:	f000 fbf7 	bl	8001884 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80010a0:	4802      	ldr	r0, [pc, #8]	; (80010ac <OTG_FS_IRQHandler+0x10>)
 80010a2:	f000 fe71 	bl	8001d88 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000620 	.word	0x20000620

080010b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010b8:	4a14      	ldr	r2, [pc, #80]	; (800110c <_sbrk+0x5c>)
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <_sbrk+0x60>)
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c4:	4b13      	ldr	r3, [pc, #76]	; (8001114 <_sbrk+0x64>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d102      	bne.n	80010d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <_sbrk+0x64>)
 80010ce:	4a12      	ldr	r2, [pc, #72]	; (8001118 <_sbrk+0x68>)
 80010d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <_sbrk+0x64>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d207      	bcs.n	80010f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010e0:	f007 fd2c 	bl	8008b3c <__errno>
 80010e4:	4603      	mov	r3, r0
 80010e6:	220c      	movs	r2, #12
 80010e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
 80010ee:	e009      	b.n	8001104 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <_sbrk+0x64>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010f6:	4b07      	ldr	r3, [pc, #28]	; (8001114 <_sbrk+0x64>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	4a05      	ldr	r2, [pc, #20]	; (8001114 <_sbrk+0x64>)
 8001100:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001102:	68fb      	ldr	r3, [r7, #12]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3718      	adds	r7, #24
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20020000 	.word	0x20020000
 8001110:	00000400 	.word	0x00000400
 8001114:	2000023c 	.word	0x2000023c
 8001118:	20000938 	.word	0x20000938

0800111c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <SystemInit+0x20>)
 8001122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001126:	4a05      	ldr	r2, [pc, #20]	; (800113c <SystemInit+0x20>)
 8001128:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800112c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001140:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001178 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001144:	480d      	ldr	r0, [pc, #52]	; (800117c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001146:	490e      	ldr	r1, [pc, #56]	; (8001180 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001148:	4a0e      	ldr	r2, [pc, #56]	; (8001184 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800114c:	e002      	b.n	8001154 <LoopCopyDataInit>

0800114e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001150:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001152:	3304      	adds	r3, #4

08001154 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001154:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001156:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001158:	d3f9      	bcc.n	800114e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800115a:	4a0b      	ldr	r2, [pc, #44]	; (8001188 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800115c:	4c0b      	ldr	r4, [pc, #44]	; (800118c <LoopFillZerobss+0x26>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001160:	e001      	b.n	8001166 <LoopFillZerobss>

08001162 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001162:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001164:	3204      	adds	r2, #4

08001166 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001166:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001168:	d3fb      	bcc.n	8001162 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800116a:	f7ff ffd7 	bl	800111c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800116e:	f007 fceb 	bl	8008b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001172:	f7ff fa3f 	bl	80005f4 <main>
  bx  lr    
 8001176:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001178:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800117c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001180:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001184:	08008e10 	.word	0x08008e10
  ldr r2, =_sbss
 8001188:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 800118c:	20000934 	.word	0x20000934

08001190 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001190:	e7fe      	b.n	8001190 <ADC_IRQHandler>
	...

08001194 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001198:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <HAL_Init+0x40>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a0d      	ldr	r2, [pc, #52]	; (80011d4 <HAL_Init+0x40>)
 800119e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <HAL_Init+0x40>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a0a      	ldr	r2, [pc, #40]	; (80011d4 <HAL_Init+0x40>)
 80011aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <HAL_Init+0x40>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a07      	ldr	r2, [pc, #28]	; (80011d4 <HAL_Init+0x40>)
 80011b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011bc:	2003      	movs	r0, #3
 80011be:	f000 f973 	bl	80014a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011c2:	2000      	movs	r0, #0
 80011c4:	f000 f808 	bl	80011d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c8:	f7ff fd54 	bl	8000c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40023c00 	.word	0x40023c00

080011d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_InitTick+0x54>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <HAL_InitTick+0x58>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4619      	mov	r1, r3
 80011ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80011f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 f999 	bl	800152e <HAL_SYSTICK_Config>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e00e      	b.n	8001224 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b0f      	cmp	r3, #15
 800120a:	d80a      	bhi.n	8001222 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800120c:	2200      	movs	r2, #0
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f000 f953 	bl	80014be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001218:	4a06      	ldr	r2, [pc, #24]	; (8001234 <HAL_InitTick+0x5c>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800121e:	2300      	movs	r3, #0
 8001220:	e000      	b.n	8001224 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
}
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000004 	.word	0x20000004
 8001230:	2000000c 	.word	0x2000000c
 8001234:	20000008 	.word	0x20000008

08001238 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <HAL_IncTick+0x20>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_IncTick+0x24>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4413      	add	r3, r2
 8001248:	4a04      	ldr	r2, [pc, #16]	; (800125c <HAL_IncTick+0x24>)
 800124a:	6013      	str	r3, [r2, #0]
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	2000000c 	.word	0x2000000c
 800125c:	20000240 	.word	0x20000240

08001260 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return uwTick;
 8001264:	4b03      	ldr	r3, [pc, #12]	; (8001274 <HAL_GetTick+0x14>)
 8001266:	681b      	ldr	r3, [r3, #0]
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20000240 	.word	0x20000240

08001278 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001280:	f7ff ffee 	bl	8001260 <HAL_GetTick>
 8001284:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001290:	d005      	beq.n	800129e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <HAL_Delay+0x44>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4413      	add	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800129e:	bf00      	nop
 80012a0:	f7ff ffde 	bl	8001260 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d8f7      	bhi.n	80012a0 <HAL_Delay+0x28>
  {
  }
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	2000000c 	.word	0x2000000c

080012c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012dc:	4013      	ands	r3, r2
 80012de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f2:	4a04      	ldr	r2, [pc, #16]	; (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	60d3      	str	r3, [r2, #12]
}
 80012f8:	bf00      	nop
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <__NVIC_GetPriorityGrouping+0x18>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	0a1b      	lsrs	r3, r3, #8
 8001312:	f003 0307 	and.w	r3, r3, #7
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	2b00      	cmp	r3, #0
 8001334:	db0b      	blt.n	800134e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	f003 021f 	and.w	r2, r3, #31
 800133c:	4907      	ldr	r1, [pc, #28]	; (800135c <__NVIC_EnableIRQ+0x38>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	095b      	lsrs	r3, r3, #5
 8001344:	2001      	movs	r0, #1
 8001346:	fa00 f202 	lsl.w	r2, r0, r2
 800134a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000e100 	.word	0xe000e100

08001360 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	2b00      	cmp	r3, #0
 8001370:	db12      	blt.n	8001398 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	f003 021f 	and.w	r2, r3, #31
 8001378:	490a      	ldr	r1, [pc, #40]	; (80013a4 <__NVIC_DisableIRQ+0x44>)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	095b      	lsrs	r3, r3, #5
 8001380:	2001      	movs	r0, #1
 8001382:	fa00 f202 	lsl.w	r2, r0, r2
 8001386:	3320      	adds	r3, #32
 8001388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800138c:	f3bf 8f4f 	dsb	sy
}
 8001390:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001392:	f3bf 8f6f 	isb	sy
}
 8001396:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000e100 	.word	0xe000e100

080013a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	6039      	str	r1, [r7, #0]
 80013b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	db0a      	blt.n	80013d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	490c      	ldr	r1, [pc, #48]	; (80013f4 <__NVIC_SetPriority+0x4c>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	0112      	lsls	r2, r2, #4
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	440b      	add	r3, r1
 80013cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d0:	e00a      	b.n	80013e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4908      	ldr	r1, [pc, #32]	; (80013f8 <__NVIC_SetPriority+0x50>)
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	3b04      	subs	r3, #4
 80013e0:	0112      	lsls	r2, r2, #4
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	440b      	add	r3, r1
 80013e6:	761a      	strb	r2, [r3, #24]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000e100 	.word	0xe000e100
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b089      	sub	sp, #36	; 0x24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f1c3 0307 	rsb	r3, r3, #7
 8001416:	2b04      	cmp	r3, #4
 8001418:	bf28      	it	cs
 800141a:	2304      	movcs	r3, #4
 800141c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3304      	adds	r3, #4
 8001422:	2b06      	cmp	r3, #6
 8001424:	d902      	bls.n	800142c <NVIC_EncodePriority+0x30>
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3b03      	subs	r3, #3
 800142a:	e000      	b.n	800142e <NVIC_EncodePriority+0x32>
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	f04f 32ff 	mov.w	r2, #4294967295
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43da      	mvns	r2, r3
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	401a      	ands	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001444:	f04f 31ff 	mov.w	r1, #4294967295
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	fa01 f303 	lsl.w	r3, r1, r3
 800144e:	43d9      	mvns	r1, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	4313      	orrs	r3, r2
         );
}
 8001456:	4618      	mov	r0, r3
 8001458:	3724      	adds	r7, #36	; 0x24
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3b01      	subs	r3, #1
 8001470:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001474:	d301      	bcc.n	800147a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001476:	2301      	movs	r3, #1
 8001478:	e00f      	b.n	800149a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147a:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <SysTick_Config+0x40>)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001482:	210f      	movs	r1, #15
 8001484:	f04f 30ff 	mov.w	r0, #4294967295
 8001488:	f7ff ff8e 	bl	80013a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <SysTick_Config+0x40>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001492:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <SysTick_Config+0x40>)
 8001494:	2207      	movs	r2, #7
 8001496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	e000e010 	.word	0xe000e010

080014a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff ff05 	bl	80012c0 <__NVIC_SetPriorityGrouping>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014be:	b580      	push	{r7, lr}
 80014c0:	b086      	sub	sp, #24
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	60b9      	str	r1, [r7, #8]
 80014c8:	607a      	str	r2, [r7, #4]
 80014ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d0:	f7ff ff1a 	bl	8001308 <__NVIC_GetPriorityGrouping>
 80014d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	68b9      	ldr	r1, [r7, #8]
 80014da:	6978      	ldr	r0, [r7, #20]
 80014dc:	f7ff ff8e 	bl	80013fc <NVIC_EncodePriority>
 80014e0:	4602      	mov	r2, r0
 80014e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e6:	4611      	mov	r1, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff5d 	bl	80013a8 <__NVIC_SetPriority>
}
 80014ee:	bf00      	nop
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	4603      	mov	r3, r0
 80014fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff0d 	bl	8001324 <__NVIC_EnableIRQ>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	4603      	mov	r3, r0
 800151a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800151c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ff1d 	bl	8001360 <__NVIC_DisableIRQ>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff ff94 	bl	8001464 <SysTick_Config>
 800153c:	4603      	mov	r3, r0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001548:	b480      	push	{r7}
 800154a:	b089      	sub	sp, #36	; 0x24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
 8001562:	e159      	b.n	8001818 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001564:	2201      	movs	r2, #1
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	4013      	ands	r3, r2
 8001576:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	429a      	cmp	r2, r3
 800157e:	f040 8148 	bne.w	8001812 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	2b01      	cmp	r3, #1
 800158c:	d005      	beq.n	800159a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001596:	2b02      	cmp	r3, #2
 8001598:	d130      	bne.n	80015fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	2203      	movs	r2, #3
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4013      	ands	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	68da      	ldr	r2, [r3, #12]
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015d0:	2201      	movs	r2, #1
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	091b      	lsrs	r3, r3, #4
 80015e6:	f003 0201 	and.w	r2, r3, #1
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 0303 	and.w	r3, r3, #3
 8001604:	2b03      	cmp	r3, #3
 8001606:	d017      	beq.n	8001638 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	2203      	movs	r2, #3
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 0303 	and.w	r3, r3, #3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d123      	bne.n	800168c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	08da      	lsrs	r2, r3, #3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3208      	adds	r2, #8
 800164c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001650:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	f003 0307 	and.w	r3, r3, #7
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	220f      	movs	r2, #15
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	691a      	ldr	r2, [r3, #16]
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	08da      	lsrs	r2, r3, #3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3208      	adds	r2, #8
 8001686:	69b9      	ldr	r1, [r7, #24]
 8001688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	2203      	movs	r2, #3
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 0203 	and.w	r2, r3, #3
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f000 80a2 	beq.w	8001812 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	4b57      	ldr	r3, [pc, #348]	; (8001830 <HAL_GPIO_Init+0x2e8>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	4a56      	ldr	r2, [pc, #344]	; (8001830 <HAL_GPIO_Init+0x2e8>)
 80016d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016dc:	6453      	str	r3, [r2, #68]	; 0x44
 80016de:	4b54      	ldr	r3, [pc, #336]	; (8001830 <HAL_GPIO_Init+0x2e8>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ea:	4a52      	ldr	r2, [pc, #328]	; (8001834 <HAL_GPIO_Init+0x2ec>)
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	089b      	lsrs	r3, r3, #2
 80016f0:	3302      	adds	r3, #2
 80016f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f003 0303 	and.w	r3, r3, #3
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	220f      	movs	r2, #15
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43db      	mvns	r3, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4013      	ands	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a49      	ldr	r2, [pc, #292]	; (8001838 <HAL_GPIO_Init+0x2f0>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d019      	beq.n	800174a <HAL_GPIO_Init+0x202>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a48      	ldr	r2, [pc, #288]	; (800183c <HAL_GPIO_Init+0x2f4>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d013      	beq.n	8001746 <HAL_GPIO_Init+0x1fe>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a47      	ldr	r2, [pc, #284]	; (8001840 <HAL_GPIO_Init+0x2f8>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d00d      	beq.n	8001742 <HAL_GPIO_Init+0x1fa>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a46      	ldr	r2, [pc, #280]	; (8001844 <HAL_GPIO_Init+0x2fc>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d007      	beq.n	800173e <HAL_GPIO_Init+0x1f6>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a45      	ldr	r2, [pc, #276]	; (8001848 <HAL_GPIO_Init+0x300>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d101      	bne.n	800173a <HAL_GPIO_Init+0x1f2>
 8001736:	2304      	movs	r3, #4
 8001738:	e008      	b.n	800174c <HAL_GPIO_Init+0x204>
 800173a:	2307      	movs	r3, #7
 800173c:	e006      	b.n	800174c <HAL_GPIO_Init+0x204>
 800173e:	2303      	movs	r3, #3
 8001740:	e004      	b.n	800174c <HAL_GPIO_Init+0x204>
 8001742:	2302      	movs	r3, #2
 8001744:	e002      	b.n	800174c <HAL_GPIO_Init+0x204>
 8001746:	2301      	movs	r3, #1
 8001748:	e000      	b.n	800174c <HAL_GPIO_Init+0x204>
 800174a:	2300      	movs	r3, #0
 800174c:	69fa      	ldr	r2, [r7, #28]
 800174e:	f002 0203 	and.w	r2, r2, #3
 8001752:	0092      	lsls	r2, r2, #2
 8001754:	4093      	lsls	r3, r2
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800175c:	4935      	ldr	r1, [pc, #212]	; (8001834 <HAL_GPIO_Init+0x2ec>)
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	089b      	lsrs	r3, r3, #2
 8001762:	3302      	adds	r3, #2
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800176a:	4b38      	ldr	r3, [pc, #224]	; (800184c <HAL_GPIO_Init+0x304>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	43db      	mvns	r3, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4013      	ands	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800178e:	4a2f      	ldr	r2, [pc, #188]	; (800184c <HAL_GPIO_Init+0x304>)
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001794:	4b2d      	ldr	r3, [pc, #180]	; (800184c <HAL_GPIO_Init+0x304>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017b8:	4a24      	ldr	r2, [pc, #144]	; (800184c <HAL_GPIO_Init+0x304>)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017be:	4b23      	ldr	r3, [pc, #140]	; (800184c <HAL_GPIO_Init+0x304>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	43db      	mvns	r3, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4013      	ands	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	4313      	orrs	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017e2:	4a1a      	ldr	r2, [pc, #104]	; (800184c <HAL_GPIO_Init+0x304>)
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017e8:	4b18      	ldr	r3, [pc, #96]	; (800184c <HAL_GPIO_Init+0x304>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800180c:	4a0f      	ldr	r2, [pc, #60]	; (800184c <HAL_GPIO_Init+0x304>)
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3301      	adds	r3, #1
 8001816:	61fb      	str	r3, [r7, #28]
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	2b0f      	cmp	r3, #15
 800181c:	f67f aea2 	bls.w	8001564 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	3724      	adds	r7, #36	; 0x24
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800
 8001834:	40013800 	.word	0x40013800
 8001838:	40020000 	.word	0x40020000
 800183c:	40020400 	.word	0x40020400
 8001840:	40020800 	.word	0x40020800
 8001844:	40020c00 	.word	0x40020c00
 8001848:	40021000 	.word	0x40021000
 800184c:	40013c00 	.word	0x40013c00

08001850 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	807b      	strh	r3, [r7, #2]
 800185c:	4613      	mov	r3, r2
 800185e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001860:	787b      	ldrb	r3, [r7, #1]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001866:	887a      	ldrh	r2, [r7, #2]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800186c:	e003      	b.n	8001876 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800186e:	887b      	ldrh	r3, [r7, #2]
 8001870:	041a      	lsls	r2, r3, #16
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	619a      	str	r2, [r3, #24]
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
	...

08001884 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800188e:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001890:	695a      	ldr	r2, [r3, #20]
 8001892:	88fb      	ldrh	r3, [r7, #6]
 8001894:	4013      	ands	r3, r2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d006      	beq.n	80018a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800189a:	4a05      	ldr	r2, [pc, #20]	; (80018b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800189c:	88fb      	ldrh	r3, [r7, #6]
 800189e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018a0:	88fb      	ldrh	r3, [r7, #6]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe fe1a 	bl	80004dc <HAL_GPIO_EXTI_Callback>
  }
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40013c00 	.word	0x40013c00

080018b4 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80018b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018b6:	b08f      	sub	sp, #60	; 0x3c
 80018b8:	af0a      	add	r7, sp, #40	; 0x28
 80018ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e054      	b.n	8001970 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d106      	bne.n	80018e6 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f006 fe81 	bl	80085e8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2203      	movs	r2, #3
 80018ea:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d102      	bne.n	8001900 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f003 feaf 	bl	8005668 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	687e      	ldr	r6, [r7, #4]
 8001912:	466d      	mov	r5, sp
 8001914:	f106 0410 	add.w	r4, r6, #16
 8001918:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800191a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800191c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800191e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001920:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001924:	e885 0003 	stmia.w	r5, {r0, r1}
 8001928:	1d33      	adds	r3, r6, #4
 800192a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800192c:	6838      	ldr	r0, [r7, #0]
 800192e:	f003 fe29 	bl	8005584 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2101      	movs	r1, #1
 8001938:	4618      	mov	r0, r3
 800193a:	f003 fea6 	bl	800568a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	603b      	str	r3, [r7, #0]
 8001944:	687e      	ldr	r6, [r7, #4]
 8001946:	466d      	mov	r5, sp
 8001948:	f106 0410 	add.w	r4, r6, #16
 800194c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800194e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001950:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001952:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001954:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001958:	e885 0003 	stmia.w	r5, {r0, r1}
 800195c:	1d33      	adds	r3, r6, #4
 800195e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001960:	6838      	ldr	r0, [r7, #0]
 8001962:	f004 f82f 	bl	80059c4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001978 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b089      	sub	sp, #36	; 0x24
 800197c:	af04      	add	r7, sp, #16
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	4608      	mov	r0, r1
 8001982:	4611      	mov	r1, r2
 8001984:	461a      	mov	r2, r3
 8001986:	4603      	mov	r3, r0
 8001988:	70fb      	strb	r3, [r7, #3]
 800198a:	460b      	mov	r3, r1
 800198c:	70bb      	strb	r3, [r7, #2]
 800198e:	4613      	mov	r3, r2
 8001990:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001998:	2b01      	cmp	r3, #1
 800199a:	d101      	bne.n	80019a0 <HAL_HCD_HC_Init+0x28>
 800199c:	2302      	movs	r3, #2
 800199e:	e076      	b.n	8001a8e <HAL_HCD_HC_Init+0x116>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80019a8:	78fb      	ldrb	r3, [r7, #3]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	212c      	movs	r1, #44	; 0x2c
 80019ae:	fb01 f303 	mul.w	r3, r1, r3
 80019b2:	4413      	add	r3, r2
 80019b4:	333d      	adds	r3, #61	; 0x3d
 80019b6:	2200      	movs	r2, #0
 80019b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80019ba:	78fb      	ldrb	r3, [r7, #3]
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	212c      	movs	r1, #44	; 0x2c
 80019c0:	fb01 f303 	mul.w	r3, r1, r3
 80019c4:	4413      	add	r3, r2
 80019c6:	3338      	adds	r3, #56	; 0x38
 80019c8:	787a      	ldrb	r2, [r7, #1]
 80019ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80019cc:	78fb      	ldrb	r3, [r7, #3]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	212c      	movs	r1, #44	; 0x2c
 80019d2:	fb01 f303 	mul.w	r3, r1, r3
 80019d6:	4413      	add	r3, r2
 80019d8:	3340      	adds	r3, #64	; 0x40
 80019da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80019dc:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019de:	78fb      	ldrb	r3, [r7, #3]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	212c      	movs	r1, #44	; 0x2c
 80019e4:	fb01 f303 	mul.w	r3, r1, r3
 80019e8:	4413      	add	r3, r2
 80019ea:	3339      	adds	r3, #57	; 0x39
 80019ec:	78fa      	ldrb	r2, [r7, #3]
 80019ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80019f0:	78fb      	ldrb	r3, [r7, #3]
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	212c      	movs	r1, #44	; 0x2c
 80019f6:	fb01 f303 	mul.w	r3, r1, r3
 80019fa:	4413      	add	r3, r2
 80019fc:	333f      	adds	r3, #63	; 0x3f
 80019fe:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001a02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001a04:	78fb      	ldrb	r3, [r7, #3]
 8001a06:	78ba      	ldrb	r2, [r7, #2]
 8001a08:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a0c:	b2d0      	uxtb	r0, r2
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	212c      	movs	r1, #44	; 0x2c
 8001a12:	fb01 f303 	mul.w	r3, r1, r3
 8001a16:	4413      	add	r3, r2
 8001a18:	333a      	adds	r3, #58	; 0x3a
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001a1e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	da09      	bge.n	8001a3a <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001a26:	78fb      	ldrb	r3, [r7, #3]
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	212c      	movs	r1, #44	; 0x2c
 8001a2c:	fb01 f303 	mul.w	r3, r1, r3
 8001a30:	4413      	add	r3, r2
 8001a32:	333b      	adds	r3, #59	; 0x3b
 8001a34:	2201      	movs	r2, #1
 8001a36:	701a      	strb	r2, [r3, #0]
 8001a38:	e008      	b.n	8001a4c <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001a3a:	78fb      	ldrb	r3, [r7, #3]
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	212c      	movs	r1, #44	; 0x2c
 8001a40:	fb01 f303 	mul.w	r3, r1, r3
 8001a44:	4413      	add	r3, r2
 8001a46:	333b      	adds	r3, #59	; 0x3b
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001a4c:	78fb      	ldrb	r3, [r7, #3]
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	212c      	movs	r1, #44	; 0x2c
 8001a52:	fb01 f303 	mul.w	r3, r1, r3
 8001a56:	4413      	add	r3, r2
 8001a58:	333c      	adds	r3, #60	; 0x3c
 8001a5a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a5e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6818      	ldr	r0, [r3, #0]
 8001a64:	787c      	ldrb	r4, [r7, #1]
 8001a66:	78ba      	ldrb	r2, [r7, #2]
 8001a68:	78f9      	ldrb	r1, [r7, #3]
 8001a6a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a6c:	9302      	str	r3, [sp, #8]
 8001a6e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a72:	9301      	str	r3, [sp, #4]
 8001a74:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	4623      	mov	r3, r4
 8001a7c:	f004 f928 	bl	8005cd0 <USB_HC_Init>
 8001a80:	4603      	mov	r3, r0
 8001a82:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd90      	pop	{r4, r7, pc}

08001a96 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b084      	sub	sp, #16
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d101      	bne.n	8001ab4 <HAL_HCD_HC_Halt+0x1e>
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	e00f      	b.n	8001ad4 <HAL_HCD_HC_Halt+0x3e>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	78fa      	ldrb	r2, [r7, #3]
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f004 fb78 	bl	80061ba <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	4608      	mov	r0, r1
 8001ae6:	4611      	mov	r1, r2
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4603      	mov	r3, r0
 8001aec:	70fb      	strb	r3, [r7, #3]
 8001aee:	460b      	mov	r3, r1
 8001af0:	70bb      	strb	r3, [r7, #2]
 8001af2:	4613      	mov	r3, r2
 8001af4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001af6:	78fb      	ldrb	r3, [r7, #3]
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	212c      	movs	r1, #44	; 0x2c
 8001afc:	fb01 f303 	mul.w	r3, r1, r3
 8001b00:	4413      	add	r3, r2
 8001b02:	333b      	adds	r3, #59	; 0x3b
 8001b04:	78ba      	ldrb	r2, [r7, #2]
 8001b06:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001b08:	78fb      	ldrb	r3, [r7, #3]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	212c      	movs	r1, #44	; 0x2c
 8001b0e:	fb01 f303 	mul.w	r3, r1, r3
 8001b12:	4413      	add	r3, r2
 8001b14:	333f      	adds	r3, #63	; 0x3f
 8001b16:	787a      	ldrb	r2, [r7, #1]
 8001b18:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001b1a:	7c3b      	ldrb	r3, [r7, #16]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d112      	bne.n	8001b46 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001b20:	78fb      	ldrb	r3, [r7, #3]
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	212c      	movs	r1, #44	; 0x2c
 8001b26:	fb01 f303 	mul.w	r3, r1, r3
 8001b2a:	4413      	add	r3, r2
 8001b2c:	3342      	adds	r3, #66	; 0x42
 8001b2e:	2203      	movs	r2, #3
 8001b30:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001b32:	78fb      	ldrb	r3, [r7, #3]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	212c      	movs	r1, #44	; 0x2c
 8001b38:	fb01 f303 	mul.w	r3, r1, r3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	333d      	adds	r3, #61	; 0x3d
 8001b40:	7f3a      	ldrb	r2, [r7, #28]
 8001b42:	701a      	strb	r2, [r3, #0]
 8001b44:	e008      	b.n	8001b58 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b46:	78fb      	ldrb	r3, [r7, #3]
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	212c      	movs	r1, #44	; 0x2c
 8001b4c:	fb01 f303 	mul.w	r3, r1, r3
 8001b50:	4413      	add	r3, r2
 8001b52:	3342      	adds	r3, #66	; 0x42
 8001b54:	2202      	movs	r2, #2
 8001b56:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001b58:	787b      	ldrb	r3, [r7, #1]
 8001b5a:	2b03      	cmp	r3, #3
 8001b5c:	f200 80c6 	bhi.w	8001cec <HAL_HCD_HC_SubmitRequest+0x210>
 8001b60:	a201      	add	r2, pc, #4	; (adr r2, 8001b68 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b66:	bf00      	nop
 8001b68:	08001b79 	.word	0x08001b79
 8001b6c:	08001cd9 	.word	0x08001cd9
 8001b70:	08001bdd 	.word	0x08001bdd
 8001b74:	08001c5b 	.word	0x08001c5b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001b78:	7c3b      	ldrb	r3, [r7, #16]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	f040 80b8 	bne.w	8001cf0 <HAL_HCD_HC_SubmitRequest+0x214>
 8001b80:	78bb      	ldrb	r3, [r7, #2]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f040 80b4 	bne.w	8001cf0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001b88:	8b3b      	ldrh	r3, [r7, #24]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d108      	bne.n	8001ba0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001b8e:	78fb      	ldrb	r3, [r7, #3]
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	212c      	movs	r1, #44	; 0x2c
 8001b94:	fb01 f303 	mul.w	r3, r1, r3
 8001b98:	4413      	add	r3, r2
 8001b9a:	3355      	adds	r3, #85	; 0x55
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ba0:	78fb      	ldrb	r3, [r7, #3]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	212c      	movs	r1, #44	; 0x2c
 8001ba6:	fb01 f303 	mul.w	r3, r1, r3
 8001baa:	4413      	add	r3, r2
 8001bac:	3355      	adds	r3, #85	; 0x55
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d109      	bne.n	8001bc8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bb4:	78fb      	ldrb	r3, [r7, #3]
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	212c      	movs	r1, #44	; 0x2c
 8001bba:	fb01 f303 	mul.w	r3, r1, r3
 8001bbe:	4413      	add	r3, r2
 8001bc0:	3342      	adds	r3, #66	; 0x42
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001bc6:	e093      	b.n	8001cf0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bc8:	78fb      	ldrb	r3, [r7, #3]
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	212c      	movs	r1, #44	; 0x2c
 8001bce:	fb01 f303 	mul.w	r3, r1, r3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	3342      	adds	r3, #66	; 0x42
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	701a      	strb	r2, [r3, #0]
      break;
 8001bda:	e089      	b.n	8001cf0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001bdc:	78bb      	ldrb	r3, [r7, #2]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d11d      	bne.n	8001c1e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001be2:	78fb      	ldrb	r3, [r7, #3]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	212c      	movs	r1, #44	; 0x2c
 8001be8:	fb01 f303 	mul.w	r3, r1, r3
 8001bec:	4413      	add	r3, r2
 8001bee:	3355      	adds	r3, #85	; 0x55
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d109      	bne.n	8001c0a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bf6:	78fb      	ldrb	r3, [r7, #3]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	212c      	movs	r1, #44	; 0x2c
 8001bfc:	fb01 f303 	mul.w	r3, r1, r3
 8001c00:	4413      	add	r3, r2
 8001c02:	3342      	adds	r3, #66	; 0x42
 8001c04:	2200      	movs	r2, #0
 8001c06:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001c08:	e073      	b.n	8001cf2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c0a:	78fb      	ldrb	r3, [r7, #3]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	212c      	movs	r1, #44	; 0x2c
 8001c10:	fb01 f303 	mul.w	r3, r1, r3
 8001c14:	4413      	add	r3, r2
 8001c16:	3342      	adds	r3, #66	; 0x42
 8001c18:	2202      	movs	r2, #2
 8001c1a:	701a      	strb	r2, [r3, #0]
      break;
 8001c1c:	e069      	b.n	8001cf2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c1e:	78fb      	ldrb	r3, [r7, #3]
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	212c      	movs	r1, #44	; 0x2c
 8001c24:	fb01 f303 	mul.w	r3, r1, r3
 8001c28:	4413      	add	r3, r2
 8001c2a:	3354      	adds	r3, #84	; 0x54
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d109      	bne.n	8001c46 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c32:	78fb      	ldrb	r3, [r7, #3]
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	212c      	movs	r1, #44	; 0x2c
 8001c38:	fb01 f303 	mul.w	r3, r1, r3
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3342      	adds	r3, #66	; 0x42
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
      break;
 8001c44:	e055      	b.n	8001cf2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c46:	78fb      	ldrb	r3, [r7, #3]
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	212c      	movs	r1, #44	; 0x2c
 8001c4c:	fb01 f303 	mul.w	r3, r1, r3
 8001c50:	4413      	add	r3, r2
 8001c52:	3342      	adds	r3, #66	; 0x42
 8001c54:	2202      	movs	r2, #2
 8001c56:	701a      	strb	r2, [r3, #0]
      break;
 8001c58:	e04b      	b.n	8001cf2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001c5a:	78bb      	ldrb	r3, [r7, #2]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d11d      	bne.n	8001c9c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c60:	78fb      	ldrb	r3, [r7, #3]
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	212c      	movs	r1, #44	; 0x2c
 8001c66:	fb01 f303 	mul.w	r3, r1, r3
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3355      	adds	r3, #85	; 0x55
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d109      	bne.n	8001c88 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c74:	78fb      	ldrb	r3, [r7, #3]
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	212c      	movs	r1, #44	; 0x2c
 8001c7a:	fb01 f303 	mul.w	r3, r1, r3
 8001c7e:	4413      	add	r3, r2
 8001c80:	3342      	adds	r3, #66	; 0x42
 8001c82:	2200      	movs	r2, #0
 8001c84:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c86:	e034      	b.n	8001cf2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	212c      	movs	r1, #44	; 0x2c
 8001c8e:	fb01 f303 	mul.w	r3, r1, r3
 8001c92:	4413      	add	r3, r2
 8001c94:	3342      	adds	r3, #66	; 0x42
 8001c96:	2202      	movs	r2, #2
 8001c98:	701a      	strb	r2, [r3, #0]
      break;
 8001c9a:	e02a      	b.n	8001cf2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c9c:	78fb      	ldrb	r3, [r7, #3]
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	212c      	movs	r1, #44	; 0x2c
 8001ca2:	fb01 f303 	mul.w	r3, r1, r3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3354      	adds	r3, #84	; 0x54
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d109      	bne.n	8001cc4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cb0:	78fb      	ldrb	r3, [r7, #3]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	212c      	movs	r1, #44	; 0x2c
 8001cb6:	fb01 f303 	mul.w	r3, r1, r3
 8001cba:	4413      	add	r3, r2
 8001cbc:	3342      	adds	r3, #66	; 0x42
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
      break;
 8001cc2:	e016      	b.n	8001cf2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cc4:	78fb      	ldrb	r3, [r7, #3]
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	212c      	movs	r1, #44	; 0x2c
 8001cca:	fb01 f303 	mul.w	r3, r1, r3
 8001cce:	4413      	add	r3, r2
 8001cd0:	3342      	adds	r3, #66	; 0x42
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	701a      	strb	r2, [r3, #0]
      break;
 8001cd6:	e00c      	b.n	8001cf2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cd8:	78fb      	ldrb	r3, [r7, #3]
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	212c      	movs	r1, #44	; 0x2c
 8001cde:	fb01 f303 	mul.w	r3, r1, r3
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3342      	adds	r3, #66	; 0x42
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	701a      	strb	r2, [r3, #0]
      break;
 8001cea:	e002      	b.n	8001cf2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001cec:	bf00      	nop
 8001cee:	e000      	b.n	8001cf2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001cf0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001cf2:	78fb      	ldrb	r3, [r7, #3]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	212c      	movs	r1, #44	; 0x2c
 8001cf8:	fb01 f303 	mul.w	r3, r1, r3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	3344      	adds	r3, #68	; 0x44
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001d04:	78fb      	ldrb	r3, [r7, #3]
 8001d06:	8b3a      	ldrh	r2, [r7, #24]
 8001d08:	6879      	ldr	r1, [r7, #4]
 8001d0a:	202c      	movs	r0, #44	; 0x2c
 8001d0c:	fb00 f303 	mul.w	r3, r0, r3
 8001d10:	440b      	add	r3, r1
 8001d12:	334c      	adds	r3, #76	; 0x4c
 8001d14:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001d16:	78fb      	ldrb	r3, [r7, #3]
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	212c      	movs	r1, #44	; 0x2c
 8001d1c:	fb01 f303 	mul.w	r3, r1, r3
 8001d20:	4413      	add	r3, r2
 8001d22:	3360      	adds	r3, #96	; 0x60
 8001d24:	2200      	movs	r2, #0
 8001d26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001d28:	78fb      	ldrb	r3, [r7, #3]
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	212c      	movs	r1, #44	; 0x2c
 8001d2e:	fb01 f303 	mul.w	r3, r1, r3
 8001d32:	4413      	add	r3, r2
 8001d34:	3350      	adds	r3, #80	; 0x50
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d3a:	78fb      	ldrb	r3, [r7, #3]
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	212c      	movs	r1, #44	; 0x2c
 8001d40:	fb01 f303 	mul.w	r3, r1, r3
 8001d44:	4413      	add	r3, r2
 8001d46:	3339      	adds	r3, #57	; 0x39
 8001d48:	78fa      	ldrb	r2, [r7, #3]
 8001d4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001d4c:	78fb      	ldrb	r3, [r7, #3]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	212c      	movs	r1, #44	; 0x2c
 8001d52:	fb01 f303 	mul.w	r3, r1, r3
 8001d56:	4413      	add	r3, r2
 8001d58:	3361      	adds	r3, #97	; 0x61
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6818      	ldr	r0, [r3, #0]
 8001d62:	78fb      	ldrb	r3, [r7, #3]
 8001d64:	222c      	movs	r2, #44	; 0x2c
 8001d66:	fb02 f303 	mul.w	r3, r2, r3
 8001d6a:	3338      	adds	r3, #56	; 0x38
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	18d1      	adds	r1, r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	461a      	mov	r2, r3
 8001d78:	f004 f8cc 	bl	8005f14 <USB_HC_StartXfer>
 8001d7c:	4603      	mov	r3, r0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop

08001d88 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f003 fdcd 	bl	800593e <USB_GetMode>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	f040 80f6 	bne.w	8001f98 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f003 fdb1 	bl	8005918 <USB_ReadInterrupts>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 80ec 	beq.w	8001f96 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f003 fda8 	bl	8005918 <USB_ReadInterrupts>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001dd2:	d104      	bne.n	8001dde <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ddc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f003 fd98 	bl	8005918 <USB_ReadInterrupts>
 8001de8:	4603      	mov	r3, r0
 8001dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001df2:	d104      	bne.n	8001dfe <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001dfc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f003 fd88 	bl	8005918 <USB_ReadInterrupts>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e12:	d104      	bne.n	8001e1e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e1c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f003 fd78 	bl	8005918 <USB_ReadInterrupts>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d103      	bne.n	8001e3a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2202      	movs	r2, #2
 8001e38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f003 fd6a 	bl	8005918 <USB_ReadInterrupts>
 8001e44:	4603      	mov	r3, r0
 8001e46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e4e:	d11c      	bne.n	8001e8a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e58:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10f      	bne.n	8001e8a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001e6a:	2110      	movs	r1, #16
 8001e6c:	6938      	ldr	r0, [r7, #16]
 8001e6e:	f003 fc59 	bl	8005724 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001e72:	6938      	ldr	r0, [r7, #16]
 8001e74:	f003 fc8a 	bl	800578c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f003 fe60 	bl	8005b44 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f006 fc2d 	bl	80086e4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f003 fd42 	bl	8005918 <USB_ReadInterrupts>
 8001e94:	4603      	mov	r3, r0
 8001e96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e9e:	d102      	bne.n	8001ea6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f001 f89e 	bl	8002fe2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f003 fd34 	bl	8005918 <USB_ReadInterrupts>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	2b08      	cmp	r3, #8
 8001eb8:	d106      	bne.n	8001ec8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f006 fbf6 	bl	80086ac <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2208      	movs	r2, #8
 8001ec6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f003 fd23 	bl	8005918 <USB_ReadInterrupts>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	f003 0310 	and.w	r3, r3, #16
 8001ed8:	2b10      	cmp	r3, #16
 8001eda:	d101      	bne.n	8001ee0 <HAL_HCD_IRQHandler+0x158>
 8001edc:	2301      	movs	r3, #1
 8001ede:	e000      	b.n	8001ee2 <HAL_HCD_IRQHandler+0x15a>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d012      	beq.n	8001f0c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	699a      	ldr	r2, [r3, #24]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0210 	bic.w	r2, r2, #16
 8001ef4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 ffa1 	bl	8002e3e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	699a      	ldr	r2, [r3, #24]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 0210 	orr.w	r2, r2, #16
 8001f0a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f003 fd01 	bl	8005918 <USB_ReadInterrupts>
 8001f16:	4603      	mov	r3, r0
 8001f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f20:	d13a      	bne.n	8001f98 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f004 f936 	bl	8006198 <USB_HC_ReadInterrupt>
 8001f2c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f2e:	2300      	movs	r3, #0
 8001f30:	617b      	str	r3, [r7, #20]
 8001f32:	e025      	b.n	8001f80 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d018      	beq.n	8001f7a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	015a      	lsls	r2, r3, #5
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4413      	add	r3, r2
 8001f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f5e:	d106      	bne.n	8001f6e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	4619      	mov	r1, r3
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f8ab 	bl	80020c2 <HCD_HC_IN_IRQHandler>
 8001f6c:	e005      	b.n	8001f7a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	4619      	mov	r1, r3
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 fbf9 	bl	800276c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	617b      	str	r3, [r7, #20]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d3d4      	bcc.n	8001f34 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f92:	615a      	str	r2, [r3, #20]
 8001f94:	e000      	b.n	8001f98 <HAL_HCD_IRQHandler+0x210>
      return;
 8001f96:	bf00      	nop
    }
  }
}
 8001f98:	3718      	adds	r7, #24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d101      	bne.n	8001fb4 <HAL_HCD_Start+0x16>
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	e013      	b.n	8001fdc <HAL_HCD_Start+0x3e>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f003 fe22 	bl	8005c0c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f003 fb3a 	bl	8005646 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d101      	bne.n	8001ffa <HAL_HCD_Stop+0x16>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	e00d      	b.n	8002016 <HAL_HCD_Stop+0x32>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f004 fa10 	bl	800642c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f003 fdc4 	bl	8005bb8 <USB_ResetPort>
 8002030:	4603      	mov	r3, r0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
 8002042:	460b      	mov	r3, r1
 8002044:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002046:	78fb      	ldrb	r3, [r7, #3]
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	212c      	movs	r1, #44	; 0x2c
 800204c:	fb01 f303 	mul.w	r3, r1, r3
 8002050:	4413      	add	r3, r2
 8002052:	3360      	adds	r3, #96	; 0x60
 8002054:	781b      	ldrb	r3, [r3, #0]
}
 8002056:	4618      	mov	r0, r3
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	460b      	mov	r3, r1
 800206c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800206e:	78fb      	ldrb	r3, [r7, #3]
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	212c      	movs	r1, #44	; 0x2c
 8002074:	fb01 f303 	mul.w	r3, r1, r3
 8002078:	4413      	add	r3, r2
 800207a:	3350      	adds	r3, #80	; 0x50
 800207c:	681b      	ldr	r3, [r3, #0]
}
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f003 fe08 	bl	8005cac <USB_GetCurrentFrame>
 800209c:	4603      	mov	r3, r0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f003 fde3 	bl	8005c7e <USB_GetHostSpeed>
 80020b8:	4603      	mov	r3, r0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b086      	sub	sp, #24
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
 80020ca:	460b      	mov	r3, r1
 80020cc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80020d8:	78fb      	ldrb	r3, [r7, #3]
 80020da:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	015a      	lsls	r2, r3, #5
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4413      	add	r3, r2
 80020e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	d11a      	bne.n	8002128 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	015a      	lsls	r2, r3, #5
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4413      	add	r3, r2
 80020fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fe:	461a      	mov	r2, r3
 8002100:	2304      	movs	r3, #4
 8002102:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	212c      	movs	r1, #44	; 0x2c
 800210a:	fb01 f303 	mul.w	r3, r1, r3
 800210e:	4413      	add	r3, r2
 8002110:	3361      	adds	r3, #97	; 0x61
 8002112:	2206      	movs	r2, #6
 8002114:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	4611      	mov	r1, r2
 8002120:	4618      	mov	r0, r3
 8002122:	f004 f84a 	bl	80061ba <USB_HC_Halt>
 8002126:	e0af      	b.n	8002288 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	015a      	lsls	r2, r3, #5
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	4413      	add	r3, r2
 8002130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800213e:	d11b      	bne.n	8002178 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	015a      	lsls	r2, r3, #5
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	4413      	add	r3, r2
 8002148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800214c:	461a      	mov	r2, r3
 800214e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002152:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	212c      	movs	r1, #44	; 0x2c
 800215a:	fb01 f303 	mul.w	r3, r1, r3
 800215e:	4413      	add	r3, r2
 8002160:	3361      	adds	r3, #97	; 0x61
 8002162:	2207      	movs	r2, #7
 8002164:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	4611      	mov	r1, r2
 8002170:	4618      	mov	r0, r3
 8002172:	f004 f822 	bl	80061ba <USB_HC_Halt>
 8002176:	e087      	b.n	8002288 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	015a      	lsls	r2, r3, #5
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	4413      	add	r3, r2
 8002180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 0320 	and.w	r3, r3, #32
 800218a:	2b20      	cmp	r3, #32
 800218c:	d109      	bne.n	80021a2 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	015a      	lsls	r2, r3, #5
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4413      	add	r3, r2
 8002196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219a:	461a      	mov	r2, r3
 800219c:	2320      	movs	r3, #32
 800219e:	6093      	str	r3, [r2, #8]
 80021a0:	e072      	b.n	8002288 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	015a      	lsls	r2, r3, #5
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4413      	add	r3, r2
 80021aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 0308 	and.w	r3, r3, #8
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d11a      	bne.n	80021ee <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	015a      	lsls	r2, r3, #5
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	4413      	add	r3, r2
 80021c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c4:	461a      	mov	r2, r3
 80021c6:	2308      	movs	r3, #8
 80021c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	212c      	movs	r1, #44	; 0x2c
 80021d0:	fb01 f303 	mul.w	r3, r1, r3
 80021d4:	4413      	add	r3, r2
 80021d6:	3361      	adds	r3, #97	; 0x61
 80021d8:	2205      	movs	r2, #5
 80021da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	4611      	mov	r1, r2
 80021e6:	4618      	mov	r0, r3
 80021e8:	f003 ffe7 	bl	80061ba <USB_HC_Halt>
 80021ec:	e04c      	b.n	8002288 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	015a      	lsls	r2, r3, #5
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	4413      	add	r3, r2
 80021f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002204:	d11b      	bne.n	800223e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	015a      	lsls	r2, r3, #5
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4413      	add	r3, r2
 800220e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002212:	461a      	mov	r2, r3
 8002214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002218:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	212c      	movs	r1, #44	; 0x2c
 8002220:	fb01 f303 	mul.w	r3, r1, r3
 8002224:	4413      	add	r3, r2
 8002226:	3361      	adds	r3, #97	; 0x61
 8002228:	2208      	movs	r2, #8
 800222a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	4611      	mov	r1, r2
 8002236:	4618      	mov	r0, r3
 8002238:	f003 ffbf 	bl	80061ba <USB_HC_Halt>
 800223c:	e024      	b.n	8002288 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	015a      	lsls	r2, r3, #5
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4413      	add	r3, r2
 8002246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002250:	2b80      	cmp	r3, #128	; 0x80
 8002252:	d119      	bne.n	8002288 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	015a      	lsls	r2, r3, #5
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4413      	add	r3, r2
 800225c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002260:	461a      	mov	r2, r3
 8002262:	2380      	movs	r3, #128	; 0x80
 8002264:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	212c      	movs	r1, #44	; 0x2c
 800226c:	fb01 f303 	mul.w	r3, r1, r3
 8002270:	4413      	add	r3, r2
 8002272:	3361      	adds	r3, #97	; 0x61
 8002274:	2206      	movs	r2, #6
 8002276:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	4611      	mov	r1, r2
 8002282:	4618      	mov	r0, r3
 8002284:	f003 ff99 	bl	80061ba <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	015a      	lsls	r2, r3, #5
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	4413      	add	r3, r2
 8002290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800229a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800229e:	d112      	bne.n	80022c6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	4611      	mov	r1, r2
 80022aa:	4618      	mov	r0, r3
 80022ac:	f003 ff85 	bl	80061ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	015a      	lsls	r2, r3, #5
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	4413      	add	r3, r2
 80022b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022bc:	461a      	mov	r2, r3
 80022be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022c2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80022c4:	e24e      	b.n	8002764 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	015a      	lsls	r2, r3, #5
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4413      	add	r3, r2
 80022ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b01      	cmp	r3, #1
 80022da:	f040 80df 	bne.w	800249c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d019      	beq.n	800231a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	212c      	movs	r1, #44	; 0x2c
 80022ec:	fb01 f303 	mul.w	r3, r1, r3
 80022f0:	4413      	add	r3, r2
 80022f2:	3348      	adds	r3, #72	; 0x48
 80022f4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	0159      	lsls	r1, r3, #5
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	440b      	add	r3, r1
 80022fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002308:	1ad2      	subs	r2, r2, r3
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	202c      	movs	r0, #44	; 0x2c
 8002310:	fb00 f303 	mul.w	r3, r0, r3
 8002314:	440b      	add	r3, r1
 8002316:	3350      	adds	r3, #80	; 0x50
 8002318:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	212c      	movs	r1, #44	; 0x2c
 8002320:	fb01 f303 	mul.w	r3, r1, r3
 8002324:	4413      	add	r3, r2
 8002326:	3361      	adds	r3, #97	; 0x61
 8002328:	2201      	movs	r2, #1
 800232a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	212c      	movs	r1, #44	; 0x2c
 8002332:	fb01 f303 	mul.w	r3, r1, r3
 8002336:	4413      	add	r3, r2
 8002338:	335c      	adds	r3, #92	; 0x5c
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	015a      	lsls	r2, r3, #5
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4413      	add	r3, r2
 8002346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234a:	461a      	mov	r2, r3
 800234c:	2301      	movs	r3, #1
 800234e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	212c      	movs	r1, #44	; 0x2c
 8002356:	fb01 f303 	mul.w	r3, r1, r3
 800235a:	4413      	add	r3, r2
 800235c:	333f      	adds	r3, #63	; 0x3f
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d009      	beq.n	8002378 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	212c      	movs	r1, #44	; 0x2c
 800236a:	fb01 f303 	mul.w	r3, r1, r3
 800236e:	4413      	add	r3, r2
 8002370:	333f      	adds	r3, #63	; 0x3f
 8002372:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002374:	2b02      	cmp	r3, #2
 8002376:	d111      	bne.n	800239c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	4611      	mov	r1, r2
 8002382:	4618      	mov	r0, r3
 8002384:	f003 ff19 	bl	80061ba <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	015a      	lsls	r2, r3, #5
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	4413      	add	r3, r2
 8002390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002394:	461a      	mov	r2, r3
 8002396:	2310      	movs	r3, #16
 8002398:	6093      	str	r3, [r2, #8]
 800239a:	e03a      	b.n	8002412 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	212c      	movs	r1, #44	; 0x2c
 80023a2:	fb01 f303 	mul.w	r3, r1, r3
 80023a6:	4413      	add	r3, r2
 80023a8:	333f      	adds	r3, #63	; 0x3f
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b03      	cmp	r3, #3
 80023ae:	d009      	beq.n	80023c4 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	212c      	movs	r1, #44	; 0x2c
 80023b6:	fb01 f303 	mul.w	r3, r1, r3
 80023ba:	4413      	add	r3, r2
 80023bc:	333f      	adds	r3, #63	; 0x3f
 80023be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d126      	bne.n	8002412 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	015a      	lsls	r2, r3, #5
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4413      	add	r3, r2
 80023cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	0151      	lsls	r1, r2, #5
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	440a      	add	r2, r1
 80023da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80023e2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	212c      	movs	r1, #44	; 0x2c
 80023ea:	fb01 f303 	mul.w	r3, r1, r3
 80023ee:	4413      	add	r3, r2
 80023f0:	3360      	adds	r3, #96	; 0x60
 80023f2:	2201      	movs	r2, #1
 80023f4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	b2d9      	uxtb	r1, r3
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	202c      	movs	r0, #44	; 0x2c
 8002400:	fb00 f303 	mul.w	r3, r0, r3
 8002404:	4413      	add	r3, r2
 8002406:	3360      	adds	r3, #96	; 0x60
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	461a      	mov	r2, r3
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f006 f977 	bl	8008700 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d12b      	bne.n	8002472 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	212c      	movs	r1, #44	; 0x2c
 8002420:	fb01 f303 	mul.w	r3, r1, r3
 8002424:	4413      	add	r3, r2
 8002426:	3348      	adds	r3, #72	; 0x48
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	202c      	movs	r0, #44	; 0x2c
 8002430:	fb00 f202 	mul.w	r2, r0, r2
 8002434:	440a      	add	r2, r1
 8002436:	3240      	adds	r2, #64	; 0x40
 8002438:	8812      	ldrh	r2, [r2, #0]
 800243a:	fbb3 f3f2 	udiv	r3, r3, r2
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	f000 818e 	beq.w	8002764 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	212c      	movs	r1, #44	; 0x2c
 800244e:	fb01 f303 	mul.w	r3, r1, r3
 8002452:	4413      	add	r3, r2
 8002454:	3354      	adds	r3, #84	; 0x54
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	f083 0301 	eor.w	r3, r3, #1
 800245c:	b2d8      	uxtb	r0, r3
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	212c      	movs	r1, #44	; 0x2c
 8002464:	fb01 f303 	mul.w	r3, r1, r3
 8002468:	4413      	add	r3, r2
 800246a:	3354      	adds	r3, #84	; 0x54
 800246c:	4602      	mov	r2, r0
 800246e:	701a      	strb	r2, [r3, #0]
}
 8002470:	e178      	b.n	8002764 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	212c      	movs	r1, #44	; 0x2c
 8002478:	fb01 f303 	mul.w	r3, r1, r3
 800247c:	4413      	add	r3, r2
 800247e:	3354      	adds	r3, #84	; 0x54
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	f083 0301 	eor.w	r3, r3, #1
 8002486:	b2d8      	uxtb	r0, r3
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	212c      	movs	r1, #44	; 0x2c
 800248e:	fb01 f303 	mul.w	r3, r1, r3
 8002492:	4413      	add	r3, r2
 8002494:	3354      	adds	r3, #84	; 0x54
 8002496:	4602      	mov	r2, r0
 8002498:	701a      	strb	r2, [r3, #0]
}
 800249a:	e163      	b.n	8002764 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	015a      	lsls	r2, r3, #5
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	4413      	add	r3, r2
 80024a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	f040 80f6 	bne.w	80026a0 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	212c      	movs	r1, #44	; 0x2c
 80024ba:	fb01 f303 	mul.w	r3, r1, r3
 80024be:	4413      	add	r3, r2
 80024c0:	3361      	adds	r3, #97	; 0x61
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d109      	bne.n	80024dc <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	212c      	movs	r1, #44	; 0x2c
 80024ce:	fb01 f303 	mul.w	r3, r1, r3
 80024d2:	4413      	add	r3, r2
 80024d4:	3360      	adds	r3, #96	; 0x60
 80024d6:	2201      	movs	r2, #1
 80024d8:	701a      	strb	r2, [r3, #0]
 80024da:	e0c9      	b.n	8002670 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	212c      	movs	r1, #44	; 0x2c
 80024e2:	fb01 f303 	mul.w	r3, r1, r3
 80024e6:	4413      	add	r3, r2
 80024e8:	3361      	adds	r3, #97	; 0x61
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b05      	cmp	r3, #5
 80024ee:	d109      	bne.n	8002504 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	212c      	movs	r1, #44	; 0x2c
 80024f6:	fb01 f303 	mul.w	r3, r1, r3
 80024fa:	4413      	add	r3, r2
 80024fc:	3360      	adds	r3, #96	; 0x60
 80024fe:	2205      	movs	r2, #5
 8002500:	701a      	strb	r2, [r3, #0]
 8002502:	e0b5      	b.n	8002670 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	212c      	movs	r1, #44	; 0x2c
 800250a:	fb01 f303 	mul.w	r3, r1, r3
 800250e:	4413      	add	r3, r2
 8002510:	3361      	adds	r3, #97	; 0x61
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b06      	cmp	r3, #6
 8002516:	d009      	beq.n	800252c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	212c      	movs	r1, #44	; 0x2c
 800251e:	fb01 f303 	mul.w	r3, r1, r3
 8002522:	4413      	add	r3, r2
 8002524:	3361      	adds	r3, #97	; 0x61
 8002526:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002528:	2b08      	cmp	r3, #8
 800252a:	d150      	bne.n	80025ce <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	212c      	movs	r1, #44	; 0x2c
 8002532:	fb01 f303 	mul.w	r3, r1, r3
 8002536:	4413      	add	r3, r2
 8002538:	335c      	adds	r3, #92	; 0x5c
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	1c5a      	adds	r2, r3, #1
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	202c      	movs	r0, #44	; 0x2c
 8002544:	fb00 f303 	mul.w	r3, r0, r3
 8002548:	440b      	add	r3, r1
 800254a:	335c      	adds	r3, #92	; 0x5c
 800254c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	212c      	movs	r1, #44	; 0x2c
 8002554:	fb01 f303 	mul.w	r3, r1, r3
 8002558:	4413      	add	r3, r2
 800255a:	335c      	adds	r3, #92	; 0x5c
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2b02      	cmp	r3, #2
 8002560:	d912      	bls.n	8002588 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	212c      	movs	r1, #44	; 0x2c
 8002568:	fb01 f303 	mul.w	r3, r1, r3
 800256c:	4413      	add	r3, r2
 800256e:	335c      	adds	r3, #92	; 0x5c
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	212c      	movs	r1, #44	; 0x2c
 800257a:	fb01 f303 	mul.w	r3, r1, r3
 800257e:	4413      	add	r3, r2
 8002580:	3360      	adds	r3, #96	; 0x60
 8002582:	2204      	movs	r2, #4
 8002584:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002586:	e073      	b.n	8002670 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	212c      	movs	r1, #44	; 0x2c
 800258e:	fb01 f303 	mul.w	r3, r1, r3
 8002592:	4413      	add	r3, r2
 8002594:	3360      	adds	r3, #96	; 0x60
 8002596:	2202      	movs	r2, #2
 8002598:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	015a      	lsls	r2, r3, #5
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4413      	add	r3, r2
 80025a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025b0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025b8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	015a      	lsls	r2, r3, #5
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	4413      	add	r3, r2
 80025c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c6:	461a      	mov	r2, r3
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80025cc:	e050      	b.n	8002670 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	212c      	movs	r1, #44	; 0x2c
 80025d4:	fb01 f303 	mul.w	r3, r1, r3
 80025d8:	4413      	add	r3, r2
 80025da:	3361      	adds	r3, #97	; 0x61
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b03      	cmp	r3, #3
 80025e0:	d122      	bne.n	8002628 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	212c      	movs	r1, #44	; 0x2c
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	4413      	add	r3, r2
 80025ee:	3360      	adds	r3, #96	; 0x60
 80025f0:	2202      	movs	r2, #2
 80025f2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	015a      	lsls	r2, r3, #5
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4413      	add	r3, r2
 80025fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800260a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002612:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	015a      	lsls	r2, r3, #5
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	4413      	add	r3, r2
 800261c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002620:	461a      	mov	r2, r3
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	e023      	b.n	8002670 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	212c      	movs	r1, #44	; 0x2c
 800262e:	fb01 f303 	mul.w	r3, r1, r3
 8002632:	4413      	add	r3, r2
 8002634:	3361      	adds	r3, #97	; 0x61
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b07      	cmp	r3, #7
 800263a:	d119      	bne.n	8002670 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	212c      	movs	r1, #44	; 0x2c
 8002642:	fb01 f303 	mul.w	r3, r1, r3
 8002646:	4413      	add	r3, r2
 8002648:	335c      	adds	r3, #92	; 0x5c
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	1c5a      	adds	r2, r3, #1
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	202c      	movs	r0, #44	; 0x2c
 8002654:	fb00 f303 	mul.w	r3, r0, r3
 8002658:	440b      	add	r3, r1
 800265a:	335c      	adds	r3, #92	; 0x5c
 800265c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	212c      	movs	r1, #44	; 0x2c
 8002664:	fb01 f303 	mul.w	r3, r1, r3
 8002668:	4413      	add	r3, r2
 800266a:	3360      	adds	r3, #96	; 0x60
 800266c:	2204      	movs	r2, #4
 800266e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4413      	add	r3, r2
 8002678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267c:	461a      	mov	r2, r3
 800267e:	2302      	movs	r3, #2
 8002680:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	b2d9      	uxtb	r1, r3
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	202c      	movs	r0, #44	; 0x2c
 800268c:	fb00 f303 	mul.w	r3, r0, r3
 8002690:	4413      	add	r3, r2
 8002692:	3360      	adds	r3, #96	; 0x60
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f006 f831 	bl	8008700 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800269e:	e061      	b.n	8002764 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	015a      	lsls	r2, r3, #5
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4413      	add	r3, r2
 80026a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 0310 	and.w	r3, r3, #16
 80026b2:	2b10      	cmp	r3, #16
 80026b4:	d156      	bne.n	8002764 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	212c      	movs	r1, #44	; 0x2c
 80026bc:	fb01 f303 	mul.w	r3, r1, r3
 80026c0:	4413      	add	r3, r2
 80026c2:	333f      	adds	r3, #63	; 0x3f
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	d111      	bne.n	80026ee <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	212c      	movs	r1, #44	; 0x2c
 80026d0:	fb01 f303 	mul.w	r3, r1, r3
 80026d4:	4413      	add	r3, r2
 80026d6:	335c      	adds	r3, #92	; 0x5c
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	4611      	mov	r1, r2
 80026e6:	4618      	mov	r0, r3
 80026e8:	f003 fd67 	bl	80061ba <USB_HC_Halt>
 80026ec:	e031      	b.n	8002752 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	212c      	movs	r1, #44	; 0x2c
 80026f4:	fb01 f303 	mul.w	r3, r1, r3
 80026f8:	4413      	add	r3, r2
 80026fa:	333f      	adds	r3, #63	; 0x3f
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d009      	beq.n	8002716 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	212c      	movs	r1, #44	; 0x2c
 8002708:	fb01 f303 	mul.w	r3, r1, r3
 800270c:	4413      	add	r3, r2
 800270e:	333f      	adds	r3, #63	; 0x3f
 8002710:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002712:	2b02      	cmp	r3, #2
 8002714:	d11d      	bne.n	8002752 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	212c      	movs	r1, #44	; 0x2c
 800271c:	fb01 f303 	mul.w	r3, r1, r3
 8002720:	4413      	add	r3, r2
 8002722:	335c      	adds	r3, #92	; 0x5c
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d110      	bne.n	8002752 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	212c      	movs	r1, #44	; 0x2c
 8002736:	fb01 f303 	mul.w	r3, r1, r3
 800273a:	4413      	add	r3, r2
 800273c:	3361      	adds	r3, #97	; 0x61
 800273e:	2203      	movs	r2, #3
 8002740:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	4611      	mov	r1, r2
 800274c:	4618      	mov	r0, r3
 800274e:	f003 fd34 	bl	80061ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	015a      	lsls	r2, r3, #5
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	4413      	add	r3, r2
 800275a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275e:	461a      	mov	r2, r3
 8002760:	2310      	movs	r3, #16
 8002762:	6093      	str	r3, [r2, #8]
}
 8002764:	bf00      	nop
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b088      	sub	sp, #32
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002782:	78fb      	ldrb	r3, [r7, #3]
 8002784:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	015a      	lsls	r2, r3, #5
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	4413      	add	r3, r2
 800278e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b04      	cmp	r3, #4
 800279a:	d11a      	bne.n	80027d2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	015a      	lsls	r2, r3, #5
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	4413      	add	r3, r2
 80027a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a8:	461a      	mov	r2, r3
 80027aa:	2304      	movs	r3, #4
 80027ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	212c      	movs	r1, #44	; 0x2c
 80027b4:	fb01 f303 	mul.w	r3, r1, r3
 80027b8:	4413      	add	r3, r2
 80027ba:	3361      	adds	r3, #97	; 0x61
 80027bc:	2206      	movs	r2, #6
 80027be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	4611      	mov	r1, r2
 80027ca:	4618      	mov	r0, r3
 80027cc:	f003 fcf5 	bl	80061ba <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80027d0:	e331      	b.n	8002e36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	015a      	lsls	r2, r3, #5
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	4413      	add	r3, r2
 80027da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 0320 	and.w	r3, r3, #32
 80027e4:	2b20      	cmp	r3, #32
 80027e6:	d12e      	bne.n	8002846 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	015a      	lsls	r2, r3, #5
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	4413      	add	r3, r2
 80027f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f4:	461a      	mov	r2, r3
 80027f6:	2320      	movs	r3, #32
 80027f8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	212c      	movs	r1, #44	; 0x2c
 8002800:	fb01 f303 	mul.w	r3, r1, r3
 8002804:	4413      	add	r3, r2
 8002806:	333d      	adds	r3, #61	; 0x3d
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b01      	cmp	r3, #1
 800280c:	f040 8313 	bne.w	8002e36 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	212c      	movs	r1, #44	; 0x2c
 8002816:	fb01 f303 	mul.w	r3, r1, r3
 800281a:	4413      	add	r3, r2
 800281c:	333d      	adds	r3, #61	; 0x3d
 800281e:	2200      	movs	r2, #0
 8002820:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	212c      	movs	r1, #44	; 0x2c
 8002828:	fb01 f303 	mul.w	r3, r1, r3
 800282c:	4413      	add	r3, r2
 800282e:	3360      	adds	r3, #96	; 0x60
 8002830:	2202      	movs	r2, #2
 8002832:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	4611      	mov	r1, r2
 800283e:	4618      	mov	r0, r3
 8002840:	f003 fcbb 	bl	80061ba <USB_HC_Halt>
}
 8002844:	e2f7      	b.n	8002e36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	015a      	lsls	r2, r3, #5
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	4413      	add	r3, r2
 800284e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800285c:	d112      	bne.n	8002884 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	015a      	lsls	r2, r3, #5
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	4413      	add	r3, r2
 8002866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286a:	461a      	mov	r2, r3
 800286c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002870:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	4611      	mov	r1, r2
 800287c:	4618      	mov	r0, r3
 800287e:	f003 fc9c 	bl	80061ba <USB_HC_Halt>
}
 8002882:	e2d8      	b.n	8002e36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	015a      	lsls	r2, r3, #5
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	4413      	add	r3, r2
 800288c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b01      	cmp	r3, #1
 8002898:	d140      	bne.n	800291c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	212c      	movs	r1, #44	; 0x2c
 80028a0:	fb01 f303 	mul.w	r3, r1, r3
 80028a4:	4413      	add	r3, r2
 80028a6:	335c      	adds	r3, #92	; 0x5c
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	015a      	lsls	r2, r3, #5
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	4413      	add	r3, r2
 80028b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028be:	2b40      	cmp	r3, #64	; 0x40
 80028c0:	d111      	bne.n	80028e6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	212c      	movs	r1, #44	; 0x2c
 80028c8:	fb01 f303 	mul.w	r3, r1, r3
 80028cc:	4413      	add	r3, r2
 80028ce:	333d      	adds	r3, #61	; 0x3d
 80028d0:	2201      	movs	r2, #1
 80028d2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	015a      	lsls	r2, r3, #5
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	4413      	add	r3, r2
 80028dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e0:	461a      	mov	r2, r3
 80028e2:	2340      	movs	r3, #64	; 0x40
 80028e4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	015a      	lsls	r2, r3, #5
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	4413      	add	r3, r2
 80028ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f2:	461a      	mov	r2, r3
 80028f4:	2301      	movs	r3, #1
 80028f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	212c      	movs	r1, #44	; 0x2c
 80028fe:	fb01 f303 	mul.w	r3, r1, r3
 8002902:	4413      	add	r3, r2
 8002904:	3361      	adds	r3, #97	; 0x61
 8002906:	2201      	movs	r2, #1
 8002908:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	4611      	mov	r1, r2
 8002914:	4618      	mov	r0, r3
 8002916:	f003 fc50 	bl	80061ba <USB_HC_Halt>
}
 800291a:	e28c      	b.n	8002e36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	015a      	lsls	r2, r3, #5
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	4413      	add	r3, r2
 8002924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292e:	2b40      	cmp	r3, #64	; 0x40
 8002930:	d12c      	bne.n	800298c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	212c      	movs	r1, #44	; 0x2c
 8002938:	fb01 f303 	mul.w	r3, r1, r3
 800293c:	4413      	add	r3, r2
 800293e:	3361      	adds	r3, #97	; 0x61
 8002940:	2204      	movs	r2, #4
 8002942:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	212c      	movs	r1, #44	; 0x2c
 800294a:	fb01 f303 	mul.w	r3, r1, r3
 800294e:	4413      	add	r3, r2
 8002950:	333d      	adds	r3, #61	; 0x3d
 8002952:	2201      	movs	r2, #1
 8002954:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	212c      	movs	r1, #44	; 0x2c
 800295c:	fb01 f303 	mul.w	r3, r1, r3
 8002960:	4413      	add	r3, r2
 8002962:	335c      	adds	r3, #92	; 0x5c
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	4611      	mov	r1, r2
 8002972:	4618      	mov	r0, r3
 8002974:	f003 fc21 	bl	80061ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	015a      	lsls	r2, r3, #5
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	4413      	add	r3, r2
 8002980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002984:	461a      	mov	r2, r3
 8002986:	2340      	movs	r3, #64	; 0x40
 8002988:	6093      	str	r3, [r2, #8]
}
 800298a:	e254      	b.n	8002e36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	015a      	lsls	r2, r3, #5
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	4413      	add	r3, r2
 8002994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d11a      	bne.n	80029d8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	015a      	lsls	r2, r3, #5
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	4413      	add	r3, r2
 80029aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ae:	461a      	mov	r2, r3
 80029b0:	2308      	movs	r3, #8
 80029b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	212c      	movs	r1, #44	; 0x2c
 80029ba:	fb01 f303 	mul.w	r3, r1, r3
 80029be:	4413      	add	r3, r2
 80029c0:	3361      	adds	r3, #97	; 0x61
 80029c2:	2205      	movs	r2, #5
 80029c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	4611      	mov	r1, r2
 80029d0:	4618      	mov	r0, r3
 80029d2:	f003 fbf2 	bl	80061ba <USB_HC_Halt>
}
 80029d6:	e22e      	b.n	8002e36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	015a      	lsls	r2, r3, #5
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	4413      	add	r3, r2
 80029e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 0310 	and.w	r3, r3, #16
 80029ea:	2b10      	cmp	r3, #16
 80029ec:	d140      	bne.n	8002a70 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	212c      	movs	r1, #44	; 0x2c
 80029f4:	fb01 f303 	mul.w	r3, r1, r3
 80029f8:	4413      	add	r3, r2
 80029fa:	335c      	adds	r3, #92	; 0x5c
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	212c      	movs	r1, #44	; 0x2c
 8002a06:	fb01 f303 	mul.w	r3, r1, r3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3361      	adds	r3, #97	; 0x61
 8002a0e:	2203      	movs	r2, #3
 8002a10:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	212c      	movs	r1, #44	; 0x2c
 8002a18:	fb01 f303 	mul.w	r3, r1, r3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	333d      	adds	r3, #61	; 0x3d
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d112      	bne.n	8002a4c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	212c      	movs	r1, #44	; 0x2c
 8002a2c:	fb01 f303 	mul.w	r3, r1, r3
 8002a30:	4413      	add	r3, r2
 8002a32:	333c      	adds	r3, #60	; 0x3c
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d108      	bne.n	8002a4c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	212c      	movs	r1, #44	; 0x2c
 8002a40:	fb01 f303 	mul.w	r3, r1, r3
 8002a44:	4413      	add	r3, r2
 8002a46:	333d      	adds	r3, #61	; 0x3d
 8002a48:	2201      	movs	r2, #1
 8002a4a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	4611      	mov	r1, r2
 8002a56:	4618      	mov	r0, r3
 8002a58:	f003 fbaf 	bl	80061ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	015a      	lsls	r2, r3, #5
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	4413      	add	r3, r2
 8002a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a68:	461a      	mov	r2, r3
 8002a6a:	2310      	movs	r3, #16
 8002a6c:	6093      	str	r3, [r2, #8]
}
 8002a6e:	e1e2      	b.n	8002e36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a82:	2b80      	cmp	r3, #128	; 0x80
 8002a84:	d164      	bne.n	8002b50 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d111      	bne.n	8002ab2 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	212c      	movs	r1, #44	; 0x2c
 8002a94:	fb01 f303 	mul.w	r3, r1, r3
 8002a98:	4413      	add	r3, r2
 8002a9a:	3361      	adds	r3, #97	; 0x61
 8002a9c:	2206      	movs	r2, #6
 8002a9e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	4611      	mov	r1, r2
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f003 fb85 	bl	80061ba <USB_HC_Halt>
 8002ab0:	e044      	b.n	8002b3c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	212c      	movs	r1, #44	; 0x2c
 8002ab8:	fb01 f303 	mul.w	r3, r1, r3
 8002abc:	4413      	add	r3, r2
 8002abe:	335c      	adds	r3, #92	; 0x5c
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	1c5a      	adds	r2, r3, #1
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	202c      	movs	r0, #44	; 0x2c
 8002aca:	fb00 f303 	mul.w	r3, r0, r3
 8002ace:	440b      	add	r3, r1
 8002ad0:	335c      	adds	r3, #92	; 0x5c
 8002ad2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	212c      	movs	r1, #44	; 0x2c
 8002ada:	fb01 f303 	mul.w	r3, r1, r3
 8002ade:	4413      	add	r3, r2
 8002ae0:	335c      	adds	r3, #92	; 0x5c
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d920      	bls.n	8002b2a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	212c      	movs	r1, #44	; 0x2c
 8002aee:	fb01 f303 	mul.w	r3, r1, r3
 8002af2:	4413      	add	r3, r2
 8002af4:	335c      	adds	r3, #92	; 0x5c
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	212c      	movs	r1, #44	; 0x2c
 8002b00:	fb01 f303 	mul.w	r3, r1, r3
 8002b04:	4413      	add	r3, r2
 8002b06:	3360      	adds	r3, #96	; 0x60
 8002b08:	2204      	movs	r2, #4
 8002b0a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	b2d9      	uxtb	r1, r3
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	202c      	movs	r0, #44	; 0x2c
 8002b16:	fb00 f303 	mul.w	r3, r0, r3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3360      	adds	r3, #96	; 0x60
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	461a      	mov	r2, r3
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f005 fdec 	bl	8008700 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002b28:	e008      	b.n	8002b3c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	212c      	movs	r1, #44	; 0x2c
 8002b30:	fb01 f303 	mul.w	r3, r1, r3
 8002b34:	4413      	add	r3, r2
 8002b36:	3360      	adds	r3, #96	; 0x60
 8002b38:	2202      	movs	r2, #2
 8002b3a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	015a      	lsls	r2, r3, #5
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	4413      	add	r3, r2
 8002b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b48:	461a      	mov	r2, r3
 8002b4a:	2380      	movs	r3, #128	; 0x80
 8002b4c:	6093      	str	r3, [r2, #8]
}
 8002b4e:	e172      	b.n	8002e36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b66:	d11b      	bne.n	8002ba0 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	212c      	movs	r1, #44	; 0x2c
 8002b6e:	fb01 f303 	mul.w	r3, r1, r3
 8002b72:	4413      	add	r3, r2
 8002b74:	3361      	adds	r3, #97	; 0x61
 8002b76:	2208      	movs	r2, #8
 8002b78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	4611      	mov	r1, r2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f003 fb18 	bl	80061ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	015a      	lsls	r2, r3, #5
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	4413      	add	r3, r2
 8002b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b96:	461a      	mov	r2, r3
 8002b98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b9c:	6093      	str	r3, [r2, #8]
}
 8002b9e:	e14a      	b.n	8002e36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	015a      	lsls	r2, r3, #5
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	f040 813f 	bne.w	8002e36 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	212c      	movs	r1, #44	; 0x2c
 8002bbe:	fb01 f303 	mul.w	r3, r1, r3
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3361      	adds	r3, #97	; 0x61
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d17d      	bne.n	8002cc8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	212c      	movs	r1, #44	; 0x2c
 8002bd2:	fb01 f303 	mul.w	r3, r1, r3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	3360      	adds	r3, #96	; 0x60
 8002bda:	2201      	movs	r2, #1
 8002bdc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	212c      	movs	r1, #44	; 0x2c
 8002be4:	fb01 f303 	mul.w	r3, r1, r3
 8002be8:	4413      	add	r3, r2
 8002bea:	333f      	adds	r3, #63	; 0x3f
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d00a      	beq.n	8002c08 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	212c      	movs	r1, #44	; 0x2c
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	333f      	adds	r3, #63	; 0x3f
 8002c00:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	f040 8100 	bne.w	8002e08 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d113      	bne.n	8002c38 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	212c      	movs	r1, #44	; 0x2c
 8002c16:	fb01 f303 	mul.w	r3, r1, r3
 8002c1a:	4413      	add	r3, r2
 8002c1c:	3355      	adds	r3, #85	; 0x55
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	f083 0301 	eor.w	r3, r3, #1
 8002c24:	b2d8      	uxtb	r0, r3
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	212c      	movs	r1, #44	; 0x2c
 8002c2c:	fb01 f303 	mul.w	r3, r1, r3
 8002c30:	4413      	add	r3, r2
 8002c32:	3355      	adds	r3, #85	; 0x55
 8002c34:	4602      	mov	r2, r0
 8002c36:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	f040 80e3 	bne.w	8002e08 <HCD_HC_OUT_IRQHandler+0x69c>
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	212c      	movs	r1, #44	; 0x2c
 8002c48:	fb01 f303 	mul.w	r3, r1, r3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	334c      	adds	r3, #76	; 0x4c
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 80d8 	beq.w	8002e08 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	212c      	movs	r1, #44	; 0x2c
 8002c5e:	fb01 f303 	mul.w	r3, r1, r3
 8002c62:	4413      	add	r3, r2
 8002c64:	334c      	adds	r3, #76	; 0x4c
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	202c      	movs	r0, #44	; 0x2c
 8002c6e:	fb00 f202 	mul.w	r2, r0, r2
 8002c72:	440a      	add	r2, r1
 8002c74:	3240      	adds	r2, #64	; 0x40
 8002c76:	8812      	ldrh	r2, [r2, #0]
 8002c78:	4413      	add	r3, r2
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	202c      	movs	r0, #44	; 0x2c
 8002c82:	fb00 f202 	mul.w	r2, r0, r2
 8002c86:	440a      	add	r2, r1
 8002c88:	3240      	adds	r2, #64	; 0x40
 8002c8a:	8812      	ldrh	r2, [r2, #0]
 8002c8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c90:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 80b5 	beq.w	8002e08 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	212c      	movs	r1, #44	; 0x2c
 8002ca4:	fb01 f303 	mul.w	r3, r1, r3
 8002ca8:	4413      	add	r3, r2
 8002caa:	3355      	adds	r3, #85	; 0x55
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	f083 0301 	eor.w	r3, r3, #1
 8002cb2:	b2d8      	uxtb	r0, r3
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	212c      	movs	r1, #44	; 0x2c
 8002cba:	fb01 f303 	mul.w	r3, r1, r3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3355      	adds	r3, #85	; 0x55
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	701a      	strb	r2, [r3, #0]
 8002cc6:	e09f      	b.n	8002e08 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	212c      	movs	r1, #44	; 0x2c
 8002cce:	fb01 f303 	mul.w	r3, r1, r3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	3361      	adds	r3, #97	; 0x61
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d109      	bne.n	8002cf0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	212c      	movs	r1, #44	; 0x2c
 8002ce2:	fb01 f303 	mul.w	r3, r1, r3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	3360      	adds	r3, #96	; 0x60
 8002cea:	2202      	movs	r2, #2
 8002cec:	701a      	strb	r2, [r3, #0]
 8002cee:	e08b      	b.n	8002e08 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	212c      	movs	r1, #44	; 0x2c
 8002cf6:	fb01 f303 	mul.w	r3, r1, r3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	3361      	adds	r3, #97	; 0x61
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	d109      	bne.n	8002d18 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	212c      	movs	r1, #44	; 0x2c
 8002d0a:	fb01 f303 	mul.w	r3, r1, r3
 8002d0e:	4413      	add	r3, r2
 8002d10:	3360      	adds	r3, #96	; 0x60
 8002d12:	2202      	movs	r2, #2
 8002d14:	701a      	strb	r2, [r3, #0]
 8002d16:	e077      	b.n	8002e08 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	212c      	movs	r1, #44	; 0x2c
 8002d1e:	fb01 f303 	mul.w	r3, r1, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	3361      	adds	r3, #97	; 0x61
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b05      	cmp	r3, #5
 8002d2a:	d109      	bne.n	8002d40 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	212c      	movs	r1, #44	; 0x2c
 8002d32:	fb01 f303 	mul.w	r3, r1, r3
 8002d36:	4413      	add	r3, r2
 8002d38:	3360      	adds	r3, #96	; 0x60
 8002d3a:	2205      	movs	r2, #5
 8002d3c:	701a      	strb	r2, [r3, #0]
 8002d3e:	e063      	b.n	8002e08 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	212c      	movs	r1, #44	; 0x2c
 8002d46:	fb01 f303 	mul.w	r3, r1, r3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3361      	adds	r3, #97	; 0x61
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b06      	cmp	r3, #6
 8002d52:	d009      	beq.n	8002d68 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	212c      	movs	r1, #44	; 0x2c
 8002d5a:	fb01 f303 	mul.w	r3, r1, r3
 8002d5e:	4413      	add	r3, r2
 8002d60:	3361      	adds	r3, #97	; 0x61
 8002d62:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	d14f      	bne.n	8002e08 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	212c      	movs	r1, #44	; 0x2c
 8002d6e:	fb01 f303 	mul.w	r3, r1, r3
 8002d72:	4413      	add	r3, r2
 8002d74:	335c      	adds	r3, #92	; 0x5c
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	1c5a      	adds	r2, r3, #1
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	202c      	movs	r0, #44	; 0x2c
 8002d80:	fb00 f303 	mul.w	r3, r0, r3
 8002d84:	440b      	add	r3, r1
 8002d86:	335c      	adds	r3, #92	; 0x5c
 8002d88:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	212c      	movs	r1, #44	; 0x2c
 8002d90:	fb01 f303 	mul.w	r3, r1, r3
 8002d94:	4413      	add	r3, r2
 8002d96:	335c      	adds	r3, #92	; 0x5c
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d912      	bls.n	8002dc4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	212c      	movs	r1, #44	; 0x2c
 8002da4:	fb01 f303 	mul.w	r3, r1, r3
 8002da8:	4413      	add	r3, r2
 8002daa:	335c      	adds	r3, #92	; 0x5c
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	212c      	movs	r1, #44	; 0x2c
 8002db6:	fb01 f303 	mul.w	r3, r1, r3
 8002dba:	4413      	add	r3, r2
 8002dbc:	3360      	adds	r3, #96	; 0x60
 8002dbe:	2204      	movs	r2, #4
 8002dc0:	701a      	strb	r2, [r3, #0]
 8002dc2:	e021      	b.n	8002e08 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	212c      	movs	r1, #44	; 0x2c
 8002dca:	fb01 f303 	mul.w	r3, r1, r3
 8002dce:	4413      	add	r3, r2
 8002dd0:	3360      	adds	r3, #96	; 0x60
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	015a      	lsls	r2, r3, #5
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002dec:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002df4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	015a      	lsls	r2, r3, #5
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e02:	461a      	mov	r2, r3
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	015a      	lsls	r2, r3, #5
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e14:	461a      	mov	r2, r3
 8002e16:	2302      	movs	r3, #2
 8002e18:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	b2d9      	uxtb	r1, r3
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	202c      	movs	r0, #44	; 0x2c
 8002e24:	fb00 f303 	mul.w	r3, r0, r3
 8002e28:	4413      	add	r3, r2
 8002e2a:	3360      	adds	r3, #96	; 0x60
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f005 fc65 	bl	8008700 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e36:	bf00      	nop
 8002e38:	3720      	adds	r7, #32
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b08a      	sub	sp, #40	; 0x28
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	0c5b      	lsrs	r3, r3, #17
 8002e64:	f003 030f 	and.w	r3, r3, #15
 8002e68:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	091b      	lsrs	r3, r3, #4
 8002e6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e72:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d004      	beq.n	8002e84 <HCD_RXQLVL_IRQHandler+0x46>
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2b05      	cmp	r3, #5
 8002e7e:	f000 80a9 	beq.w	8002fd4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002e82:	e0aa      	b.n	8002fda <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 80a6 	beq.w	8002fd8 <HCD_RXQLVL_IRQHandler+0x19a>
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	212c      	movs	r1, #44	; 0x2c
 8002e92:	fb01 f303 	mul.w	r3, r1, r3
 8002e96:	4413      	add	r3, r2
 8002e98:	3344      	adds	r3, #68	; 0x44
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 809b 	beq.w	8002fd8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	212c      	movs	r1, #44	; 0x2c
 8002ea8:	fb01 f303 	mul.w	r3, r1, r3
 8002eac:	4413      	add	r3, r2
 8002eae:	3350      	adds	r3, #80	; 0x50
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	441a      	add	r2, r3
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	202c      	movs	r0, #44	; 0x2c
 8002ebc:	fb00 f303 	mul.w	r3, r0, r3
 8002ec0:	440b      	add	r3, r1
 8002ec2:	334c      	adds	r3, #76	; 0x4c
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d87a      	bhi.n	8002fc0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6818      	ldr	r0, [r3, #0]
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	212c      	movs	r1, #44	; 0x2c
 8002ed4:	fb01 f303 	mul.w	r3, r1, r3
 8002ed8:	4413      	add	r3, r2
 8002eda:	3344      	adds	r3, #68	; 0x44
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	b292      	uxth	r2, r2
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	f002 fcc0 	bl	8005868 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	212c      	movs	r1, #44	; 0x2c
 8002eee:	fb01 f303 	mul.w	r3, r1, r3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	3344      	adds	r3, #68	; 0x44
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	441a      	add	r2, r3
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	202c      	movs	r0, #44	; 0x2c
 8002f02:	fb00 f303 	mul.w	r3, r0, r3
 8002f06:	440b      	add	r3, r1
 8002f08:	3344      	adds	r3, #68	; 0x44
 8002f0a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	212c      	movs	r1, #44	; 0x2c
 8002f12:	fb01 f303 	mul.w	r3, r1, r3
 8002f16:	4413      	add	r3, r2
 8002f18:	3350      	adds	r3, #80	; 0x50
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	441a      	add	r2, r3
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	202c      	movs	r0, #44	; 0x2c
 8002f26:	fb00 f303 	mul.w	r3, r0, r3
 8002f2a:	440b      	add	r3, r1
 8002f2c:	3350      	adds	r3, #80	; 0x50
 8002f2e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	015a      	lsls	r2, r3, #5
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	4413      	add	r3, r2
 8002f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	0cdb      	lsrs	r3, r3, #19
 8002f40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f44:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	212c      	movs	r1, #44	; 0x2c
 8002f4c:	fb01 f303 	mul.w	r3, r1, r3
 8002f50:	4413      	add	r3, r2
 8002f52:	3340      	adds	r3, #64	; 0x40
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	461a      	mov	r2, r3
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d13c      	bne.n	8002fd8 <HCD_RXQLVL_IRQHandler+0x19a>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d039      	beq.n	8002fd8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	015a      	lsls	r2, r3, #5
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f7a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f82:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	015a      	lsls	r2, r3, #5
 8002f88:	6a3b      	ldr	r3, [r7, #32]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f90:	461a      	mov	r2, r3
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	212c      	movs	r1, #44	; 0x2c
 8002f9c:	fb01 f303 	mul.w	r3, r1, r3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	3354      	adds	r3, #84	; 0x54
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	f083 0301 	eor.w	r3, r3, #1
 8002faa:	b2d8      	uxtb	r0, r3
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	212c      	movs	r1, #44	; 0x2c
 8002fb2:	fb01 f303 	mul.w	r3, r1, r3
 8002fb6:	4413      	add	r3, r2
 8002fb8:	3354      	adds	r3, #84	; 0x54
 8002fba:	4602      	mov	r2, r0
 8002fbc:	701a      	strb	r2, [r3, #0]
      break;
 8002fbe:	e00b      	b.n	8002fd8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	212c      	movs	r1, #44	; 0x2c
 8002fc6:	fb01 f303 	mul.w	r3, r1, r3
 8002fca:	4413      	add	r3, r2
 8002fcc:	3360      	adds	r3, #96	; 0x60
 8002fce:	2204      	movs	r2, #4
 8002fd0:	701a      	strb	r2, [r3, #0]
      break;
 8002fd2:	e001      	b.n	8002fd8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002fd4:	bf00      	nop
 8002fd6:	e000      	b.n	8002fda <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002fd8:	bf00      	nop
  }
}
 8002fda:	bf00      	nop
 8002fdc:	3728      	adds	r7, #40	; 0x28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b086      	sub	sp, #24
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800300e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b02      	cmp	r3, #2
 8003018:	d10b      	bne.n	8003032 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b01      	cmp	r3, #1
 8003022:	d102      	bne.n	800302a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f005 fb4f 	bl	80086c8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	f043 0302 	orr.w	r3, r3, #2
 8003030:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f003 0308 	and.w	r3, r3, #8
 8003038:	2b08      	cmp	r3, #8
 800303a:	d132      	bne.n	80030a2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f043 0308 	orr.w	r3, r3, #8
 8003042:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	2b04      	cmp	r3, #4
 800304c:	d126      	bne.n	800309c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d113      	bne.n	800307e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800305c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003060:	d106      	bne.n	8003070 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2102      	movs	r1, #2
 8003068:	4618      	mov	r0, r3
 800306a:	f002 fd6b 	bl	8005b44 <USB_InitFSLSPClkSel>
 800306e:	e011      	b.n	8003094 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2101      	movs	r1, #1
 8003076:	4618      	mov	r0, r3
 8003078:	f002 fd64 	bl	8005b44 <USB_InitFSLSPClkSel>
 800307c:	e00a      	b.n	8003094 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d106      	bne.n	8003094 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800308c:	461a      	mov	r2, r3
 800308e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003092:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f005 fb41 	bl	800871c <HAL_HCD_PortEnabled_Callback>
 800309a:	e002      	b.n	80030a2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f005 fb4b 	bl	8008738 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f003 0320 	and.w	r3, r3, #32
 80030a8:	2b20      	cmp	r3, #32
 80030aa:	d103      	bne.n	80030b4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	f043 0320 	orr.w	r3, r3, #32
 80030b2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030ba:	461a      	mov	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	6013      	str	r3, [r2, #0]
}
 80030c0:	bf00      	nop
 80030c2:	3718      	adds	r7, #24
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e12b      	b.n	8003332 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d106      	bne.n	80030f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7fd fde8 	bl	8000cc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2224      	movs	r2, #36	; 0x24
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 0201 	bic.w	r2, r2, #1
 800310a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800311a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800312a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800312c:	f001 fa20 	bl	8004570 <HAL_RCC_GetPCLK1Freq>
 8003130:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	4a81      	ldr	r2, [pc, #516]	; (800333c <HAL_I2C_Init+0x274>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d807      	bhi.n	800314c <HAL_I2C_Init+0x84>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4a80      	ldr	r2, [pc, #512]	; (8003340 <HAL_I2C_Init+0x278>)
 8003140:	4293      	cmp	r3, r2
 8003142:	bf94      	ite	ls
 8003144:	2301      	movls	r3, #1
 8003146:	2300      	movhi	r3, #0
 8003148:	b2db      	uxtb	r3, r3
 800314a:	e006      	b.n	800315a <HAL_I2C_Init+0x92>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	4a7d      	ldr	r2, [pc, #500]	; (8003344 <HAL_I2C_Init+0x27c>)
 8003150:	4293      	cmp	r3, r2
 8003152:	bf94      	ite	ls
 8003154:	2301      	movls	r3, #1
 8003156:	2300      	movhi	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e0e7      	b.n	8003332 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	4a78      	ldr	r2, [pc, #480]	; (8003348 <HAL_I2C_Init+0x280>)
 8003166:	fba2 2303 	umull	r2, r3, r2, r3
 800316a:	0c9b      	lsrs	r3, r3, #18
 800316c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	430a      	orrs	r2, r1
 8003180:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	4a6a      	ldr	r2, [pc, #424]	; (800333c <HAL_I2C_Init+0x274>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d802      	bhi.n	800319c <HAL_I2C_Init+0xd4>
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	3301      	adds	r3, #1
 800319a:	e009      	b.n	80031b0 <HAL_I2C_Init+0xe8>
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031a2:	fb02 f303 	mul.w	r3, r2, r3
 80031a6:	4a69      	ldr	r2, [pc, #420]	; (800334c <HAL_I2C_Init+0x284>)
 80031a8:	fba2 2303 	umull	r2, r3, r2, r3
 80031ac:	099b      	lsrs	r3, r3, #6
 80031ae:	3301      	adds	r3, #1
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6812      	ldr	r2, [r2, #0]
 80031b4:	430b      	orrs	r3, r1
 80031b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	495c      	ldr	r1, [pc, #368]	; (800333c <HAL_I2C_Init+0x274>)
 80031cc:	428b      	cmp	r3, r1
 80031ce:	d819      	bhi.n	8003204 <HAL_I2C_Init+0x13c>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	1e59      	subs	r1, r3, #1
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	fbb1 f3f3 	udiv	r3, r1, r3
 80031de:	1c59      	adds	r1, r3, #1
 80031e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031e4:	400b      	ands	r3, r1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00a      	beq.n	8003200 <HAL_I2C_Init+0x138>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	1e59      	subs	r1, r3, #1
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80031f8:	3301      	adds	r3, #1
 80031fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031fe:	e051      	b.n	80032a4 <HAL_I2C_Init+0x1dc>
 8003200:	2304      	movs	r3, #4
 8003202:	e04f      	b.n	80032a4 <HAL_I2C_Init+0x1dc>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d111      	bne.n	8003230 <HAL_I2C_Init+0x168>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	1e58      	subs	r0, r3, #1
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6859      	ldr	r1, [r3, #4]
 8003214:	460b      	mov	r3, r1
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	440b      	add	r3, r1
 800321a:	fbb0 f3f3 	udiv	r3, r0, r3
 800321e:	3301      	adds	r3, #1
 8003220:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003224:	2b00      	cmp	r3, #0
 8003226:	bf0c      	ite	eq
 8003228:	2301      	moveq	r3, #1
 800322a:	2300      	movne	r3, #0
 800322c:	b2db      	uxtb	r3, r3
 800322e:	e012      	b.n	8003256 <HAL_I2C_Init+0x18e>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	1e58      	subs	r0, r3, #1
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6859      	ldr	r1, [r3, #4]
 8003238:	460b      	mov	r3, r1
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	440b      	add	r3, r1
 800323e:	0099      	lsls	r1, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	fbb0 f3f3 	udiv	r3, r0, r3
 8003246:	3301      	adds	r3, #1
 8003248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800324c:	2b00      	cmp	r3, #0
 800324e:	bf0c      	ite	eq
 8003250:	2301      	moveq	r3, #1
 8003252:	2300      	movne	r3, #0
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <HAL_I2C_Init+0x196>
 800325a:	2301      	movs	r3, #1
 800325c:	e022      	b.n	80032a4 <HAL_I2C_Init+0x1dc>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10e      	bne.n	8003284 <HAL_I2C_Init+0x1bc>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	1e58      	subs	r0, r3, #1
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6859      	ldr	r1, [r3, #4]
 800326e:	460b      	mov	r3, r1
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	440b      	add	r3, r1
 8003274:	fbb0 f3f3 	udiv	r3, r0, r3
 8003278:	3301      	adds	r3, #1
 800327a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800327e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003282:	e00f      	b.n	80032a4 <HAL_I2C_Init+0x1dc>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	1e58      	subs	r0, r3, #1
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6859      	ldr	r1, [r3, #4]
 800328c:	460b      	mov	r3, r1
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	0099      	lsls	r1, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	fbb0 f3f3 	udiv	r3, r0, r3
 800329a:	3301      	adds	r3, #1
 800329c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	6809      	ldr	r1, [r1, #0]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69da      	ldr	r2, [r3, #28]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6911      	ldr	r1, [r2, #16]
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	68d2      	ldr	r2, [r2, #12]
 80032de:	4311      	orrs	r1, r2
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	6812      	ldr	r2, [r2, #0]
 80032e4:	430b      	orrs	r3, r1
 80032e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	695a      	ldr	r2, [r3, #20]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	430a      	orrs	r2, r1
 8003302:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 0201 	orr.w	r2, r2, #1
 8003312:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2220      	movs	r2, #32
 800331e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	000186a0 	.word	0x000186a0
 8003340:	001e847f 	.word	0x001e847f
 8003344:	003d08ff 	.word	0x003d08ff
 8003348:	431bde83 	.word	0x431bde83
 800334c:	10624dd3 	.word	0x10624dd3

08003350 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b088      	sub	sp, #32
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e128      	b.n	80035b4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d109      	bne.n	8003382 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a90      	ldr	r2, [pc, #576]	; (80035bc <HAL_I2S_Init+0x26c>)
 800337a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7fd fce9 	bl	8000d54 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2202      	movs	r2, #2
 8003386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6812      	ldr	r2, [r2, #0]
 8003394:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003398:	f023 030f 	bic.w	r3, r3, #15
 800339c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2202      	movs	r2, #2
 80033a4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d060      	beq.n	8003470 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d102      	bne.n	80033bc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80033b6:	2310      	movs	r3, #16
 80033b8:	617b      	str	r3, [r7, #20]
 80033ba:	e001      	b.n	80033c0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80033bc:	2320      	movs	r3, #32
 80033be:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	2b20      	cmp	r3, #32
 80033c6:	d802      	bhi.n	80033ce <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80033ce:	2001      	movs	r0, #1
 80033d0:	f001 f9d2 	bl	8004778 <HAL_RCCEx_GetPeriphCLKFreq>
 80033d4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033de:	d125      	bne.n	800342c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d010      	beq.n	800340a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80033f2:	4613      	mov	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	461a      	mov	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	fbb2 f3f3 	udiv	r3, r2, r3
 8003404:	3305      	adds	r3, #5
 8003406:	613b      	str	r3, [r7, #16]
 8003408:	e01f      	b.n	800344a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	fbb2 f2f3 	udiv	r2, r2, r3
 8003414:	4613      	mov	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	461a      	mov	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	fbb2 f3f3 	udiv	r3, r2, r3
 8003426:	3305      	adds	r3, #5
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	e00e      	b.n	800344a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	fbb2 f2f3 	udiv	r2, r2, r3
 8003434:	4613      	mov	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	461a      	mov	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	fbb2 f3f3 	udiv	r3, r2, r3
 8003446:	3305      	adds	r3, #5
 8003448:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	4a5c      	ldr	r2, [pc, #368]	; (80035c0 <HAL_I2S_Init+0x270>)
 800344e:	fba2 2303 	umull	r2, r3, r2, r3
 8003452:	08db      	lsrs	r3, r3, #3
 8003454:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	085b      	lsrs	r3, r3, #1
 8003466:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	021b      	lsls	r3, r3, #8
 800346c:	61bb      	str	r3, [r7, #24]
 800346e:	e003      	b.n	8003478 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003470:	2302      	movs	r3, #2
 8003472:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003474:	2300      	movs	r3, #0
 8003476:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d902      	bls.n	8003484 <HAL_I2S_Init+0x134>
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	2bff      	cmp	r3, #255	; 0xff
 8003482:	d907      	bls.n	8003494 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003488:	f043 0210 	orr.w	r2, r3, #16
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e08f      	b.n	80035b4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	691a      	ldr	r2, [r3, #16]
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	ea42 0103 	orr.w	r1, r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	69fa      	ldr	r2, [r7, #28]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80034b2:	f023 030f 	bic.w	r3, r3, #15
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6851      	ldr	r1, [r2, #4]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6892      	ldr	r2, [r2, #8]
 80034be:	4311      	orrs	r1, r2
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	68d2      	ldr	r2, [r2, #12]
 80034c4:	4311      	orrs	r1, r2
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6992      	ldr	r2, [r2, #24]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	431a      	orrs	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034d6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d161      	bne.n	80035a4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a38      	ldr	r2, [pc, #224]	; (80035c4 <HAL_I2S_Init+0x274>)
 80034e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a37      	ldr	r2, [pc, #220]	; (80035c8 <HAL_I2S_Init+0x278>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d101      	bne.n	80034f4 <HAL_I2S_Init+0x1a4>
 80034f0:	4b36      	ldr	r3, [pc, #216]	; (80035cc <HAL_I2S_Init+0x27c>)
 80034f2:	e001      	b.n	80034f8 <HAL_I2S_Init+0x1a8>
 80034f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	6812      	ldr	r2, [r2, #0]
 80034fe:	4932      	ldr	r1, [pc, #200]	; (80035c8 <HAL_I2S_Init+0x278>)
 8003500:	428a      	cmp	r2, r1
 8003502:	d101      	bne.n	8003508 <HAL_I2S_Init+0x1b8>
 8003504:	4a31      	ldr	r2, [pc, #196]	; (80035cc <HAL_I2S_Init+0x27c>)
 8003506:	e001      	b.n	800350c <HAL_I2S_Init+0x1bc>
 8003508:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800350c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003510:	f023 030f 	bic.w	r3, r3, #15
 8003514:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a2b      	ldr	r2, [pc, #172]	; (80035c8 <HAL_I2S_Init+0x278>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d101      	bne.n	8003524 <HAL_I2S_Init+0x1d4>
 8003520:	4b2a      	ldr	r3, [pc, #168]	; (80035cc <HAL_I2S_Init+0x27c>)
 8003522:	e001      	b.n	8003528 <HAL_I2S_Init+0x1d8>
 8003524:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003528:	2202      	movs	r2, #2
 800352a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a25      	ldr	r2, [pc, #148]	; (80035c8 <HAL_I2S_Init+0x278>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d101      	bne.n	800353a <HAL_I2S_Init+0x1ea>
 8003536:	4b25      	ldr	r3, [pc, #148]	; (80035cc <HAL_I2S_Init+0x27c>)
 8003538:	e001      	b.n	800353e <HAL_I2S_Init+0x1ee>
 800353a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800353e:	69db      	ldr	r3, [r3, #28]
 8003540:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800354a:	d003      	beq.n	8003554 <HAL_I2S_Init+0x204>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d103      	bne.n	800355c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003554:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003558:	613b      	str	r3, [r7, #16]
 800355a:	e001      	b.n	8003560 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800355c:	2300      	movs	r3, #0
 800355e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800356a:	4313      	orrs	r3, r2
 800356c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003574:	4313      	orrs	r3, r2
 8003576:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800357e:	4313      	orrs	r3, r2
 8003580:	b29a      	uxth	r2, r3
 8003582:	897b      	ldrh	r3, [r7, #10]
 8003584:	4313      	orrs	r3, r2
 8003586:	b29b      	uxth	r3, r3
 8003588:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800358c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a0d      	ldr	r2, [pc, #52]	; (80035c8 <HAL_I2S_Init+0x278>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d101      	bne.n	800359c <HAL_I2S_Init+0x24c>
 8003598:	4b0c      	ldr	r3, [pc, #48]	; (80035cc <HAL_I2S_Init+0x27c>)
 800359a:	e001      	b.n	80035a0 <HAL_I2S_Init+0x250>
 800359c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035a0:	897a      	ldrh	r2, [r7, #10]
 80035a2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3720      	adds	r7, #32
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	080036c7 	.word	0x080036c7
 80035c0:	cccccccd 	.word	0xcccccccd
 80035c4:	080037dd 	.word	0x080037dd
 80035c8:	40003800 	.word	0x40003800
 80035cc:	40003400 	.word	0x40003400

080035d0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	881a      	ldrh	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	1c9a      	adds	r2, r3, #2
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362e:	b29b      	uxth	r3, r3
 8003630:	3b01      	subs	r3, #1
 8003632:	b29a      	uxth	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363c:	b29b      	uxth	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10e      	bne.n	8003660 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003650:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7ff ffb8 	bl	80035d0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003660:	bf00      	nop
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367a:	b292      	uxth	r2, r2
 800367c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003682:	1c9a      	adds	r2, r3, #2
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800368c:	b29b      	uxth	r3, r3
 800368e:	3b01      	subs	r3, #1
 8003690:	b29a      	uxth	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800369a:	b29b      	uxth	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10e      	bne.n	80036be <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036ae:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff ff93 	bl	80035e4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b086      	sub	sp, #24
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d13a      	bne.n	8003758 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d109      	bne.n	8003700 <I2S_IRQHandler+0x3a>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f6:	2b40      	cmp	r3, #64	; 0x40
 80036f8:	d102      	bne.n	8003700 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7ff ffb4 	bl	8003668 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003706:	2b40      	cmp	r3, #64	; 0x40
 8003708:	d126      	bne.n	8003758 <I2S_IRQHandler+0x92>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f003 0320 	and.w	r3, r3, #32
 8003714:	2b20      	cmp	r3, #32
 8003716:	d11f      	bne.n	8003758 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003726:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003728:	2300      	movs	r3, #0
 800372a:	613b      	str	r3, [r7, #16]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	613b      	str	r3, [r7, #16]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	613b      	str	r3, [r7, #16]
 800373c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374a:	f043 0202 	orr.w	r2, r3, #2
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7ff ff50 	bl	80035f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b03      	cmp	r3, #3
 8003762:	d136      	bne.n	80037d2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b02      	cmp	r3, #2
 800376c:	d109      	bne.n	8003782 <I2S_IRQHandler+0xbc>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003778:	2b80      	cmp	r3, #128	; 0x80
 800377a:	d102      	bne.n	8003782 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7ff ff45 	bl	800360c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f003 0308 	and.w	r3, r3, #8
 8003788:	2b08      	cmp	r3, #8
 800378a:	d122      	bne.n	80037d2 <I2S_IRQHandler+0x10c>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f003 0320 	and.w	r3, r3, #32
 8003796:	2b20      	cmp	r3, #32
 8003798:	d11b      	bne.n	80037d2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037a8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80037aa:	2300      	movs	r3, #0
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c4:	f043 0204 	orr.w	r2, r3, #4
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7ff ff13 	bl	80035f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037d2:	bf00      	nop
 80037d4:	3718      	adds	r7, #24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
	...

080037dc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b088      	sub	sp, #32
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a92      	ldr	r2, [pc, #584]	; (8003a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d101      	bne.n	80037fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80037f6:	4b92      	ldr	r3, [pc, #584]	; (8003a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037f8:	e001      	b.n	80037fe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80037fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a8b      	ldr	r2, [pc, #556]	; (8003a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d101      	bne.n	8003818 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003814:	4b8a      	ldr	r3, [pc, #552]	; (8003a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003816:	e001      	b.n	800381c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003818:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003828:	d004      	beq.n	8003834 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	f040 8099 	bne.w	8003966 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b02      	cmp	r3, #2
 800383c:	d107      	bne.n	800384e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f925 	bl	8003a98 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b01      	cmp	r3, #1
 8003856:	d107      	bne.n	8003868 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385e:	2b00      	cmp	r3, #0
 8003860:	d002      	beq.n	8003868 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f9c8 	bl	8003bf8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386e:	2b40      	cmp	r3, #64	; 0x40
 8003870:	d13a      	bne.n	80038e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	f003 0320 	and.w	r3, r3, #32
 8003878:	2b00      	cmp	r3, #0
 800387a:	d035      	beq.n	80038e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a6e      	ldr	r2, [pc, #440]	; (8003a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d101      	bne.n	800388a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003886:	4b6e      	ldr	r3, [pc, #440]	; (8003a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003888:	e001      	b.n	800388e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800388a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800388e:	685a      	ldr	r2, [r3, #4]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4969      	ldr	r1, [pc, #420]	; (8003a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003896:	428b      	cmp	r3, r1
 8003898:	d101      	bne.n	800389e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800389a:	4b69      	ldr	r3, [pc, #420]	; (8003a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800389c:	e001      	b.n	80038a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800389e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038a6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038b6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80038b8:	2300      	movs	r3, #0
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038da:	f043 0202 	orr.w	r2, r3, #2
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7ff fe88 	bl	80035f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	f003 0308 	and.w	r3, r3, #8
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	f040 80c3 	bne.w	8003a7a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f003 0320 	and.w	r3, r3, #32
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 80bd 	beq.w	8003a7a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800390e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a49      	ldr	r2, [pc, #292]	; (8003a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d101      	bne.n	800391e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800391a:	4b49      	ldr	r3, [pc, #292]	; (8003a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800391c:	e001      	b.n	8003922 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800391e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4944      	ldr	r1, [pc, #272]	; (8003a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800392a:	428b      	cmp	r3, r1
 800392c:	d101      	bne.n	8003932 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800392e:	4b44      	ldr	r3, [pc, #272]	; (8003a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003930:	e001      	b.n	8003936 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003932:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003936:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800393a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800393c:	2300      	movs	r3, #0
 800393e:	60bb      	str	r3, [r7, #8]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	60bb      	str	r3, [r7, #8]
 8003948:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003956:	f043 0204 	orr.w	r2, r3, #4
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff fe4a 	bl	80035f8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003964:	e089      	b.n	8003a7a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b02      	cmp	r3, #2
 800396e:	d107      	bne.n	8003980 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003976:	2b00      	cmp	r3, #0
 8003978:	d002      	beq.n	8003980 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f8be 	bl	8003afc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b01      	cmp	r3, #1
 8003988:	d107      	bne.n	800399a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003990:	2b00      	cmp	r3, #0
 8003992:	d002      	beq.n	800399a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 f8fd 	bl	8003b94 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a0:	2b40      	cmp	r3, #64	; 0x40
 80039a2:	d12f      	bne.n	8003a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	f003 0320 	and.w	r3, r3, #32
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d02a      	beq.n	8003a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039bc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a1e      	ldr	r2, [pc, #120]	; (8003a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d101      	bne.n	80039cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80039c8:	4b1d      	ldr	r3, [pc, #116]	; (8003a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039ca:	e001      	b.n	80039d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80039cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4919      	ldr	r1, [pc, #100]	; (8003a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039d8:	428b      	cmp	r3, r1
 80039da:	d101      	bne.n	80039e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80039dc:	4b18      	ldr	r3, [pc, #96]	; (8003a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039de:	e001      	b.n	80039e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80039e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039e8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f6:	f043 0202 	orr.w	r2, r3, #2
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f7ff fdfa 	bl	80035f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	f003 0308 	and.w	r3, r3, #8
 8003a0a:	2b08      	cmp	r3, #8
 8003a0c:	d136      	bne.n	8003a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	f003 0320 	and.w	r3, r3, #32
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d031      	beq.n	8003a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a07      	ldr	r2, [pc, #28]	; (8003a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d101      	bne.n	8003a26 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003a22:	4b07      	ldr	r3, [pc, #28]	; (8003a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a24:	e001      	b.n	8003a2a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003a26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4902      	ldr	r1, [pc, #8]	; (8003a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a32:	428b      	cmp	r3, r1
 8003a34:	d106      	bne.n	8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003a36:	4b02      	ldr	r3, [pc, #8]	; (8003a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a38:	e006      	b.n	8003a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003a3a:	bf00      	nop
 8003a3c:	40003800 	.word	0x40003800
 8003a40:	40003400 	.word	0x40003400
 8003a44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a48:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a4c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a5c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6a:	f043 0204 	orr.w	r2, r3, #4
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7ff fdc0 	bl	80035f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a78:	e000      	b.n	8003a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a7a:	bf00      	nop
}
 8003a7c:	bf00      	nop
 8003a7e:	3720      	adds	r7, #32
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	1c99      	adds	r1, r3, #2
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6251      	str	r1, [r2, #36]	; 0x24
 8003aaa:	881a      	ldrh	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d113      	bne.n	8003af2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ad8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d106      	bne.n	8003af2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7ff ffc9 	bl	8003a84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003af2:	bf00      	nop
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
	...

08003afc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	1c99      	adds	r1, r3, #2
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6251      	str	r1, [r2, #36]	; 0x24
 8003b0e:	8819      	ldrh	r1, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a1d      	ldr	r2, [pc, #116]	; (8003b8c <I2SEx_TxISR_I2SExt+0x90>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d101      	bne.n	8003b1e <I2SEx_TxISR_I2SExt+0x22>
 8003b1a:	4b1d      	ldr	r3, [pc, #116]	; (8003b90 <I2SEx_TxISR_I2SExt+0x94>)
 8003b1c:	e001      	b.n	8003b22 <I2SEx_TxISR_I2SExt+0x26>
 8003b1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b22:	460a      	mov	r2, r1
 8003b24:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d121      	bne.n	8003b82 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a12      	ldr	r2, [pc, #72]	; (8003b8c <I2SEx_TxISR_I2SExt+0x90>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d101      	bne.n	8003b4c <I2SEx_TxISR_I2SExt+0x50>
 8003b48:	4b11      	ldr	r3, [pc, #68]	; (8003b90 <I2SEx_TxISR_I2SExt+0x94>)
 8003b4a:	e001      	b.n	8003b50 <I2SEx_TxISR_I2SExt+0x54>
 8003b4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	490d      	ldr	r1, [pc, #52]	; (8003b8c <I2SEx_TxISR_I2SExt+0x90>)
 8003b58:	428b      	cmp	r3, r1
 8003b5a:	d101      	bne.n	8003b60 <I2SEx_TxISR_I2SExt+0x64>
 8003b5c:	4b0c      	ldr	r3, [pc, #48]	; (8003b90 <I2SEx_TxISR_I2SExt+0x94>)
 8003b5e:	e001      	b.n	8003b64 <I2SEx_TxISR_I2SExt+0x68>
 8003b60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b68:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d106      	bne.n	8003b82 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f7ff ff81 	bl	8003a84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b82:	bf00      	nop
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40003800 	.word	0x40003800
 8003b90:	40003400 	.word	0x40003400

08003b94 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68d8      	ldr	r0, [r3, #12]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba6:	1c99      	adds	r1, r3, #2
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003bac:	b282      	uxth	r2, r0
 8003bae:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d113      	bne.n	8003bf0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bd6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d106      	bne.n	8003bf0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7ff ff4a 	bl	8003a84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bf0:	bf00      	nop
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a20      	ldr	r2, [pc, #128]	; (8003c88 <I2SEx_RxISR_I2SExt+0x90>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d101      	bne.n	8003c0e <I2SEx_RxISR_I2SExt+0x16>
 8003c0a:	4b20      	ldr	r3, [pc, #128]	; (8003c8c <I2SEx_RxISR_I2SExt+0x94>)
 8003c0c:	e001      	b.n	8003c12 <I2SEx_RxISR_I2SExt+0x1a>
 8003c0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c12:	68d8      	ldr	r0, [r3, #12]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c18:	1c99      	adds	r1, r3, #2
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003c1e:	b282      	uxth	r2, r0
 8003c20:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d121      	bne.n	8003c7e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a12      	ldr	r2, [pc, #72]	; (8003c88 <I2SEx_RxISR_I2SExt+0x90>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d101      	bne.n	8003c48 <I2SEx_RxISR_I2SExt+0x50>
 8003c44:	4b11      	ldr	r3, [pc, #68]	; (8003c8c <I2SEx_RxISR_I2SExt+0x94>)
 8003c46:	e001      	b.n	8003c4c <I2SEx_RxISR_I2SExt+0x54>
 8003c48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	490d      	ldr	r1, [pc, #52]	; (8003c88 <I2SEx_RxISR_I2SExt+0x90>)
 8003c54:	428b      	cmp	r3, r1
 8003c56:	d101      	bne.n	8003c5c <I2SEx_RxISR_I2SExt+0x64>
 8003c58:	4b0c      	ldr	r3, [pc, #48]	; (8003c8c <I2SEx_RxISR_I2SExt+0x94>)
 8003c5a:	e001      	b.n	8003c60 <I2SEx_RxISR_I2SExt+0x68>
 8003c5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c60:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c64:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d106      	bne.n	8003c7e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f7ff ff03 	bl	8003a84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c7e:	bf00      	nop
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	40003800 	.word	0x40003800
 8003c8c:	40003400 	.word	0x40003400

08003c90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e267      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d075      	beq.n	8003d9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cae:	4b88      	ldr	r3, [pc, #544]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d00c      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cba:	4b85      	ldr	r3, [pc, #532]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cc2:	2b08      	cmp	r3, #8
 8003cc4:	d112      	bne.n	8003cec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cc6:	4b82      	ldr	r3, [pc, #520]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cd2:	d10b      	bne.n	8003cec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd4:	4b7e      	ldr	r3, [pc, #504]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d05b      	beq.n	8003d98 <HAL_RCC_OscConfig+0x108>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d157      	bne.n	8003d98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e242      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf4:	d106      	bne.n	8003d04 <HAL_RCC_OscConfig+0x74>
 8003cf6:	4b76      	ldr	r3, [pc, #472]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a75      	ldr	r2, [pc, #468]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d00:	6013      	str	r3, [r2, #0]
 8003d02:	e01d      	b.n	8003d40 <HAL_RCC_OscConfig+0xb0>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d0c:	d10c      	bne.n	8003d28 <HAL_RCC_OscConfig+0x98>
 8003d0e:	4b70      	ldr	r3, [pc, #448]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a6f      	ldr	r2, [pc, #444]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003d14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d18:	6013      	str	r3, [r2, #0]
 8003d1a:	4b6d      	ldr	r3, [pc, #436]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a6c      	ldr	r2, [pc, #432]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d24:	6013      	str	r3, [r2, #0]
 8003d26:	e00b      	b.n	8003d40 <HAL_RCC_OscConfig+0xb0>
 8003d28:	4b69      	ldr	r3, [pc, #420]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a68      	ldr	r2, [pc, #416]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d32:	6013      	str	r3, [r2, #0]
 8003d34:	4b66      	ldr	r3, [pc, #408]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a65      	ldr	r2, [pc, #404]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d013      	beq.n	8003d70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d48:	f7fd fa8a 	bl	8001260 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d50:	f7fd fa86 	bl	8001260 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b64      	cmp	r3, #100	; 0x64
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e207      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d62:	4b5b      	ldr	r3, [pc, #364]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0f0      	beq.n	8003d50 <HAL_RCC_OscConfig+0xc0>
 8003d6e:	e014      	b.n	8003d9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d70:	f7fd fa76 	bl	8001260 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d78:	f7fd fa72 	bl	8001260 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b64      	cmp	r3, #100	; 0x64
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e1f3      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d8a:	4b51      	ldr	r3, [pc, #324]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1f0      	bne.n	8003d78 <HAL_RCC_OscConfig+0xe8>
 8003d96:	e000      	b.n	8003d9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d063      	beq.n	8003e6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003da6:	4b4a      	ldr	r3, [pc, #296]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 030c 	and.w	r3, r3, #12
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00b      	beq.n	8003dca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003db2:	4b47      	ldr	r3, [pc, #284]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dba:	2b08      	cmp	r3, #8
 8003dbc:	d11c      	bne.n	8003df8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dbe:	4b44      	ldr	r3, [pc, #272]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d116      	bne.n	8003df8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dca:	4b41      	ldr	r3, [pc, #260]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d005      	beq.n	8003de2 <HAL_RCC_OscConfig+0x152>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d001      	beq.n	8003de2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e1c7      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de2:	4b3b      	ldr	r3, [pc, #236]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	4937      	ldr	r1, [pc, #220]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003df6:	e03a      	b.n	8003e6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d020      	beq.n	8003e42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e00:	4b34      	ldr	r3, [pc, #208]	; (8003ed4 <HAL_RCC_OscConfig+0x244>)
 8003e02:	2201      	movs	r2, #1
 8003e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e06:	f7fd fa2b 	bl	8001260 <HAL_GetTick>
 8003e0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e0c:	e008      	b.n	8003e20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e0e:	f7fd fa27 	bl	8001260 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e1a8      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e20:	4b2b      	ldr	r3, [pc, #172]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d0f0      	beq.n	8003e0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e2c:	4b28      	ldr	r3, [pc, #160]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	4925      	ldr	r1, [pc, #148]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	600b      	str	r3, [r1, #0]
 8003e40:	e015      	b.n	8003e6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e42:	4b24      	ldr	r3, [pc, #144]	; (8003ed4 <HAL_RCC_OscConfig+0x244>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e48:	f7fd fa0a 	bl	8001260 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e50:	f7fd fa06 	bl	8001260 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e187      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e62:	4b1b      	ldr	r3, [pc, #108]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1f0      	bne.n	8003e50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0308 	and.w	r3, r3, #8
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d036      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d016      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e82:	4b15      	ldr	r3, [pc, #84]	; (8003ed8 <HAL_RCC_OscConfig+0x248>)
 8003e84:	2201      	movs	r2, #1
 8003e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e88:	f7fd f9ea 	bl	8001260 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e90:	f7fd f9e6 	bl	8001260 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e167      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ea2:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0f0      	beq.n	8003e90 <HAL_RCC_OscConfig+0x200>
 8003eae:	e01b      	b.n	8003ee8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eb0:	4b09      	ldr	r3, [pc, #36]	; (8003ed8 <HAL_RCC_OscConfig+0x248>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eb6:	f7fd f9d3 	bl	8001260 <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ebc:	e00e      	b.n	8003edc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ebe:	f7fd f9cf 	bl	8001260 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d907      	bls.n	8003edc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e150      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
 8003ed0:	40023800 	.word	0x40023800
 8003ed4:	42470000 	.word	0x42470000
 8003ed8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003edc:	4b88      	ldr	r3, [pc, #544]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003ede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1ea      	bne.n	8003ebe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 8097 	beq.w	8004024 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003efa:	4b81      	ldr	r3, [pc, #516]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10f      	bne.n	8003f26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f06:	2300      	movs	r3, #0
 8003f08:	60bb      	str	r3, [r7, #8]
 8003f0a:	4b7d      	ldr	r3, [pc, #500]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	4a7c      	ldr	r2, [pc, #496]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f14:	6413      	str	r3, [r2, #64]	; 0x40
 8003f16:	4b7a      	ldr	r3, [pc, #488]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1e:	60bb      	str	r3, [r7, #8]
 8003f20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f22:	2301      	movs	r3, #1
 8003f24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f26:	4b77      	ldr	r3, [pc, #476]	; (8004104 <HAL_RCC_OscConfig+0x474>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d118      	bne.n	8003f64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f32:	4b74      	ldr	r3, [pc, #464]	; (8004104 <HAL_RCC_OscConfig+0x474>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a73      	ldr	r2, [pc, #460]	; (8004104 <HAL_RCC_OscConfig+0x474>)
 8003f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f3e:	f7fd f98f 	bl	8001260 <HAL_GetTick>
 8003f42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f44:	e008      	b.n	8003f58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f46:	f7fd f98b 	bl	8001260 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e10c      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f58:	4b6a      	ldr	r3, [pc, #424]	; (8004104 <HAL_RCC_OscConfig+0x474>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0f0      	beq.n	8003f46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d106      	bne.n	8003f7a <HAL_RCC_OscConfig+0x2ea>
 8003f6c:	4b64      	ldr	r3, [pc, #400]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f70:	4a63      	ldr	r2, [pc, #396]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003f72:	f043 0301 	orr.w	r3, r3, #1
 8003f76:	6713      	str	r3, [r2, #112]	; 0x70
 8003f78:	e01c      	b.n	8003fb4 <HAL_RCC_OscConfig+0x324>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	2b05      	cmp	r3, #5
 8003f80:	d10c      	bne.n	8003f9c <HAL_RCC_OscConfig+0x30c>
 8003f82:	4b5f      	ldr	r3, [pc, #380]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f86:	4a5e      	ldr	r2, [pc, #376]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003f88:	f043 0304 	orr.w	r3, r3, #4
 8003f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f8e:	4b5c      	ldr	r3, [pc, #368]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f92:	4a5b      	ldr	r2, [pc, #364]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003f94:	f043 0301 	orr.w	r3, r3, #1
 8003f98:	6713      	str	r3, [r2, #112]	; 0x70
 8003f9a:	e00b      	b.n	8003fb4 <HAL_RCC_OscConfig+0x324>
 8003f9c:	4b58      	ldr	r3, [pc, #352]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa0:	4a57      	ldr	r2, [pc, #348]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003fa2:	f023 0301 	bic.w	r3, r3, #1
 8003fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8003fa8:	4b55      	ldr	r3, [pc, #340]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fac:	4a54      	ldr	r2, [pc, #336]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003fae:	f023 0304 	bic.w	r3, r3, #4
 8003fb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d015      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fbc:	f7fd f950 	bl	8001260 <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc2:	e00a      	b.n	8003fda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fc4:	f7fd f94c 	bl	8001260 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e0cb      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fda:	4b49      	ldr	r3, [pc, #292]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0ee      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x334>
 8003fe6:	e014      	b.n	8004012 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fe8:	f7fd f93a 	bl	8001260 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fee:	e00a      	b.n	8004006 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ff0:	f7fd f936 	bl	8001260 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e0b5      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004006:	4b3e      	ldr	r3, [pc, #248]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8004008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1ee      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004012:	7dfb      	ldrb	r3, [r7, #23]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d105      	bne.n	8004024 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004018:	4b39      	ldr	r3, [pc, #228]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 800401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401c:	4a38      	ldr	r2, [pc, #224]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 800401e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004022:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 80a1 	beq.w	8004170 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800402e:	4b34      	ldr	r3, [pc, #208]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f003 030c 	and.w	r3, r3, #12
 8004036:	2b08      	cmp	r3, #8
 8004038:	d05c      	beq.n	80040f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	2b02      	cmp	r3, #2
 8004040:	d141      	bne.n	80040c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004042:	4b31      	ldr	r3, [pc, #196]	; (8004108 <HAL_RCC_OscConfig+0x478>)
 8004044:	2200      	movs	r2, #0
 8004046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004048:	f7fd f90a 	bl	8001260 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004050:	f7fd f906 	bl	8001260 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e087      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004062:	4b27      	ldr	r3, [pc, #156]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1f0      	bne.n	8004050 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69da      	ldr	r2, [r3, #28]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	431a      	orrs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	019b      	lsls	r3, r3, #6
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004084:	085b      	lsrs	r3, r3, #1
 8004086:	3b01      	subs	r3, #1
 8004088:	041b      	lsls	r3, r3, #16
 800408a:	431a      	orrs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004090:	061b      	lsls	r3, r3, #24
 8004092:	491b      	ldr	r1, [pc, #108]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8004094:	4313      	orrs	r3, r2
 8004096:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004098:	4b1b      	ldr	r3, [pc, #108]	; (8004108 <HAL_RCC_OscConfig+0x478>)
 800409a:	2201      	movs	r2, #1
 800409c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800409e:	f7fd f8df 	bl	8001260 <HAL_GetTick>
 80040a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040a4:	e008      	b.n	80040b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040a6:	f7fd f8db 	bl	8001260 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d901      	bls.n	80040b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e05c      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040b8:	4b11      	ldr	r3, [pc, #68]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d0f0      	beq.n	80040a6 <HAL_RCC_OscConfig+0x416>
 80040c4:	e054      	b.n	8004170 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c6:	4b10      	ldr	r3, [pc, #64]	; (8004108 <HAL_RCC_OscConfig+0x478>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040cc:	f7fd f8c8 	bl	8001260 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040d4:	f7fd f8c4 	bl	8001260 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e045      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040e6:	4b06      	ldr	r3, [pc, #24]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1f0      	bne.n	80040d4 <HAL_RCC_OscConfig+0x444>
 80040f2:	e03d      	b.n	8004170 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d107      	bne.n	800410c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e038      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
 8004100:	40023800 	.word	0x40023800
 8004104:	40007000 	.word	0x40007000
 8004108:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800410c:	4b1b      	ldr	r3, [pc, #108]	; (800417c <HAL_RCC_OscConfig+0x4ec>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d028      	beq.n	800416c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004124:	429a      	cmp	r2, r3
 8004126:	d121      	bne.n	800416c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004132:	429a      	cmp	r2, r3
 8004134:	d11a      	bne.n	800416c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800413c:	4013      	ands	r3, r2
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004142:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004144:	4293      	cmp	r3, r2
 8004146:	d111      	bne.n	800416c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004152:	085b      	lsrs	r3, r3, #1
 8004154:	3b01      	subs	r3, #1
 8004156:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004158:	429a      	cmp	r2, r3
 800415a:	d107      	bne.n	800416c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004166:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004168:	429a      	cmp	r2, r3
 800416a:	d001      	beq.n	8004170 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e000      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3718      	adds	r7, #24
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	40023800 	.word	0x40023800

08004180 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e0cc      	b.n	800432e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004194:	4b68      	ldr	r3, [pc, #416]	; (8004338 <HAL_RCC_ClockConfig+0x1b8>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0307 	and.w	r3, r3, #7
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d90c      	bls.n	80041bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041a2:	4b65      	ldr	r3, [pc, #404]	; (8004338 <HAL_RCC_ClockConfig+0x1b8>)
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041aa:	4b63      	ldr	r3, [pc, #396]	; (8004338 <HAL_RCC_ClockConfig+0x1b8>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d001      	beq.n	80041bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e0b8      	b.n	800432e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d020      	beq.n	800420a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d005      	beq.n	80041e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041d4:	4b59      	ldr	r3, [pc, #356]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	4a58      	ldr	r2, [pc, #352]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 80041da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0308 	and.w	r3, r3, #8
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d005      	beq.n	80041f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041ec:	4b53      	ldr	r3, [pc, #332]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	4a52      	ldr	r2, [pc, #328]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 80041f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041f8:	4b50      	ldr	r3, [pc, #320]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	494d      	ldr	r1, [pc, #308]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 8004206:	4313      	orrs	r3, r2
 8004208:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d044      	beq.n	80042a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d107      	bne.n	800422e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800421e:	4b47      	ldr	r3, [pc, #284]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d119      	bne.n	800425e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e07f      	b.n	800432e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2b02      	cmp	r3, #2
 8004234:	d003      	beq.n	800423e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800423a:	2b03      	cmp	r3, #3
 800423c:	d107      	bne.n	800424e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800423e:	4b3f      	ldr	r3, [pc, #252]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d109      	bne.n	800425e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e06f      	b.n	800432e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800424e:	4b3b      	ldr	r3, [pc, #236]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e067      	b.n	800432e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800425e:	4b37      	ldr	r3, [pc, #220]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f023 0203 	bic.w	r2, r3, #3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	4934      	ldr	r1, [pc, #208]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 800426c:	4313      	orrs	r3, r2
 800426e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004270:	f7fc fff6 	bl	8001260 <HAL_GetTick>
 8004274:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004276:	e00a      	b.n	800428e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004278:	f7fc fff2 	bl	8001260 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	f241 3288 	movw	r2, #5000	; 0x1388
 8004286:	4293      	cmp	r3, r2
 8004288:	d901      	bls.n	800428e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e04f      	b.n	800432e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800428e:	4b2b      	ldr	r3, [pc, #172]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 020c 	and.w	r2, r3, #12
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	429a      	cmp	r2, r3
 800429e:	d1eb      	bne.n	8004278 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042a0:	4b25      	ldr	r3, [pc, #148]	; (8004338 <HAL_RCC_ClockConfig+0x1b8>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d20c      	bcs.n	80042c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ae:	4b22      	ldr	r3, [pc, #136]	; (8004338 <HAL_RCC_ClockConfig+0x1b8>)
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	b2d2      	uxtb	r2, r2
 80042b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042b6:	4b20      	ldr	r3, [pc, #128]	; (8004338 <HAL_RCC_ClockConfig+0x1b8>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0307 	and.w	r3, r3, #7
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d001      	beq.n	80042c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e032      	b.n	800432e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d008      	beq.n	80042e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042d4:	4b19      	ldr	r3, [pc, #100]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	4916      	ldr	r1, [pc, #88]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0308 	and.w	r3, r3, #8
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d009      	beq.n	8004306 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042f2:	4b12      	ldr	r3, [pc, #72]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	490e      	ldr	r1, [pc, #56]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 8004302:	4313      	orrs	r3, r2
 8004304:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004306:	f000 f821 	bl	800434c <HAL_RCC_GetSysClockFreq>
 800430a:	4602      	mov	r2, r0
 800430c:	4b0b      	ldr	r3, [pc, #44]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	091b      	lsrs	r3, r3, #4
 8004312:	f003 030f 	and.w	r3, r3, #15
 8004316:	490a      	ldr	r1, [pc, #40]	; (8004340 <HAL_RCC_ClockConfig+0x1c0>)
 8004318:	5ccb      	ldrb	r3, [r1, r3]
 800431a:	fa22 f303 	lsr.w	r3, r2, r3
 800431e:	4a09      	ldr	r2, [pc, #36]	; (8004344 <HAL_RCC_ClockConfig+0x1c4>)
 8004320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004322:	4b09      	ldr	r3, [pc, #36]	; (8004348 <HAL_RCC_ClockConfig+0x1c8>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4618      	mov	r0, r3
 8004328:	f7fc ff56 	bl	80011d8 <HAL_InitTick>

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	40023c00 	.word	0x40023c00
 800433c:	40023800 	.word	0x40023800
 8004340:	08008de8 	.word	0x08008de8
 8004344:	20000004 	.word	0x20000004
 8004348:	20000008 	.word	0x20000008

0800434c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800434c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004350:	b094      	sub	sp, #80	; 0x50
 8004352:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004354:	2300      	movs	r3, #0
 8004356:	647b      	str	r3, [r7, #68]	; 0x44
 8004358:	2300      	movs	r3, #0
 800435a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800435c:	2300      	movs	r3, #0
 800435e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004364:	4b79      	ldr	r3, [pc, #484]	; (800454c <HAL_RCC_GetSysClockFreq+0x200>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f003 030c 	and.w	r3, r3, #12
 800436c:	2b08      	cmp	r3, #8
 800436e:	d00d      	beq.n	800438c <HAL_RCC_GetSysClockFreq+0x40>
 8004370:	2b08      	cmp	r3, #8
 8004372:	f200 80e1 	bhi.w	8004538 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004376:	2b00      	cmp	r3, #0
 8004378:	d002      	beq.n	8004380 <HAL_RCC_GetSysClockFreq+0x34>
 800437a:	2b04      	cmp	r3, #4
 800437c:	d003      	beq.n	8004386 <HAL_RCC_GetSysClockFreq+0x3a>
 800437e:	e0db      	b.n	8004538 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004380:	4b73      	ldr	r3, [pc, #460]	; (8004550 <HAL_RCC_GetSysClockFreq+0x204>)
 8004382:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004384:	e0db      	b.n	800453e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004386:	4b73      	ldr	r3, [pc, #460]	; (8004554 <HAL_RCC_GetSysClockFreq+0x208>)
 8004388:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800438a:	e0d8      	b.n	800453e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800438c:	4b6f      	ldr	r3, [pc, #444]	; (800454c <HAL_RCC_GetSysClockFreq+0x200>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004394:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004396:	4b6d      	ldr	r3, [pc, #436]	; (800454c <HAL_RCC_GetSysClockFreq+0x200>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d063      	beq.n	800446a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043a2:	4b6a      	ldr	r3, [pc, #424]	; (800454c <HAL_RCC_GetSysClockFreq+0x200>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	099b      	lsrs	r3, r3, #6
 80043a8:	2200      	movs	r2, #0
 80043aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80043ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80043ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043b4:	633b      	str	r3, [r7, #48]	; 0x30
 80043b6:	2300      	movs	r3, #0
 80043b8:	637b      	str	r3, [r7, #52]	; 0x34
 80043ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80043be:	4622      	mov	r2, r4
 80043c0:	462b      	mov	r3, r5
 80043c2:	f04f 0000 	mov.w	r0, #0
 80043c6:	f04f 0100 	mov.w	r1, #0
 80043ca:	0159      	lsls	r1, r3, #5
 80043cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043d0:	0150      	lsls	r0, r2, #5
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	4621      	mov	r1, r4
 80043d8:	1a51      	subs	r1, r2, r1
 80043da:	6139      	str	r1, [r7, #16]
 80043dc:	4629      	mov	r1, r5
 80043de:	eb63 0301 	sbc.w	r3, r3, r1
 80043e2:	617b      	str	r3, [r7, #20]
 80043e4:	f04f 0200 	mov.w	r2, #0
 80043e8:	f04f 0300 	mov.w	r3, #0
 80043ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043f0:	4659      	mov	r1, fp
 80043f2:	018b      	lsls	r3, r1, #6
 80043f4:	4651      	mov	r1, sl
 80043f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043fa:	4651      	mov	r1, sl
 80043fc:	018a      	lsls	r2, r1, #6
 80043fe:	4651      	mov	r1, sl
 8004400:	ebb2 0801 	subs.w	r8, r2, r1
 8004404:	4659      	mov	r1, fp
 8004406:	eb63 0901 	sbc.w	r9, r3, r1
 800440a:	f04f 0200 	mov.w	r2, #0
 800440e:	f04f 0300 	mov.w	r3, #0
 8004412:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004416:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800441a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800441e:	4690      	mov	r8, r2
 8004420:	4699      	mov	r9, r3
 8004422:	4623      	mov	r3, r4
 8004424:	eb18 0303 	adds.w	r3, r8, r3
 8004428:	60bb      	str	r3, [r7, #8]
 800442a:	462b      	mov	r3, r5
 800442c:	eb49 0303 	adc.w	r3, r9, r3
 8004430:	60fb      	str	r3, [r7, #12]
 8004432:	f04f 0200 	mov.w	r2, #0
 8004436:	f04f 0300 	mov.w	r3, #0
 800443a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800443e:	4629      	mov	r1, r5
 8004440:	024b      	lsls	r3, r1, #9
 8004442:	4621      	mov	r1, r4
 8004444:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004448:	4621      	mov	r1, r4
 800444a:	024a      	lsls	r2, r1, #9
 800444c:	4610      	mov	r0, r2
 800444e:	4619      	mov	r1, r3
 8004450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004452:	2200      	movs	r2, #0
 8004454:	62bb      	str	r3, [r7, #40]	; 0x28
 8004456:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004458:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800445c:	f7fb febc 	bl	80001d8 <__aeabi_uldivmod>
 8004460:	4602      	mov	r2, r0
 8004462:	460b      	mov	r3, r1
 8004464:	4613      	mov	r3, r2
 8004466:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004468:	e058      	b.n	800451c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800446a:	4b38      	ldr	r3, [pc, #224]	; (800454c <HAL_RCC_GetSysClockFreq+0x200>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	099b      	lsrs	r3, r3, #6
 8004470:	2200      	movs	r2, #0
 8004472:	4618      	mov	r0, r3
 8004474:	4611      	mov	r1, r2
 8004476:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800447a:	623b      	str	r3, [r7, #32]
 800447c:	2300      	movs	r3, #0
 800447e:	627b      	str	r3, [r7, #36]	; 0x24
 8004480:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004484:	4642      	mov	r2, r8
 8004486:	464b      	mov	r3, r9
 8004488:	f04f 0000 	mov.w	r0, #0
 800448c:	f04f 0100 	mov.w	r1, #0
 8004490:	0159      	lsls	r1, r3, #5
 8004492:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004496:	0150      	lsls	r0, r2, #5
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	4641      	mov	r1, r8
 800449e:	ebb2 0a01 	subs.w	sl, r2, r1
 80044a2:	4649      	mov	r1, r9
 80044a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80044a8:	f04f 0200 	mov.w	r2, #0
 80044ac:	f04f 0300 	mov.w	r3, #0
 80044b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044bc:	ebb2 040a 	subs.w	r4, r2, sl
 80044c0:	eb63 050b 	sbc.w	r5, r3, fp
 80044c4:	f04f 0200 	mov.w	r2, #0
 80044c8:	f04f 0300 	mov.w	r3, #0
 80044cc:	00eb      	lsls	r3, r5, #3
 80044ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044d2:	00e2      	lsls	r2, r4, #3
 80044d4:	4614      	mov	r4, r2
 80044d6:	461d      	mov	r5, r3
 80044d8:	4643      	mov	r3, r8
 80044da:	18e3      	adds	r3, r4, r3
 80044dc:	603b      	str	r3, [r7, #0]
 80044de:	464b      	mov	r3, r9
 80044e0:	eb45 0303 	adc.w	r3, r5, r3
 80044e4:	607b      	str	r3, [r7, #4]
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	f04f 0300 	mov.w	r3, #0
 80044ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044f2:	4629      	mov	r1, r5
 80044f4:	028b      	lsls	r3, r1, #10
 80044f6:	4621      	mov	r1, r4
 80044f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044fc:	4621      	mov	r1, r4
 80044fe:	028a      	lsls	r2, r1, #10
 8004500:	4610      	mov	r0, r2
 8004502:	4619      	mov	r1, r3
 8004504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004506:	2200      	movs	r2, #0
 8004508:	61bb      	str	r3, [r7, #24]
 800450a:	61fa      	str	r2, [r7, #28]
 800450c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004510:	f7fb fe62 	bl	80001d8 <__aeabi_uldivmod>
 8004514:	4602      	mov	r2, r0
 8004516:	460b      	mov	r3, r1
 8004518:	4613      	mov	r3, r2
 800451a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800451c:	4b0b      	ldr	r3, [pc, #44]	; (800454c <HAL_RCC_GetSysClockFreq+0x200>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	0c1b      	lsrs	r3, r3, #16
 8004522:	f003 0303 	and.w	r3, r3, #3
 8004526:	3301      	adds	r3, #1
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800452c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800452e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004530:	fbb2 f3f3 	udiv	r3, r2, r3
 8004534:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004536:	e002      	b.n	800453e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004538:	4b05      	ldr	r3, [pc, #20]	; (8004550 <HAL_RCC_GetSysClockFreq+0x204>)
 800453a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800453c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800453e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004540:	4618      	mov	r0, r3
 8004542:	3750      	adds	r7, #80	; 0x50
 8004544:	46bd      	mov	sp, r7
 8004546:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800454a:	bf00      	nop
 800454c:	40023800 	.word	0x40023800
 8004550:	00f42400 	.word	0x00f42400
 8004554:	007a1200 	.word	0x007a1200

08004558 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800455c:	4b03      	ldr	r3, [pc, #12]	; (800456c <HAL_RCC_GetHCLKFreq+0x14>)
 800455e:	681b      	ldr	r3, [r3, #0]
}
 8004560:	4618      	mov	r0, r3
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	20000004 	.word	0x20000004

08004570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004574:	f7ff fff0 	bl	8004558 <HAL_RCC_GetHCLKFreq>
 8004578:	4602      	mov	r2, r0
 800457a:	4b05      	ldr	r3, [pc, #20]	; (8004590 <HAL_RCC_GetPCLK1Freq+0x20>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	0a9b      	lsrs	r3, r3, #10
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	4903      	ldr	r1, [pc, #12]	; (8004594 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004586:	5ccb      	ldrb	r3, [r1, r3]
 8004588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800458c:	4618      	mov	r0, r3
 800458e:	bd80      	pop	{r7, pc}
 8004590:	40023800 	.word	0x40023800
 8004594:	08008df8 	.word	0x08008df8

08004598 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045a0:	2300      	movs	r3, #0
 80045a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d105      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d038      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80045c0:	4b68      	ldr	r3, [pc, #416]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045c6:	f7fc fe4b 	bl	8001260 <HAL_GetTick>
 80045ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045cc:	e008      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045ce:	f7fc fe47 	bl	8001260 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d901      	bls.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e0bd      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045e0:	4b61      	ldr	r3, [pc, #388]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1f0      	bne.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	019b      	lsls	r3, r3, #6
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	071b      	lsls	r3, r3, #28
 80045fe:	495a      	ldr	r1, [pc, #360]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004600:	4313      	orrs	r3, r2
 8004602:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004606:	4b57      	ldr	r3, [pc, #348]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004608:	2201      	movs	r2, #1
 800460a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800460c:	f7fc fe28 	bl	8001260 <HAL_GetTick>
 8004610:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004612:	e008      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004614:	f7fc fe24 	bl	8001260 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d901      	bls.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e09a      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004626:	4b50      	ldr	r3, [pc, #320]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0f0      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	f000 8083 	beq.w	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004640:	2300      	movs	r3, #0
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	4b48      	ldr	r3, [pc, #288]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	4a47      	ldr	r2, [pc, #284]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800464a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800464e:	6413      	str	r3, [r2, #64]	; 0x40
 8004650:	4b45      	ldr	r3, [pc, #276]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800465c:	4b43      	ldr	r3, [pc, #268]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a42      	ldr	r2, [pc, #264]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004666:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004668:	f7fc fdfa 	bl	8001260 <HAL_GetTick>
 800466c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800466e:	e008      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004670:	f7fc fdf6 	bl	8001260 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d901      	bls.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e06c      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004682:	4b3a      	ldr	r3, [pc, #232]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468a:	2b00      	cmp	r3, #0
 800468c:	d0f0      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800468e:	4b36      	ldr	r3, [pc, #216]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004696:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d02f      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x166>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d028      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046ac:	4b2e      	ldr	r3, [pc, #184]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046b6:	4b2e      	ldr	r3, [pc, #184]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80046b8:	2201      	movs	r2, #1
 80046ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046bc:	4b2c      	ldr	r3, [pc, #176]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80046be:	2200      	movs	r2, #0
 80046c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80046c2:	4a29      	ldr	r2, [pc, #164]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046c8:	4b27      	ldr	r3, [pc, #156]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d114      	bne.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80046d4:	f7fc fdc4 	bl	8001260 <HAL_GetTick>
 80046d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046da:	e00a      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046dc:	f7fc fdc0 	bl	8001260 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e034      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f2:	4b1d      	ldr	r3, [pc, #116]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0ee      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004706:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800470a:	d10d      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800470c:	4b16      	ldr	r3, [pc, #88]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800471c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004720:	4911      	ldr	r1, [pc, #68]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004722:	4313      	orrs	r3, r2
 8004724:	608b      	str	r3, [r1, #8]
 8004726:	e005      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004728:	4b0f      	ldr	r3, [pc, #60]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	4a0e      	ldr	r2, [pc, #56]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800472e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004732:	6093      	str	r3, [r2, #8]
 8004734:	4b0c      	ldr	r3, [pc, #48]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004736:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004740:	4909      	ldr	r1, [pc, #36]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004742:	4313      	orrs	r3, r2
 8004744:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0308 	and.w	r3, r3, #8
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	7d1a      	ldrb	r2, [r3, #20]
 8004756:	4b07      	ldr	r3, [pc, #28]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004758:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	42470068 	.word	0x42470068
 8004768:	40023800 	.word	0x40023800
 800476c:	40007000 	.word	0x40007000
 8004770:	42470e40 	.word	0x42470e40
 8004774:	424711e0 	.word	0x424711e0

08004778 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004778:	b480      	push	{r7}
 800477a:	b087      	sub	sp, #28
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004784:	2300      	movs	r3, #0
 8004786:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004788:	2300      	movs	r3, #0
 800478a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800478c:	2300      	movs	r3, #0
 800478e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d140      	bne.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004796:	4b24      	ldr	r3, [pc, #144]	; (8004828 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800479e:	60fb      	str	r3, [r7, #12]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d005      	beq.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d131      	bne.n	8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80047ac:	4b1f      	ldr	r3, [pc, #124]	; (800482c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80047ae:	617b      	str	r3, [r7, #20]
          break;
 80047b0:	e031      	b.n	8004816 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80047b2:	4b1d      	ldr	r3, [pc, #116]	; (8004828 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047be:	d109      	bne.n	80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80047c0:	4b19      	ldr	r3, [pc, #100]	; (8004828 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047ca:	4a19      	ldr	r2, [pc, #100]	; (8004830 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80047cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d0:	613b      	str	r3, [r7, #16]
 80047d2:	e008      	b.n	80047e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80047d4:	4b14      	ldr	r3, [pc, #80]	; (8004828 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047de:	4a15      	ldr	r2, [pc, #84]	; (8004834 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80047e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e4:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80047e6:	4b10      	ldr	r3, [pc, #64]	; (8004828 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ec:	099b      	lsrs	r3, r3, #6
 80047ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	fb02 f303 	mul.w	r3, r2, r3
 80047f8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80047fa:	4b0b      	ldr	r3, [pc, #44]	; (8004828 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004800:	0f1b      	lsrs	r3, r3, #28
 8004802:	f003 0307 	and.w	r3, r3, #7
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	fbb2 f3f3 	udiv	r3, r2, r3
 800480c:	617b      	str	r3, [r7, #20]
          break;
 800480e:	e002      	b.n	8004816 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004810:	2300      	movs	r3, #0
 8004812:	617b      	str	r3, [r7, #20]
          break;
 8004814:	bf00      	nop
        }
      }
      break;
 8004816:	bf00      	nop
    }
  }
  return frequency;
 8004818:	697b      	ldr	r3, [r7, #20]
}
 800481a:	4618      	mov	r0, r3
 800481c:	371c      	adds	r7, #28
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	40023800 	.word	0x40023800
 800482c:	00bb8000 	.word	0x00bb8000
 8004830:	007a1200 	.word	0x007a1200
 8004834:	00f42400 	.word	0x00f42400

08004838 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e07b      	b.n	8004942 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	2b00      	cmp	r3, #0
 8004850:	d108      	bne.n	8004864 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800485a:	d009      	beq.n	8004870 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	61da      	str	r2, [r3, #28]
 8004862:	e005      	b.n	8004870 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d106      	bne.n	8004890 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7fc fb30 	bl	8000ef0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2202      	movs	r2, #2
 8004894:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048b8:	431a      	orrs	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	431a      	orrs	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	431a      	orrs	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048e0:	431a      	orrs	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048ea:	431a      	orrs	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f4:	ea42 0103 	orr.w	r1, r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	0c1b      	lsrs	r3, r3, #16
 800490e:	f003 0104 	and.w	r1, r3, #4
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	f003 0210 	and.w	r2, r3, #16
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	69da      	ldr	r2, [r3, #28]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004930:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b082      	sub	sp, #8
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e041      	b.n	80049e0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	d106      	bne.n	8004976 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f7fc fb05 	bl	8000f80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2202      	movs	r2, #2
 800497a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	3304      	adds	r3, #4
 8004986:	4619      	mov	r1, r3
 8004988:	4610      	mov	r0, r2
 800498a:	f000 fac1 	bl	8004f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3708      	adds	r7, #8
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e041      	b.n	8004a7e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d106      	bne.n	8004a14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f839 	bl	8004a86 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2202      	movs	r2, #2
 8004a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	3304      	adds	r3, #4
 8004a24:	4619      	mov	r1, r3
 8004a26:	4610      	mov	r0, r2
 8004a28:	f000 fa72 	bl	8004f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a8e:	bf00      	nop
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
	...

08004a9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d109      	bne.n	8004ac0 <HAL_TIM_PWM_Start+0x24>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	bf14      	ite	ne
 8004ab8:	2301      	movne	r3, #1
 8004aba:	2300      	moveq	r3, #0
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	e022      	b.n	8004b06 <HAL_TIM_PWM_Start+0x6a>
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	2b04      	cmp	r3, #4
 8004ac4:	d109      	bne.n	8004ada <HAL_TIM_PWM_Start+0x3e>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	bf14      	ite	ne
 8004ad2:	2301      	movne	r3, #1
 8004ad4:	2300      	moveq	r3, #0
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	e015      	b.n	8004b06 <HAL_TIM_PWM_Start+0x6a>
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b08      	cmp	r3, #8
 8004ade:	d109      	bne.n	8004af4 <HAL_TIM_PWM_Start+0x58>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	bf14      	ite	ne
 8004aec:	2301      	movne	r3, #1
 8004aee:	2300      	moveq	r3, #0
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	e008      	b.n	8004b06 <HAL_TIM_PWM_Start+0x6a>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	bf14      	ite	ne
 8004b00:	2301      	movne	r3, #1
 8004b02:	2300      	moveq	r3, #0
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e068      	b.n	8004be0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d104      	bne.n	8004b1e <HAL_TIM_PWM_Start+0x82>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2202      	movs	r2, #2
 8004b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b1c:	e013      	b.n	8004b46 <HAL_TIM_PWM_Start+0xaa>
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	2b04      	cmp	r3, #4
 8004b22:	d104      	bne.n	8004b2e <HAL_TIM_PWM_Start+0x92>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2202      	movs	r2, #2
 8004b28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b2c:	e00b      	b.n	8004b46 <HAL_TIM_PWM_Start+0xaa>
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2b08      	cmp	r3, #8
 8004b32:	d104      	bne.n	8004b3e <HAL_TIM_PWM_Start+0xa2>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b3c:	e003      	b.n	8004b46 <HAL_TIM_PWM_Start+0xaa>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2202      	movs	r2, #2
 8004b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	6839      	ldr	r1, [r7, #0]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 fc84 	bl	800545c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a23      	ldr	r2, [pc, #140]	; (8004be8 <HAL_TIM_PWM_Start+0x14c>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d107      	bne.n	8004b6e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a1d      	ldr	r2, [pc, #116]	; (8004be8 <HAL_TIM_PWM_Start+0x14c>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d018      	beq.n	8004baa <HAL_TIM_PWM_Start+0x10e>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b80:	d013      	beq.n	8004baa <HAL_TIM_PWM_Start+0x10e>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a19      	ldr	r2, [pc, #100]	; (8004bec <HAL_TIM_PWM_Start+0x150>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d00e      	beq.n	8004baa <HAL_TIM_PWM_Start+0x10e>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a17      	ldr	r2, [pc, #92]	; (8004bf0 <HAL_TIM_PWM_Start+0x154>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d009      	beq.n	8004baa <HAL_TIM_PWM_Start+0x10e>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a16      	ldr	r2, [pc, #88]	; (8004bf4 <HAL_TIM_PWM_Start+0x158>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d004      	beq.n	8004baa <HAL_TIM_PWM_Start+0x10e>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a14      	ldr	r2, [pc, #80]	; (8004bf8 <HAL_TIM_PWM_Start+0x15c>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d111      	bne.n	8004bce <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f003 0307 	and.w	r3, r3, #7
 8004bb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2b06      	cmp	r3, #6
 8004bba:	d010      	beq.n	8004bde <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0201 	orr.w	r2, r2, #1
 8004bca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bcc:	e007      	b.n	8004bde <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f042 0201 	orr.w	r2, r2, #1
 8004bdc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	40010000 	.word	0x40010000
 8004bec:	40000400 	.word	0x40000400
 8004bf0:	40000800 	.word	0x40000800
 8004bf4:	40000c00 	.word	0x40000c00
 8004bf8:	40014000 	.word	0x40014000

08004bfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d101      	bne.n	8004c1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c16:	2302      	movs	r3, #2
 8004c18:	e0ae      	b.n	8004d78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b0c      	cmp	r3, #12
 8004c26:	f200 809f 	bhi.w	8004d68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c2a:	a201      	add	r2, pc, #4	; (adr r2, 8004c30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c30:	08004c65 	.word	0x08004c65
 8004c34:	08004d69 	.word	0x08004d69
 8004c38:	08004d69 	.word	0x08004d69
 8004c3c:	08004d69 	.word	0x08004d69
 8004c40:	08004ca5 	.word	0x08004ca5
 8004c44:	08004d69 	.word	0x08004d69
 8004c48:	08004d69 	.word	0x08004d69
 8004c4c:	08004d69 	.word	0x08004d69
 8004c50:	08004ce7 	.word	0x08004ce7
 8004c54:	08004d69 	.word	0x08004d69
 8004c58:	08004d69 	.word	0x08004d69
 8004c5c:	08004d69 	.word	0x08004d69
 8004c60:	08004d27 	.word	0x08004d27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68b9      	ldr	r1, [r7, #8]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 f9d0 	bl	8005010 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	699a      	ldr	r2, [r3, #24]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f042 0208 	orr.w	r2, r2, #8
 8004c7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	699a      	ldr	r2, [r3, #24]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 0204 	bic.w	r2, r2, #4
 8004c8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6999      	ldr	r1, [r3, #24]
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	691a      	ldr	r2, [r3, #16]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	619a      	str	r2, [r3, #24]
      break;
 8004ca2:	e064      	b.n	8004d6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68b9      	ldr	r1, [r7, #8]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fa16 	bl	80050dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	699a      	ldr	r2, [r3, #24]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	699a      	ldr	r2, [r3, #24]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6999      	ldr	r1, [r3, #24]
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	021a      	lsls	r2, r3, #8
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	619a      	str	r2, [r3, #24]
      break;
 8004ce4:	e043      	b.n	8004d6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68b9      	ldr	r1, [r7, #8]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 fa61 	bl	80051b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69da      	ldr	r2, [r3, #28]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f042 0208 	orr.w	r2, r2, #8
 8004d00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	69da      	ldr	r2, [r3, #28]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 0204 	bic.w	r2, r2, #4
 8004d10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	69d9      	ldr	r1, [r3, #28]
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	691a      	ldr	r2, [r3, #16]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	61da      	str	r2, [r3, #28]
      break;
 8004d24:	e023      	b.n	8004d6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68b9      	ldr	r1, [r7, #8]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 faab 	bl	8005288 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69da      	ldr	r2, [r3, #28]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	69da      	ldr	r2, [r3, #28]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	69d9      	ldr	r1, [r3, #28]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	021a      	lsls	r2, r3, #8
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	61da      	str	r2, [r3, #28]
      break;
 8004d66:	e002      	b.n	8004d6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	75fb      	strb	r3, [r7, #23]
      break;
 8004d6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d76:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3718      	adds	r7, #24
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d101      	bne.n	8004d9c <HAL_TIM_ConfigClockSource+0x1c>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e0b4      	b.n	8004f06 <HAL_TIM_ConfigClockSource+0x186>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dd4:	d03e      	beq.n	8004e54 <HAL_TIM_ConfigClockSource+0xd4>
 8004dd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dda:	f200 8087 	bhi.w	8004eec <HAL_TIM_ConfigClockSource+0x16c>
 8004dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de2:	f000 8086 	beq.w	8004ef2 <HAL_TIM_ConfigClockSource+0x172>
 8004de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dea:	d87f      	bhi.n	8004eec <HAL_TIM_ConfigClockSource+0x16c>
 8004dec:	2b70      	cmp	r3, #112	; 0x70
 8004dee:	d01a      	beq.n	8004e26 <HAL_TIM_ConfigClockSource+0xa6>
 8004df0:	2b70      	cmp	r3, #112	; 0x70
 8004df2:	d87b      	bhi.n	8004eec <HAL_TIM_ConfigClockSource+0x16c>
 8004df4:	2b60      	cmp	r3, #96	; 0x60
 8004df6:	d050      	beq.n	8004e9a <HAL_TIM_ConfigClockSource+0x11a>
 8004df8:	2b60      	cmp	r3, #96	; 0x60
 8004dfa:	d877      	bhi.n	8004eec <HAL_TIM_ConfigClockSource+0x16c>
 8004dfc:	2b50      	cmp	r3, #80	; 0x50
 8004dfe:	d03c      	beq.n	8004e7a <HAL_TIM_ConfigClockSource+0xfa>
 8004e00:	2b50      	cmp	r3, #80	; 0x50
 8004e02:	d873      	bhi.n	8004eec <HAL_TIM_ConfigClockSource+0x16c>
 8004e04:	2b40      	cmp	r3, #64	; 0x40
 8004e06:	d058      	beq.n	8004eba <HAL_TIM_ConfigClockSource+0x13a>
 8004e08:	2b40      	cmp	r3, #64	; 0x40
 8004e0a:	d86f      	bhi.n	8004eec <HAL_TIM_ConfigClockSource+0x16c>
 8004e0c:	2b30      	cmp	r3, #48	; 0x30
 8004e0e:	d064      	beq.n	8004eda <HAL_TIM_ConfigClockSource+0x15a>
 8004e10:	2b30      	cmp	r3, #48	; 0x30
 8004e12:	d86b      	bhi.n	8004eec <HAL_TIM_ConfigClockSource+0x16c>
 8004e14:	2b20      	cmp	r3, #32
 8004e16:	d060      	beq.n	8004eda <HAL_TIM_ConfigClockSource+0x15a>
 8004e18:	2b20      	cmp	r3, #32
 8004e1a:	d867      	bhi.n	8004eec <HAL_TIM_ConfigClockSource+0x16c>
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d05c      	beq.n	8004eda <HAL_TIM_ConfigClockSource+0x15a>
 8004e20:	2b10      	cmp	r3, #16
 8004e22:	d05a      	beq.n	8004eda <HAL_TIM_ConfigClockSource+0x15a>
 8004e24:	e062      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6818      	ldr	r0, [r3, #0]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	6899      	ldr	r1, [r3, #8]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	f000 faf1 	bl	800541c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	609a      	str	r2, [r3, #8]
      break;
 8004e52:	e04f      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6818      	ldr	r0, [r3, #0]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	6899      	ldr	r1, [r3, #8]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f000 fada 	bl	800541c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e76:	609a      	str	r2, [r3, #8]
      break;
 8004e78:	e03c      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6818      	ldr	r0, [r3, #0]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	6859      	ldr	r1, [r3, #4]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	461a      	mov	r2, r3
 8004e88:	f000 fa4e 	bl	8005328 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2150      	movs	r1, #80	; 0x50
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 faa7 	bl	80053e6 <TIM_ITRx_SetConfig>
      break;
 8004e98:	e02c      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6818      	ldr	r0, [r3, #0]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	6859      	ldr	r1, [r3, #4]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	f000 fa6d 	bl	8005386 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2160      	movs	r1, #96	; 0x60
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 fa97 	bl	80053e6 <TIM_ITRx_SetConfig>
      break;
 8004eb8:	e01c      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6818      	ldr	r0, [r3, #0]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	6859      	ldr	r1, [r3, #4]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	f000 fa2e 	bl	8005328 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2140      	movs	r1, #64	; 0x40
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 fa87 	bl	80053e6 <TIM_ITRx_SetConfig>
      break;
 8004ed8:	e00c      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	4610      	mov	r0, r2
 8004ee6:	f000 fa7e 	bl	80053e6 <TIM_ITRx_SetConfig>
      break;
 8004eea:	e003      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	73fb      	strb	r3, [r7, #15]
      break;
 8004ef0:	e000      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ef2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
	...

08004f10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a34      	ldr	r2, [pc, #208]	; (8004ff4 <TIM_Base_SetConfig+0xe4>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d00f      	beq.n	8004f48 <TIM_Base_SetConfig+0x38>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f2e:	d00b      	beq.n	8004f48 <TIM_Base_SetConfig+0x38>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a31      	ldr	r2, [pc, #196]	; (8004ff8 <TIM_Base_SetConfig+0xe8>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d007      	beq.n	8004f48 <TIM_Base_SetConfig+0x38>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a30      	ldr	r2, [pc, #192]	; (8004ffc <TIM_Base_SetConfig+0xec>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d003      	beq.n	8004f48 <TIM_Base_SetConfig+0x38>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a2f      	ldr	r2, [pc, #188]	; (8005000 <TIM_Base_SetConfig+0xf0>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d108      	bne.n	8004f5a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a25      	ldr	r2, [pc, #148]	; (8004ff4 <TIM_Base_SetConfig+0xe4>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d01b      	beq.n	8004f9a <TIM_Base_SetConfig+0x8a>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f68:	d017      	beq.n	8004f9a <TIM_Base_SetConfig+0x8a>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a22      	ldr	r2, [pc, #136]	; (8004ff8 <TIM_Base_SetConfig+0xe8>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d013      	beq.n	8004f9a <TIM_Base_SetConfig+0x8a>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a21      	ldr	r2, [pc, #132]	; (8004ffc <TIM_Base_SetConfig+0xec>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d00f      	beq.n	8004f9a <TIM_Base_SetConfig+0x8a>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a20      	ldr	r2, [pc, #128]	; (8005000 <TIM_Base_SetConfig+0xf0>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d00b      	beq.n	8004f9a <TIM_Base_SetConfig+0x8a>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a1f      	ldr	r2, [pc, #124]	; (8005004 <TIM_Base_SetConfig+0xf4>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d007      	beq.n	8004f9a <TIM_Base_SetConfig+0x8a>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a1e      	ldr	r2, [pc, #120]	; (8005008 <TIM_Base_SetConfig+0xf8>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d003      	beq.n	8004f9a <TIM_Base_SetConfig+0x8a>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a1d      	ldr	r2, [pc, #116]	; (800500c <TIM_Base_SetConfig+0xfc>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d108      	bne.n	8004fac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	689a      	ldr	r2, [r3, #8]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a08      	ldr	r2, [pc, #32]	; (8004ff4 <TIM_Base_SetConfig+0xe4>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d103      	bne.n	8004fe0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	691a      	ldr	r2, [r3, #16]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	615a      	str	r2, [r3, #20]
}
 8004fe6:	bf00      	nop
 8004fe8:	3714      	adds	r7, #20
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	40010000 	.word	0x40010000
 8004ff8:	40000400 	.word	0x40000400
 8004ffc:	40000800 	.word	0x40000800
 8005000:	40000c00 	.word	0x40000c00
 8005004:	40014000 	.word	0x40014000
 8005008:	40014400 	.word	0x40014400
 800500c:	40014800 	.word	0x40014800

08005010 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005010:	b480      	push	{r7}
 8005012:	b087      	sub	sp, #28
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	f023 0201 	bic.w	r2, r3, #1
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800503e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f023 0303 	bic.w	r3, r3, #3
 8005046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	4313      	orrs	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f023 0302 	bic.w	r3, r3, #2
 8005058:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	4313      	orrs	r3, r2
 8005062:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a1c      	ldr	r2, [pc, #112]	; (80050d8 <TIM_OC1_SetConfig+0xc8>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d10c      	bne.n	8005086 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	f023 0308 	bic.w	r3, r3, #8
 8005072:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	4313      	orrs	r3, r2
 800507c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f023 0304 	bic.w	r3, r3, #4
 8005084:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a13      	ldr	r2, [pc, #76]	; (80050d8 <TIM_OC1_SetConfig+0xc8>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d111      	bne.n	80050b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005094:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800509c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	685a      	ldr	r2, [r3, #4]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	621a      	str	r2, [r3, #32]
}
 80050cc:	bf00      	nop
 80050ce:	371c      	adds	r7, #28
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	40010000 	.word	0x40010000

080050dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050dc:	b480      	push	{r7}
 80050de:	b087      	sub	sp, #28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	f023 0210 	bic.w	r2, r3, #16
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800510a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005112:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	021b      	lsls	r3, r3, #8
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	4313      	orrs	r3, r2
 800511e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f023 0320 	bic.w	r3, r3, #32
 8005126:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	011b      	lsls	r3, r3, #4
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	4313      	orrs	r3, r2
 8005132:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a1e      	ldr	r2, [pc, #120]	; (80051b0 <TIM_OC2_SetConfig+0xd4>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d10d      	bne.n	8005158 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005142:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	011b      	lsls	r3, r3, #4
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	4313      	orrs	r3, r2
 800514e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005156:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a15      	ldr	r2, [pc, #84]	; (80051b0 <TIM_OC2_SetConfig+0xd4>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d113      	bne.n	8005188 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005166:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800516e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	4313      	orrs	r3, r2
 800517a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	4313      	orrs	r3, r2
 8005186:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	621a      	str	r2, [r3, #32]
}
 80051a2:	bf00      	nop
 80051a4:	371c      	adds	r7, #28
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	40010000 	.word	0x40010000

080051b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f023 0303 	bic.w	r3, r3, #3
 80051ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	021b      	lsls	r3, r3, #8
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	4313      	orrs	r3, r2
 8005208:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a1d      	ldr	r2, [pc, #116]	; (8005284 <TIM_OC3_SetConfig+0xd0>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d10d      	bne.n	800522e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005218:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	021b      	lsls	r3, r3, #8
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	4313      	orrs	r3, r2
 8005224:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800522c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a14      	ldr	r2, [pc, #80]	; (8005284 <TIM_OC3_SetConfig+0xd0>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d113      	bne.n	800525e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800523c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	011b      	lsls	r3, r3, #4
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	4313      	orrs	r3, r2
 8005250:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	011b      	lsls	r3, r3, #4
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	4313      	orrs	r3, r2
 800525c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	685a      	ldr	r2, [r3, #4]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	621a      	str	r2, [r3, #32]
}
 8005278:	bf00      	nop
 800527a:	371c      	adds	r7, #28
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr
 8005284:	40010000 	.word	0x40010000

08005288 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	021b      	lsls	r3, r3, #8
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	031b      	lsls	r3, r3, #12
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	4313      	orrs	r3, r2
 80052de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a10      	ldr	r2, [pc, #64]	; (8005324 <TIM_OC4_SetConfig+0x9c>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d109      	bne.n	80052fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	695b      	ldr	r3, [r3, #20]
 80052f4:	019b      	lsls	r3, r3, #6
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	621a      	str	r2, [r3, #32]
}
 8005316:	bf00      	nop
 8005318:	371c      	adds	r7, #28
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	40010000 	.word	0x40010000

08005328 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005328:	b480      	push	{r7}
 800532a:	b087      	sub	sp, #28
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	f023 0201 	bic.w	r2, r3, #1
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005352:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	4313      	orrs	r3, r2
 800535c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	f023 030a 	bic.w	r3, r3, #10
 8005364:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	4313      	orrs	r3, r2
 800536c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	621a      	str	r2, [r3, #32]
}
 800537a:	bf00      	nop
 800537c:	371c      	adds	r7, #28
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005386:	b480      	push	{r7}
 8005388:	b087      	sub	sp, #28
 800538a:	af00      	add	r7, sp, #0
 800538c:	60f8      	str	r0, [r7, #12]
 800538e:	60b9      	str	r1, [r7, #8]
 8005390:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	f023 0210 	bic.w	r2, r3, #16
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6a1b      	ldr	r3, [r3, #32]
 80053a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	031b      	lsls	r3, r3, #12
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	011b      	lsls	r3, r3, #4
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	621a      	str	r2, [r3, #32]
}
 80053da:	bf00      	nop
 80053dc:	371c      	adds	r7, #28
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b085      	sub	sp, #20
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
 80053ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	4313      	orrs	r3, r2
 8005404:	f043 0307 	orr.w	r3, r3, #7
 8005408:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	609a      	str	r2, [r3, #8]
}
 8005410:	bf00      	nop
 8005412:	3714      	adds	r7, #20
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800541c:	b480      	push	{r7}
 800541e:	b087      	sub	sp, #28
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
 8005428:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005436:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	021a      	lsls	r2, r3, #8
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	431a      	orrs	r2, r3
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	4313      	orrs	r3, r2
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	4313      	orrs	r3, r2
 8005448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	609a      	str	r2, [r3, #8]
}
 8005450:	bf00      	nop
 8005452:	371c      	adds	r7, #28
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	f003 031f 	and.w	r3, r3, #31
 800546e:	2201      	movs	r2, #1
 8005470:	fa02 f303 	lsl.w	r3, r2, r3
 8005474:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6a1a      	ldr	r2, [r3, #32]
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	43db      	mvns	r3, r3
 800547e:	401a      	ands	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6a1a      	ldr	r2, [r3, #32]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f003 031f 	and.w	r3, r3, #31
 800548e:	6879      	ldr	r1, [r7, #4]
 8005490:	fa01 f303 	lsl.w	r3, r1, r3
 8005494:	431a      	orrs	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	621a      	str	r2, [r3, #32]
}
 800549a:	bf00      	nop
 800549c:	371c      	adds	r7, #28
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
	...

080054a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d101      	bne.n	80054c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054bc:	2302      	movs	r3, #2
 80054be:	e050      	b.n	8005562 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2202      	movs	r2, #2
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a1c      	ldr	r2, [pc, #112]	; (8005570 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d018      	beq.n	8005536 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800550c:	d013      	beq.n	8005536 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a18      	ldr	r2, [pc, #96]	; (8005574 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d00e      	beq.n	8005536 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a16      	ldr	r2, [pc, #88]	; (8005578 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d009      	beq.n	8005536 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a15      	ldr	r2, [pc, #84]	; (800557c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d004      	beq.n	8005536 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a13      	ldr	r2, [pc, #76]	; (8005580 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d10c      	bne.n	8005550 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800553c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	4313      	orrs	r3, r2
 8005546:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	40010000 	.word	0x40010000
 8005574:	40000400 	.word	0x40000400
 8005578:	40000800 	.word	0x40000800
 800557c:	40000c00 	.word	0x40000c00
 8005580:	40014000 	.word	0x40014000

08005584 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005584:	b084      	sub	sp, #16
 8005586:	b580      	push	{r7, lr}
 8005588:	b084      	sub	sp, #16
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	f107 001c 	add.w	r0, r7, #28
 8005592:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005598:	2b01      	cmp	r3, #1
 800559a:	d122      	bne.n	80055e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80055b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80055c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d105      	bne.n	80055d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f9c0 	bl	800595c <USB_CoreReset>
 80055dc:	4603      	mov	r3, r0
 80055de:	73fb      	strb	r3, [r7, #15]
 80055e0:	e01a      	b.n	8005618 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f9b4 	bl	800595c <USB_CoreReset>
 80055f4:	4603      	mov	r3, r0
 80055f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80055f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d106      	bne.n	800560c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005602:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	639a      	str	r2, [r3, #56]	; 0x38
 800560a:	e005      	b.n	8005618 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005610:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561a:	2b01      	cmp	r3, #1
 800561c:	d10b      	bne.n	8005636 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f043 0206 	orr.w	r2, r3, #6
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f043 0220 	orr.w	r2, r3, #32
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005636:	7bfb      	ldrb	r3, [r7, #15]
}
 8005638:	4618      	mov	r0, r3
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005642:	b004      	add	sp, #16
 8005644:	4770      	bx	lr

08005646 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005646:	b480      	push	{r7}
 8005648:	b083      	sub	sp, #12
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f043 0201 	orr.w	r2, r3, #1
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f023 0201 	bic.w	r2, r3, #1
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	370c      	adds	r7, #12
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr

0800568a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b084      	sub	sp, #16
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
 8005692:	460b      	mov	r3, r1
 8005694:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005696:	2300      	movs	r3, #0
 8005698:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80056a6:	78fb      	ldrb	r3, [r7, #3]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d115      	bne.n	80056d8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80056b8:	2001      	movs	r0, #1
 80056ba:	f7fb fddd 	bl	8001278 <HAL_Delay>
      ms++;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	3301      	adds	r3, #1
 80056c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 f93a 	bl	800593e <USB_GetMode>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d01e      	beq.n	800570e <USB_SetCurrentMode+0x84>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2b31      	cmp	r3, #49	; 0x31
 80056d4:	d9f0      	bls.n	80056b8 <USB_SetCurrentMode+0x2e>
 80056d6:	e01a      	b.n	800570e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80056d8:	78fb      	ldrb	r3, [r7, #3]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d115      	bne.n	800570a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80056ea:	2001      	movs	r0, #1
 80056ec:	f7fb fdc4 	bl	8001278 <HAL_Delay>
      ms++;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	3301      	adds	r3, #1
 80056f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f921 	bl	800593e <USB_GetMode>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d005      	beq.n	800570e <USB_SetCurrentMode+0x84>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2b31      	cmp	r3, #49	; 0x31
 8005706:	d9f0      	bls.n	80056ea <USB_SetCurrentMode+0x60>
 8005708:	e001      	b.n	800570e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e005      	b.n	800571a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2b32      	cmp	r3, #50	; 0x32
 8005712:	d101      	bne.n	8005718 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e000      	b.n	800571a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
	...

08005724 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800572e:	2300      	movs	r3, #0
 8005730:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	3301      	adds	r3, #1
 8005736:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	4a13      	ldr	r2, [pc, #76]	; (8005788 <USB_FlushTxFifo+0x64>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d901      	bls.n	8005744 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e01b      	b.n	800577c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	2b00      	cmp	r3, #0
 800574a:	daf2      	bge.n	8005732 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800574c:	2300      	movs	r3, #0
 800574e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	019b      	lsls	r3, r3, #6
 8005754:	f043 0220 	orr.w	r2, r3, #32
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	3301      	adds	r3, #1
 8005760:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	4a08      	ldr	r2, [pc, #32]	; (8005788 <USB_FlushTxFifo+0x64>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d901      	bls.n	800576e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e006      	b.n	800577c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	f003 0320 	and.w	r3, r3, #32
 8005776:	2b20      	cmp	r3, #32
 8005778:	d0f0      	beq.n	800575c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3714      	adds	r7, #20
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr
 8005788:	00030d40 	.word	0x00030d40

0800578c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005794:	2300      	movs	r3, #0
 8005796:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	3301      	adds	r3, #1
 800579c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	4a11      	ldr	r2, [pc, #68]	; (80057e8 <USB_FlushRxFifo+0x5c>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d901      	bls.n	80057aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e018      	b.n	80057dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	daf2      	bge.n	8005798 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80057b2:	2300      	movs	r3, #0
 80057b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2210      	movs	r2, #16
 80057ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	3301      	adds	r3, #1
 80057c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	4a08      	ldr	r2, [pc, #32]	; (80057e8 <USB_FlushRxFifo+0x5c>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d901      	bls.n	80057ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e006      	b.n	80057dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	f003 0310 	and.w	r3, r3, #16
 80057d6:	2b10      	cmp	r3, #16
 80057d8:	d0f0      	beq.n	80057bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3714      	adds	r7, #20
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr
 80057e8:	00030d40 	.word	0x00030d40

080057ec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b089      	sub	sp, #36	; 0x24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	4611      	mov	r1, r2
 80057f8:	461a      	mov	r2, r3
 80057fa:	460b      	mov	r3, r1
 80057fc:	71fb      	strb	r3, [r7, #7]
 80057fe:	4613      	mov	r3, r2
 8005800:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800580a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800580e:	2b00      	cmp	r3, #0
 8005810:	d123      	bne.n	800585a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005812:	88bb      	ldrh	r3, [r7, #4]
 8005814:	3303      	adds	r3, #3
 8005816:	089b      	lsrs	r3, r3, #2
 8005818:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800581a:	2300      	movs	r3, #0
 800581c:	61bb      	str	r3, [r7, #24]
 800581e:	e018      	b.n	8005852 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005820:	79fb      	ldrb	r3, [r7, #7]
 8005822:	031a      	lsls	r2, r3, #12
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	4413      	add	r3, r2
 8005828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800582c:	461a      	mov	r2, r3
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	3301      	adds	r3, #1
 8005838:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	3301      	adds	r3, #1
 800583e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	3301      	adds	r3, #1
 8005844:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	3301      	adds	r3, #1
 800584a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	3301      	adds	r3, #1
 8005850:	61bb      	str	r3, [r7, #24]
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	429a      	cmp	r2, r3
 8005858:	d3e2      	bcc.n	8005820 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3724      	adds	r7, #36	; 0x24
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005868:	b480      	push	{r7}
 800586a:	b08b      	sub	sp, #44	; 0x2c
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	4613      	mov	r3, r2
 8005874:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800587e:	88fb      	ldrh	r3, [r7, #6]
 8005880:	089b      	lsrs	r3, r3, #2
 8005882:	b29b      	uxth	r3, r3
 8005884:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005886:	88fb      	ldrh	r3, [r7, #6]
 8005888:	f003 0303 	and.w	r3, r3, #3
 800588c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800588e:	2300      	movs	r3, #0
 8005890:	623b      	str	r3, [r7, #32]
 8005892:	e014      	b.n	80058be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589e:	601a      	str	r2, [r3, #0]
    pDest++;
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	3301      	adds	r3, #1
 80058a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	3301      	adds	r3, #1
 80058aa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	3301      	adds	r3, #1
 80058b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b4:	3301      	adds	r3, #1
 80058b6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80058b8:	6a3b      	ldr	r3, [r7, #32]
 80058ba:	3301      	adds	r3, #1
 80058bc:	623b      	str	r3, [r7, #32]
 80058be:	6a3a      	ldr	r2, [r7, #32]
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d3e6      	bcc.n	8005894 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80058c6:	8bfb      	ldrh	r3, [r7, #30]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d01e      	beq.n	800590a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058d6:	461a      	mov	r2, r3
 80058d8:	f107 0310 	add.w	r3, r7, #16
 80058dc:	6812      	ldr	r2, [r2, #0]
 80058de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	fa22 f303 	lsr.w	r3, r2, r3
 80058ec:	b2da      	uxtb	r2, r3
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	701a      	strb	r2, [r3, #0]
      i++;
 80058f2:	6a3b      	ldr	r3, [r7, #32]
 80058f4:	3301      	adds	r3, #1
 80058f6:	623b      	str	r3, [r7, #32]
      pDest++;
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	3301      	adds	r3, #1
 80058fc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80058fe:	8bfb      	ldrh	r3, [r7, #30]
 8005900:	3b01      	subs	r3, #1
 8005902:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005904:	8bfb      	ldrh	r3, [r7, #30]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1ea      	bne.n	80058e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800590c:	4618      	mov	r0, r3
 800590e:	372c      	adds	r7, #44	; 0x2c
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	4013      	ands	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005930:	68fb      	ldr	r3, [r7, #12]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3714      	adds	r7, #20
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr

0800593e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800593e:	b480      	push	{r7}
 8005940:	b083      	sub	sp, #12
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	f003 0301 	and.w	r3, r3, #1
}
 800594e:	4618      	mov	r0, r3
 8005950:	370c      	adds	r7, #12
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
	...

0800595c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005964:	2300      	movs	r3, #0
 8005966:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	3301      	adds	r3, #1
 800596c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	4a13      	ldr	r2, [pc, #76]	; (80059c0 <USB_CoreReset+0x64>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d901      	bls.n	800597a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e01b      	b.n	80059b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	2b00      	cmp	r3, #0
 8005980:	daf2      	bge.n	8005968 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005982:	2300      	movs	r3, #0
 8005984:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	f043 0201 	orr.w	r2, r3, #1
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	3301      	adds	r3, #1
 8005996:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	4a09      	ldr	r2, [pc, #36]	; (80059c0 <USB_CoreReset+0x64>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d901      	bls.n	80059a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e006      	b.n	80059b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	f003 0301 	and.w	r3, r3, #1
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d0f0      	beq.n	8005992 <USB_CoreReset+0x36>

  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3714      	adds	r7, #20
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	00030d40 	.word	0x00030d40

080059c4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059c4:	b084      	sub	sp, #16
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b086      	sub	sp, #24
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
 80059ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80059d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80059d6:	2300      	movs	r3, #0
 80059d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059e4:	461a      	mov	r2, r3
 80059e6:	2300      	movs	r3, #0
 80059e8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a06:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d018      	beq.n	8005a4c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d10a      	bne.n	8005a36 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a2e:	f043 0304 	orr.w	r3, r3, #4
 8005a32:	6013      	str	r3, [r2, #0]
 8005a34:	e014      	b.n	8005a60 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a44:	f023 0304 	bic.w	r3, r3, #4
 8005a48:	6013      	str	r3, [r2, #0]
 8005a4a:	e009      	b.n	8005a60 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a5a:	f023 0304 	bic.w	r3, r3, #4
 8005a5e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a60:	2110      	movs	r1, #16
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7ff fe5e 	bl	8005724 <USB_FlushTxFifo>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d001      	beq.n	8005a72 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7ff fe8a 	bl	800578c <USB_FlushRxFifo>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005a82:	2300      	movs	r3, #0
 8005a84:	613b      	str	r3, [r7, #16]
 8005a86:	e015      	b.n	8005ab4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a94:	461a      	mov	r2, r3
 8005a96:	f04f 33ff 	mov.w	r3, #4294967295
 8005a9a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	2300      	movs	r3, #0
 8005aac:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	613b      	str	r3, [r7, #16]
 8005ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d3e5      	bcc.n	8005a88 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ac8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00b      	beq.n	8005aee <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005adc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a13      	ldr	r2, [pc, #76]	; (8005b30 <USB_HostInit+0x16c>)
 8005ae2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a13      	ldr	r2, [pc, #76]	; (8005b34 <USB_HostInit+0x170>)
 8005ae8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005aec:	e009      	b.n	8005b02 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2280      	movs	r2, #128	; 0x80
 8005af2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a10      	ldr	r2, [pc, #64]	; (8005b38 <USB_HostInit+0x174>)
 8005af8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a0f      	ldr	r2, [pc, #60]	; (8005b3c <USB_HostInit+0x178>)
 8005afe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d105      	bne.n	8005b14 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	f043 0210 	orr.w	r2, r3, #16
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	699a      	ldr	r2, [r3, #24]
 8005b18:	4b09      	ldr	r3, [pc, #36]	; (8005b40 <USB_HostInit+0x17c>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3718      	adds	r7, #24
 8005b26:	46bd      	mov	sp, r7
 8005b28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b2c:	b004      	add	sp, #16
 8005b2e:	4770      	bx	lr
 8005b30:	01000200 	.word	0x01000200
 8005b34:	00e00300 	.word	0x00e00300
 8005b38:	00600080 	.word	0x00600080
 8005b3c:	004000e0 	.word	0x004000e0
 8005b40:	a3200008 	.word	0xa3200008

08005b44 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b62:	f023 0303 	bic.w	r3, r3, #3
 8005b66:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	78fb      	ldrb	r3, [r7, #3]
 8005b72:	f003 0303 	and.w	r3, r3, #3
 8005b76:	68f9      	ldr	r1, [r7, #12]
 8005b78:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005b80:	78fb      	ldrb	r3, [r7, #3]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d107      	bne.n	8005b96 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005b92:	6053      	str	r3, [r2, #4]
 8005b94:	e009      	b.n	8005baa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005b96:	78fb      	ldrb	r3, [r7, #3]
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d106      	bne.n	8005baa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	f241 7370 	movw	r3, #6000	; 0x1770
 8005ba8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3714      	adds	r7, #20
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005bd8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005be6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005be8:	2064      	movs	r0, #100	; 0x64
 8005bea:	f7fb fb45 	bl	8001278 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005bf6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bfa:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005bfc:	200a      	movs	r0, #10
 8005bfe:	f7fb fb3b 	bl	8001278 <HAL_Delay>

  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	460b      	mov	r3, r1
 8005c16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005c30:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d109      	bne.n	8005c50 <USB_DriveVbus+0x44>
 8005c3c:	78fb      	ldrb	r3, [r7, #3]
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d106      	bne.n	8005c50 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005c4e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c5a:	d109      	bne.n	8005c70 <USB_DriveVbus+0x64>
 8005c5c:	78fb      	ldrb	r3, [r7, #3]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d106      	bne.n	8005c70 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c6e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3714      	adds	r7, #20
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b085      	sub	sp, #20
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	0c5b      	lsrs	r3, r3, #17
 8005c9c:	f003 0303 	and.w	r3, r3, #3
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3714      	adds	r7, #20
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	b29b      	uxth	r3, r3
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
	...

08005cd0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b088      	sub	sp, #32
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	4608      	mov	r0, r1
 8005cda:	4611      	mov	r1, r2
 8005cdc:	461a      	mov	r2, r3
 8005cde:	4603      	mov	r3, r0
 8005ce0:	70fb      	strb	r3, [r7, #3]
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	70bb      	strb	r3, [r7, #2]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005cea:	2300      	movs	r3, #0
 8005cec:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005cf2:	78fb      	ldrb	r3, [r7, #3]
 8005cf4:	015a      	lsls	r2, r3, #5
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cfe:	461a      	mov	r2, r3
 8005d00:	f04f 33ff 	mov.w	r3, #4294967295
 8005d04:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005d06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005d0a:	2b03      	cmp	r3, #3
 8005d0c:	d87e      	bhi.n	8005e0c <USB_HC_Init+0x13c>
 8005d0e:	a201      	add	r2, pc, #4	; (adr r2, 8005d14 <USB_HC_Init+0x44>)
 8005d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d14:	08005d25 	.word	0x08005d25
 8005d18:	08005dcf 	.word	0x08005dcf
 8005d1c:	08005d25 	.word	0x08005d25
 8005d20:	08005d91 	.word	0x08005d91
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d24:	78fb      	ldrb	r3, [r7, #3]
 8005d26:	015a      	lsls	r2, r3, #5
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d30:	461a      	mov	r2, r3
 8005d32:	f240 439d 	movw	r3, #1181	; 0x49d
 8005d36:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005d38:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	da10      	bge.n	8005d62 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005d40:	78fb      	ldrb	r3, [r7, #3]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	78fa      	ldrb	r2, [r7, #3]
 8005d50:	0151      	lsls	r1, r2, #5
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	440a      	add	r2, r1
 8005d56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d5e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005d60:	e057      	b.n	8005e12 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d051      	beq.n	8005e12 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005d6e:	78fb      	ldrb	r3, [r7, #3]
 8005d70:	015a      	lsls	r2, r3, #5
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	4413      	add	r3, r2
 8005d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	78fa      	ldrb	r2, [r7, #3]
 8005d7e:	0151      	lsls	r1, r2, #5
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	440a      	add	r2, r1
 8005d84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d88:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005d8c:	60d3      	str	r3, [r2, #12]
      break;
 8005d8e:	e040      	b.n	8005e12 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d90:	78fb      	ldrb	r3, [r7, #3]
 8005d92:	015a      	lsls	r2, r3, #5
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	4413      	add	r3, r2
 8005d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	f240 639d 	movw	r3, #1693	; 0x69d
 8005da2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005da4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	da34      	bge.n	8005e16 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005dac:	78fb      	ldrb	r3, [r7, #3]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	78fa      	ldrb	r2, [r7, #3]
 8005dbc:	0151      	lsls	r1, r2, #5
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	440a      	add	r2, r1
 8005dc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dca:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005dcc:	e023      	b.n	8005e16 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005dce:	78fb      	ldrb	r3, [r7, #3]
 8005dd0:	015a      	lsls	r2, r3, #5
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dda:	461a      	mov	r2, r3
 8005ddc:	f240 2325 	movw	r3, #549	; 0x225
 8005de0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005de2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	da17      	bge.n	8005e1a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005dea:	78fb      	ldrb	r3, [r7, #3]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	78fa      	ldrb	r2, [r7, #3]
 8005dfa:	0151      	lsls	r1, r2, #5
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	440a      	add	r2, r1
 8005e00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e04:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005e08:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005e0a:	e006      	b.n	8005e1a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	77fb      	strb	r3, [r7, #31]
      break;
 8005e10:	e004      	b.n	8005e1c <USB_HC_Init+0x14c>
      break;
 8005e12:	bf00      	nop
 8005e14:	e002      	b.n	8005e1c <USB_HC_Init+0x14c>
      break;
 8005e16:	bf00      	nop
 8005e18:	e000      	b.n	8005e1c <USB_HC_Init+0x14c>
      break;
 8005e1a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005e1c:	78fb      	ldrb	r3, [r7, #3]
 8005e1e:	015a      	lsls	r2, r3, #5
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	78fa      	ldrb	r2, [r7, #3]
 8005e2c:	0151      	lsls	r1, r2, #5
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	440a      	add	r2, r1
 8005e32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e36:	f043 0302 	orr.w	r3, r3, #2
 8005e3a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e42:	699a      	ldr	r2, [r3, #24]
 8005e44:	78fb      	ldrb	r3, [r7, #3]
 8005e46:	f003 030f 	and.w	r3, r3, #15
 8005e4a:	2101      	movs	r1, #1
 8005e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e50:	6939      	ldr	r1, [r7, #16]
 8005e52:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005e56:	4313      	orrs	r3, r2
 8005e58:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005e66:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	da03      	bge.n	8005e76 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e72:	61bb      	str	r3, [r7, #24]
 8005e74:	e001      	b.n	8005e7a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7ff feff 	bl	8005c7e <USB_GetHostSpeed>
 8005e80:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005e82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d106      	bne.n	8005e98 <USB_HC_Init+0x1c8>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d003      	beq.n	8005e98 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005e90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e94:	617b      	str	r3, [r7, #20]
 8005e96:	e001      	b.n	8005e9c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e9c:	787b      	ldrb	r3, [r7, #1]
 8005e9e:	059b      	lsls	r3, r3, #22
 8005ea0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005ea4:	78bb      	ldrb	r3, [r7, #2]
 8005ea6:	02db      	lsls	r3, r3, #11
 8005ea8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005eac:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005eae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005eb2:	049b      	lsls	r3, r3, #18
 8005eb4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005eb8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005eba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005ebc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005ec0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005ec6:	78fb      	ldrb	r3, [r7, #3]
 8005ec8:	0159      	lsls	r1, r3, #5
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	440b      	add	r3, r1
 8005ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005ed8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005eda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005ede:	2b03      	cmp	r3, #3
 8005ee0:	d003      	beq.n	8005eea <USB_HC_Init+0x21a>
 8005ee2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d10f      	bne.n	8005f0a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005eea:	78fb      	ldrb	r3, [r7, #3]
 8005eec:	015a      	lsls	r2, r3, #5
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	78fa      	ldrb	r2, [r7, #3]
 8005efa:	0151      	lsls	r1, r2, #5
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	440a      	add	r2, r1
 8005f00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f08:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005f0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3720      	adds	r7, #32
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b08c      	sub	sp, #48	; 0x30
 8005f18:	af02      	add	r7, sp, #8
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	785b      	ldrb	r3, [r3, #1]
 8005f2a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005f2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f30:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d02d      	beq.n	8005f9a <USB_HC_StartXfer+0x86>
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	791b      	ldrb	r3, [r3, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d129      	bne.n	8005f9a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005f46:	79fb      	ldrb	r3, [r7, #7]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d117      	bne.n	8005f7c <USB_HC_StartXfer+0x68>
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	79db      	ldrb	r3, [r3, #7]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d003      	beq.n	8005f5c <USB_HC_StartXfer+0x48>
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	79db      	ldrb	r3, [r3, #7]
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d10f      	bne.n	8005f7c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	015a      	lsls	r2, r3, #5
 8005f60:	6a3b      	ldr	r3, [r7, #32]
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	69fa      	ldr	r2, [r7, #28]
 8005f6c:	0151      	lsls	r1, r2, #5
 8005f6e:	6a3a      	ldr	r2, [r7, #32]
 8005f70:	440a      	add	r2, r1
 8005f72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f7a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005f7c:	79fb      	ldrb	r3, [r7, #7]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10b      	bne.n	8005f9a <USB_HC_StartXfer+0x86>
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	795b      	ldrb	r3, [r3, #5]
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d107      	bne.n	8005f9a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	785b      	ldrb	r3, [r3, #1]
 8005f8e:	4619      	mov	r1, r3
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 fa0f 	bl	80063b4 <USB_DoPing>
      return HAL_OK;
 8005f96:	2300      	movs	r3, #0
 8005f98:	e0f8      	b.n	800618c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d018      	beq.n	8005fd4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	8912      	ldrh	r2, [r2, #8]
 8005faa:	4413      	add	r3, r2
 8005fac:	3b01      	subs	r3, #1
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	8912      	ldrh	r2, [r2, #8]
 8005fb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fb6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005fb8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005fba:	8b7b      	ldrh	r3, [r7, #26]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d90b      	bls.n	8005fd8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005fc0:	8b7b      	ldrh	r3, [r7, #26]
 8005fc2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005fc4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	8912      	ldrh	r2, [r2, #8]
 8005fca:	fb03 f202 	mul.w	r2, r3, r2
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	611a      	str	r2, [r3, #16]
 8005fd2:	e001      	b.n	8005fd8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	78db      	ldrb	r3, [r3, #3]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d007      	beq.n	8005ff0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005fe0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005fe2:	68ba      	ldr	r2, [r7, #8]
 8005fe4:	8912      	ldrh	r2, [r2, #8]
 8005fe6:	fb03 f202 	mul.w	r2, r3, r2
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	611a      	str	r2, [r3, #16]
 8005fee:	e003      	b.n	8005ff8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	695a      	ldr	r2, [r3, #20]
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006000:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006002:	04d9      	lsls	r1, r3, #19
 8006004:	4b63      	ldr	r3, [pc, #396]	; (8006194 <USB_HC_StartXfer+0x280>)
 8006006:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006008:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	7a9b      	ldrb	r3, [r3, #10]
 800600e:	075b      	lsls	r3, r3, #29
 8006010:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006014:	69f9      	ldr	r1, [r7, #28]
 8006016:	0148      	lsls	r0, r1, #5
 8006018:	6a39      	ldr	r1, [r7, #32]
 800601a:	4401      	add	r1, r0
 800601c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006020:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006022:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006024:	79fb      	ldrb	r3, [r7, #7]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d009      	beq.n	800603e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	68d9      	ldr	r1, [r3, #12]
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	015a      	lsls	r2, r3, #5
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	4413      	add	r3, r2
 8006036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800603a:	460a      	mov	r2, r1
 800603c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	2b00      	cmp	r3, #0
 800604c:	bf0c      	ite	eq
 800604e:	2301      	moveq	r3, #1
 8006050:	2300      	movne	r3, #0
 8006052:	b2db      	uxtb	r3, r3
 8006054:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	015a      	lsls	r2, r3, #5
 800605a:	6a3b      	ldr	r3, [r7, #32]
 800605c:	4413      	add	r3, r2
 800605e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	69fa      	ldr	r2, [r7, #28]
 8006066:	0151      	lsls	r1, r2, #5
 8006068:	6a3a      	ldr	r2, [r7, #32]
 800606a:	440a      	add	r2, r1
 800606c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006070:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006074:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	015a      	lsls	r2, r3, #5
 800607a:	6a3b      	ldr	r3, [r7, #32]
 800607c:	4413      	add	r3, r2
 800607e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	7e7b      	ldrb	r3, [r7, #25]
 8006086:	075b      	lsls	r3, r3, #29
 8006088:	69f9      	ldr	r1, [r7, #28]
 800608a:	0148      	lsls	r0, r1, #5
 800608c:	6a39      	ldr	r1, [r7, #32]
 800608e:	4401      	add	r1, r0
 8006090:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006094:	4313      	orrs	r3, r2
 8006096:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	6a3b      	ldr	r3, [r7, #32]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060ae:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	78db      	ldrb	r3, [r3, #3]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d004      	beq.n	80060c2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060be:	613b      	str	r3, [r7, #16]
 80060c0:	e003      	b.n	80060ca <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80060c8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060d0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	6a3b      	ldr	r3, [r7, #32]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060de:	461a      	mov	r2, r3
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80060e4:	79fb      	ldrb	r3, [r7, #7]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d001      	beq.n	80060ee <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80060ea:	2300      	movs	r3, #0
 80060ec:	e04e      	b.n	800618c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	78db      	ldrb	r3, [r3, #3]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d149      	bne.n	800618a <USB_HC_StartXfer+0x276>
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d045      	beq.n	800618a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	79db      	ldrb	r3, [r3, #7]
 8006102:	2b03      	cmp	r3, #3
 8006104:	d830      	bhi.n	8006168 <USB_HC_StartXfer+0x254>
 8006106:	a201      	add	r2, pc, #4	; (adr r2, 800610c <USB_HC_StartXfer+0x1f8>)
 8006108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800610c:	0800611d 	.word	0x0800611d
 8006110:	08006141 	.word	0x08006141
 8006114:	0800611d 	.word	0x0800611d
 8006118:	08006141 	.word	0x08006141
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	3303      	adds	r3, #3
 8006122:	089b      	lsrs	r3, r3, #2
 8006124:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006126:	8afa      	ldrh	r2, [r7, #22]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612c:	b29b      	uxth	r3, r3
 800612e:	429a      	cmp	r2, r3
 8006130:	d91c      	bls.n	800616c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	f043 0220 	orr.w	r2, r3, #32
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	619a      	str	r2, [r3, #24]
        }
        break;
 800613e:	e015      	b.n	800616c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	695b      	ldr	r3, [r3, #20]
 8006144:	3303      	adds	r3, #3
 8006146:	089b      	lsrs	r3, r3, #2
 8006148:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800614a:	8afa      	ldrh	r2, [r7, #22]
 800614c:	6a3b      	ldr	r3, [r7, #32]
 800614e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	b29b      	uxth	r3, r3
 8006156:	429a      	cmp	r2, r3
 8006158:	d90a      	bls.n	8006170 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	619a      	str	r2, [r3, #24]
        }
        break;
 8006166:	e003      	b.n	8006170 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006168:	bf00      	nop
 800616a:	e002      	b.n	8006172 <USB_HC_StartXfer+0x25e>
        break;
 800616c:	bf00      	nop
 800616e:	e000      	b.n	8006172 <USB_HC_StartXfer+0x25e>
        break;
 8006170:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	68d9      	ldr	r1, [r3, #12]
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	785a      	ldrb	r2, [r3, #1]
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	b29b      	uxth	r3, r3
 8006180:	2000      	movs	r0, #0
 8006182:	9000      	str	r0, [sp, #0]
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f7ff fb31 	bl	80057ec <USB_WritePacket>
  }

  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3728      	adds	r7, #40	; 0x28
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	1ff80000 	.word	0x1ff80000

08006198 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061aa:	695b      	ldr	r3, [r3, #20]
 80061ac:	b29b      	uxth	r3, r3
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b089      	sub	sp, #36	; 0x24
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	460b      	mov	r3, r1
 80061c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80061ca:	78fb      	ldrb	r3, [r7, #3]
 80061cc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80061ce:	2300      	movs	r3, #0
 80061d0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	015a      	lsls	r2, r3, #5
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	4413      	add	r3, r2
 80061da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	0c9b      	lsrs	r3, r3, #18
 80061e2:	f003 0303 	and.w	r3, r3, #3
 80061e6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	0fdb      	lsrs	r3, r3, #31
 80061f8:	f003 0301 	and.w	r3, r3, #1
 80061fc:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	f003 0320 	and.w	r3, r3, #32
 8006206:	2b20      	cmp	r3, #32
 8006208:	d104      	bne.n	8006214 <USB_HC_Halt+0x5a>
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d101      	bne.n	8006214 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006210:	2300      	movs	r3, #0
 8006212:	e0c8      	b.n	80063a6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d002      	beq.n	8006220 <USB_HC_Halt+0x66>
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	2b02      	cmp	r3, #2
 800621e:	d163      	bne.n	80062e8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	015a      	lsls	r2, r3, #5
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	4413      	add	r3, r2
 8006228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	69ba      	ldr	r2, [r7, #24]
 8006230:	0151      	lsls	r1, r2, #5
 8006232:	69fa      	ldr	r2, [r7, #28]
 8006234:	440a      	add	r2, r1
 8006236:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800623a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800623e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f003 0320 	and.w	r3, r3, #32
 8006248:	2b00      	cmp	r3, #0
 800624a:	f040 80ab 	bne.w	80063a4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006252:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d133      	bne.n	80062c2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	4413      	add	r3, r2
 8006262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	69ba      	ldr	r2, [r7, #24]
 800626a:	0151      	lsls	r1, r2, #5
 800626c:	69fa      	ldr	r2, [r7, #28]
 800626e:	440a      	add	r2, r1
 8006270:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006274:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006278:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	015a      	lsls	r2, r3, #5
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	4413      	add	r3, r2
 8006282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	69ba      	ldr	r2, [r7, #24]
 800628a:	0151      	lsls	r1, r2, #5
 800628c:	69fa      	ldr	r2, [r7, #28]
 800628e:	440a      	add	r2, r1
 8006290:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006294:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006298:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	3301      	adds	r3, #1
 800629e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062a6:	d81d      	bhi.n	80062e4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	015a      	lsls	r2, r3, #5
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	4413      	add	r3, r2
 80062b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062be:	d0ec      	beq.n	800629a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80062c0:	e070      	b.n	80063a4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	015a      	lsls	r2, r3, #5
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	4413      	add	r3, r2
 80062ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	69ba      	ldr	r2, [r7, #24]
 80062d2:	0151      	lsls	r1, r2, #5
 80062d4:	69fa      	ldr	r2, [r7, #28]
 80062d6:	440a      	add	r2, r1
 80062d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062e0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80062e2:	e05f      	b.n	80063a4 <USB_HC_Halt+0x1ea>
            break;
 80062e4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80062e6:	e05d      	b.n	80063a4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	015a      	lsls	r2, r3, #5
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	4413      	add	r3, r2
 80062f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	69ba      	ldr	r2, [r7, #24]
 80062f8:	0151      	lsls	r1, r2, #5
 80062fa:	69fa      	ldr	r2, [r7, #28]
 80062fc:	440a      	add	r2, r1
 80062fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006302:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006306:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d133      	bne.n	8006380 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	015a      	lsls	r2, r3, #5
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	4413      	add	r3, r2
 8006320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	69ba      	ldr	r2, [r7, #24]
 8006328:	0151      	lsls	r1, r2, #5
 800632a:	69fa      	ldr	r2, [r7, #28]
 800632c:	440a      	add	r2, r1
 800632e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006332:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006336:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	4413      	add	r3, r2
 8006340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	69ba      	ldr	r2, [r7, #24]
 8006348:	0151      	lsls	r1, r2, #5
 800634a:	69fa      	ldr	r2, [r7, #28]
 800634c:	440a      	add	r2, r1
 800634e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006352:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006356:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	3301      	adds	r3, #1
 800635c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006364:	d81d      	bhi.n	80063a2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	015a      	lsls	r2, r3, #5
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	4413      	add	r3, r2
 800636e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006378:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800637c:	d0ec      	beq.n	8006358 <USB_HC_Halt+0x19e>
 800637e:	e011      	b.n	80063a4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	015a      	lsls	r2, r3, #5
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	4413      	add	r3, r2
 8006388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	0151      	lsls	r1, r2, #5
 8006392:	69fa      	ldr	r2, [r7, #28]
 8006394:	440a      	add	r2, r1
 8006396:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800639a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800639e:	6013      	str	r3, [r2, #0]
 80063a0:	e000      	b.n	80063a4 <USB_HC_Halt+0x1ea>
          break;
 80063a2:	bf00      	nop
    }
  }

  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3724      	adds	r7, #36	; 0x24
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
	...

080063b4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b087      	sub	sp, #28
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	460b      	mov	r3, r1
 80063be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80063c4:	78fb      	ldrb	r3, [r7, #3]
 80063c6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80063c8:	2301      	movs	r3, #1
 80063ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	04da      	lsls	r2, r3, #19
 80063d0:	4b15      	ldr	r3, [pc, #84]	; (8006428 <USB_DoPing+0x74>)
 80063d2:	4013      	ands	r3, r2
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	0151      	lsls	r1, r2, #5
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	440a      	add	r2, r1
 80063dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063e4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	015a      	lsls	r2, r3, #5
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	4413      	add	r3, r2
 80063ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063fc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006404:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	015a      	lsls	r2, r3, #5
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	4413      	add	r3, r2
 800640e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006412:	461a      	mov	r2, r3
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	371c      	adds	r7, #28
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	1ff80000 	.word	0x1ff80000

0800642c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b088      	sub	sp, #32
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006434:	2300      	movs	r3, #0
 8006436:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800643c:	2300      	movs	r3, #0
 800643e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f7ff f911 	bl	8005668 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006446:	2110      	movs	r1, #16
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f7ff f96b 	bl	8005724 <USB_FlushTxFifo>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d001      	beq.n	8006458 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f7ff f997 	bl	800578c <USB_FlushRxFifo>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d001      	beq.n	8006468 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006468:	2300      	movs	r3, #0
 800646a:	61bb      	str	r3, [r7, #24]
 800646c:	e01f      	b.n	80064ae <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	015a      	lsls	r2, r3, #5
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	4413      	add	r3, r2
 8006476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006484:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800648c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006494:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	015a      	lsls	r2, r3, #5
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	4413      	add	r3, r2
 800649e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064a2:	461a      	mov	r2, r3
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	3301      	adds	r3, #1
 80064ac:	61bb      	str	r3, [r7, #24]
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	2b0f      	cmp	r3, #15
 80064b2:	d9dc      	bls.n	800646e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80064b4:	2300      	movs	r3, #0
 80064b6:	61bb      	str	r3, [r7, #24]
 80064b8:	e034      	b.n	8006524 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	015a      	lsls	r2, r3, #5
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064d0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064d8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80064e0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ee:	461a      	mov	r2, r3
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	3301      	adds	r3, #1
 80064f8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006500:	d80c      	bhi.n	800651c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	015a      	lsls	r2, r3, #5
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	4413      	add	r3, r2
 800650a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006514:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006518:	d0ec      	beq.n	80064f4 <USB_StopHost+0xc8>
 800651a:	e000      	b.n	800651e <USB_StopHost+0xf2>
        break;
 800651c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	3301      	adds	r3, #1
 8006522:	61bb      	str	r3, [r7, #24]
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	2b0f      	cmp	r3, #15
 8006528:	d9c7      	bls.n	80064ba <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006530:	461a      	mov	r2, r3
 8006532:	f04f 33ff 	mov.w	r3, #4294967295
 8006536:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f04f 32ff 	mov.w	r2, #4294967295
 800653e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f7ff f880 	bl	8005646 <USB_EnableGlobalInt>

  return ret;
 8006546:	7ffb      	ldrb	r3, [r7, #31]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3720      	adds	r7, #32
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006550:	b590      	push	{r4, r7, lr}
 8006552:	b089      	sub	sp, #36	; 0x24
 8006554:	af04      	add	r7, sp, #16
 8006556:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006558:	2301      	movs	r3, #1
 800655a:	2202      	movs	r2, #2
 800655c:	2102      	movs	r1, #2
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 fc66 	bl	8006e30 <USBH_FindInterface>
 8006564:	4603      	mov	r3, r0
 8006566:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006568:	7bfb      	ldrb	r3, [r7, #15]
 800656a:	2bff      	cmp	r3, #255	; 0xff
 800656c:	d002      	beq.n	8006574 <USBH_CDC_InterfaceInit+0x24>
 800656e:	7bfb      	ldrb	r3, [r7, #15]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d901      	bls.n	8006578 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006574:	2302      	movs	r3, #2
 8006576:	e13d      	b.n	80067f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006578:	7bfb      	ldrb	r3, [r7, #15]
 800657a:	4619      	mov	r1, r3
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 fc3b 	bl	8006df8 <USBH_SelectInterface>
 8006582:	4603      	mov	r3, r0
 8006584:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006586:	7bbb      	ldrb	r3, [r7, #14]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d001      	beq.n	8006590 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800658c:	2302      	movs	r3, #2
 800658e:	e131      	b.n	80067f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006596:	2050      	movs	r0, #80	; 0x50
 8006598:	f002 fafa 	bl	8008b90 <malloc>
 800659c:	4603      	mov	r3, r0
 800659e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065a6:	69db      	ldr	r3, [r3, #28]
 80065a8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d101      	bne.n	80065b4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80065b0:	2302      	movs	r3, #2
 80065b2:	e11f      	b.n	80067f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80065b4:	2250      	movs	r2, #80	; 0x50
 80065b6:	2100      	movs	r1, #0
 80065b8:	68b8      	ldr	r0, [r7, #8]
 80065ba:	f002 faf9 	bl	8008bb0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80065be:	7bfb      	ldrb	r3, [r7, #15]
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	211a      	movs	r1, #26
 80065c4:	fb01 f303 	mul.w	r3, r1, r3
 80065c8:	4413      	add	r3, r2
 80065ca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	b25b      	sxtb	r3, r3
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	da15      	bge.n	8006602 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80065d6:	7bfb      	ldrb	r3, [r7, #15]
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	211a      	movs	r1, #26
 80065dc:	fb01 f303 	mul.w	r3, r1, r3
 80065e0:	4413      	add	r3, r2
 80065e2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80065e6:	781a      	ldrb	r2, [r3, #0]
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80065ec:	7bfb      	ldrb	r3, [r7, #15]
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	211a      	movs	r1, #26
 80065f2:	fb01 f303 	mul.w	r3, r1, r3
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80065fc:	881a      	ldrh	r2, [r3, #0]
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	785b      	ldrb	r3, [r3, #1]
 8006606:	4619      	mov	r1, r3
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f001 ff2c 	bl	8008466 <USBH_AllocPipe>
 800660e:	4603      	mov	r3, r0
 8006610:	461a      	mov	r2, r3
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	7819      	ldrb	r1, [r3, #0]
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	7858      	ldrb	r0, [r3, #1]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	8952      	ldrh	r2, [r2, #10]
 800662e:	9202      	str	r2, [sp, #8]
 8006630:	2203      	movs	r2, #3
 8006632:	9201      	str	r2, [sp, #4]
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	4623      	mov	r3, r4
 8006638:	4602      	mov	r2, r0
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f001 fee4 	bl	8008408 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	2200      	movs	r2, #0
 8006646:	4619      	mov	r1, r3
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f002 f9f3 	bl	8008a34 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800664e:	2300      	movs	r3, #0
 8006650:	2200      	movs	r2, #0
 8006652:	210a      	movs	r1, #10
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 fbeb 	bl	8006e30 <USBH_FindInterface>
 800665a:	4603      	mov	r3, r0
 800665c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800665e:	7bfb      	ldrb	r3, [r7, #15]
 8006660:	2bff      	cmp	r3, #255	; 0xff
 8006662:	d002      	beq.n	800666a <USBH_CDC_InterfaceInit+0x11a>
 8006664:	7bfb      	ldrb	r3, [r7, #15]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d901      	bls.n	800666e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800666a:	2302      	movs	r3, #2
 800666c:	e0c2      	b.n	80067f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800666e:	7bfb      	ldrb	r3, [r7, #15]
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	211a      	movs	r1, #26
 8006674:	fb01 f303 	mul.w	r3, r1, r3
 8006678:	4413      	add	r3, r2
 800667a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	b25b      	sxtb	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	da16      	bge.n	80066b4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006686:	7bfb      	ldrb	r3, [r7, #15]
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	211a      	movs	r1, #26
 800668c:	fb01 f303 	mul.w	r3, r1, r3
 8006690:	4413      	add	r3, r2
 8006692:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006696:	781a      	ldrb	r2, [r3, #0]
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800669c:	7bfb      	ldrb	r3, [r7, #15]
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	211a      	movs	r1, #26
 80066a2:	fb01 f303 	mul.w	r3, r1, r3
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80066ac:	881a      	ldrh	r2, [r3, #0]
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	835a      	strh	r2, [r3, #26]
 80066b2:	e015      	b.n	80066e0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80066b4:	7bfb      	ldrb	r3, [r7, #15]
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	211a      	movs	r1, #26
 80066ba:	fb01 f303 	mul.w	r3, r1, r3
 80066be:	4413      	add	r3, r2
 80066c0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80066c4:	781a      	ldrb	r2, [r3, #0]
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80066ca:	7bfb      	ldrb	r3, [r7, #15]
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	211a      	movs	r1, #26
 80066d0:	fb01 f303 	mul.w	r3, r1, r3
 80066d4:	4413      	add	r3, r2
 80066d6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80066da:	881a      	ldrh	r2, [r3, #0]
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80066e0:	7bfb      	ldrb	r3, [r7, #15]
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	211a      	movs	r1, #26
 80066e6:	fb01 f303 	mul.w	r3, r1, r3
 80066ea:	4413      	add	r3, r2
 80066ec:	f203 3356 	addw	r3, r3, #854	; 0x356
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	b25b      	sxtb	r3, r3
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	da16      	bge.n	8006726 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80066f8:	7bfb      	ldrb	r3, [r7, #15]
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	211a      	movs	r1, #26
 80066fe:	fb01 f303 	mul.w	r3, r1, r3
 8006702:	4413      	add	r3, r2
 8006704:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006708:	781a      	ldrb	r2, [r3, #0]
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800670e:	7bfb      	ldrb	r3, [r7, #15]
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	211a      	movs	r1, #26
 8006714:	fb01 f303 	mul.w	r3, r1, r3
 8006718:	4413      	add	r3, r2
 800671a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800671e:	881a      	ldrh	r2, [r3, #0]
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	835a      	strh	r2, [r3, #26]
 8006724:	e015      	b.n	8006752 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006726:	7bfb      	ldrb	r3, [r7, #15]
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	211a      	movs	r1, #26
 800672c:	fb01 f303 	mul.w	r3, r1, r3
 8006730:	4413      	add	r3, r2
 8006732:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006736:	781a      	ldrb	r2, [r3, #0]
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800673c:	7bfb      	ldrb	r3, [r7, #15]
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	211a      	movs	r1, #26
 8006742:	fb01 f303 	mul.w	r3, r1, r3
 8006746:	4413      	add	r3, r2
 8006748:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800674c:	881a      	ldrh	r2, [r3, #0]
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	7b9b      	ldrb	r3, [r3, #14]
 8006756:	4619      	mov	r1, r3
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f001 fe84 	bl	8008466 <USBH_AllocPipe>
 800675e:	4603      	mov	r3, r0
 8006760:	461a      	mov	r2, r3
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	7bdb      	ldrb	r3, [r3, #15]
 800676a:	4619      	mov	r1, r3
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f001 fe7a 	bl	8008466 <USBH_AllocPipe>
 8006772:	4603      	mov	r3, r0
 8006774:	461a      	mov	r2, r3
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	7b59      	ldrb	r1, [r3, #13]
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	7b98      	ldrb	r0, [r3, #14]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	8b12      	ldrh	r2, [r2, #24]
 8006792:	9202      	str	r2, [sp, #8]
 8006794:	2202      	movs	r2, #2
 8006796:	9201      	str	r2, [sp, #4]
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	4623      	mov	r3, r4
 800679c:	4602      	mov	r2, r0
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f001 fe32 	bl	8008408 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	7b19      	ldrb	r1, [r3, #12]
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	7bd8      	ldrb	r0, [r3, #15]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	8b52      	ldrh	r2, [r2, #26]
 80067bc:	9202      	str	r2, [sp, #8]
 80067be:	2202      	movs	r2, #2
 80067c0:	9201      	str	r2, [sp, #4]
 80067c2:	9300      	str	r3, [sp, #0]
 80067c4:	4623      	mov	r3, r4
 80067c6:	4602      	mov	r2, r0
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f001 fe1d 	bl	8008408 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	7b5b      	ldrb	r3, [r3, #13]
 80067da:	2200      	movs	r2, #0
 80067dc:	4619      	mov	r1, r3
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f002 f928 	bl	8008a34 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	7b1b      	ldrb	r3, [r3, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	4619      	mov	r1, r3
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f002 f921 	bl	8008a34 <USBH_LL_SetToggle>

  return USBH_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3714      	adds	r7, #20
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd90      	pop	{r4, r7, pc}

080067fc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800680a:	69db      	ldr	r3, [r3, #28]
 800680c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00e      	beq.n	8006834 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	4619      	mov	r1, r3
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f001 fe12 	bl	8008446 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	4619      	mov	r1, r3
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f001 fe3d 	bl	80084a8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	7b1b      	ldrb	r3, [r3, #12]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00e      	beq.n	800685a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	7b1b      	ldrb	r3, [r3, #12]
 8006840:	4619      	mov	r1, r3
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f001 fdff 	bl	8008446 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	7b1b      	ldrb	r3, [r3, #12]
 800684c:	4619      	mov	r1, r3
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f001 fe2a 	bl	80084a8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	7b5b      	ldrb	r3, [r3, #13]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00e      	beq.n	8006880 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	7b5b      	ldrb	r3, [r3, #13]
 8006866:	4619      	mov	r1, r3
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f001 fdec 	bl	8008446 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	7b5b      	ldrb	r3, [r3, #13]
 8006872:	4619      	mov	r1, r3
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f001 fe17 	bl	80084a8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006886:	69db      	ldr	r3, [r3, #28]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00b      	beq.n	80068a4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006892:	69db      	ldr	r3, [r3, #28]
 8006894:	4618      	mov	r0, r3
 8006896:	f002 f983 	bl	8008ba0 <free>
    phost->pActiveClass->pData = 0U;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068a0:	2200      	movs	r2, #0
 80068a2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b084      	sub	sp, #16
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068bc:	69db      	ldr	r3, [r3, #28]
 80068be:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	3340      	adds	r3, #64	; 0x40
 80068c4:	4619      	mov	r1, r3
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f8b1 	bl	8006a2e <GetLineCoding>
 80068cc:	4603      	mov	r3, r0
 80068ce:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80068d0:	7afb      	ldrb	r3, [r7, #11]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d105      	bne.n	80068e2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068dc:	2102      	movs	r1, #2
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80068e2:	7afb      	ldrb	r3, [r7, #11]
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80068f4:	2301      	movs	r3, #1
 80068f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80068f8:	2300      	movs	r3, #0
 80068fa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006902:	69db      	ldr	r3, [r3, #28]
 8006904:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800690c:	2b04      	cmp	r3, #4
 800690e:	d877      	bhi.n	8006a00 <USBH_CDC_Process+0x114>
 8006910:	a201      	add	r2, pc, #4	; (adr r2, 8006918 <USBH_CDC_Process+0x2c>)
 8006912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006916:	bf00      	nop
 8006918:	0800692d 	.word	0x0800692d
 800691c:	08006933 	.word	0x08006933
 8006920:	08006963 	.word	0x08006963
 8006924:	080069d7 	.word	0x080069d7
 8006928:	080069e5 	.word	0x080069e5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800692c:	2300      	movs	r3, #0
 800692e:	73fb      	strb	r3, [r7, #15]
      break;
 8006930:	e06d      	b.n	8006a0e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006936:	4619      	mov	r1, r3
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 f897 	bl	8006a6c <SetLineCoding>
 800693e:	4603      	mov	r3, r0
 8006940:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006942:	7bbb      	ldrb	r3, [r7, #14]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d104      	bne.n	8006952 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	2202      	movs	r2, #2
 800694c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006950:	e058      	b.n	8006a04 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006952:	7bbb      	ldrb	r3, [r7, #14]
 8006954:	2b01      	cmp	r3, #1
 8006956:	d055      	beq.n	8006a04 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	2204      	movs	r2, #4
 800695c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006960:	e050      	b.n	8006a04 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	3340      	adds	r3, #64	; 0x40
 8006966:	4619      	mov	r1, r3
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 f860 	bl	8006a2e <GetLineCoding>
 800696e:	4603      	mov	r3, r0
 8006970:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006972:	7bbb      	ldrb	r3, [r7, #14]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d126      	bne.n	80069c6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800698a:	791b      	ldrb	r3, [r3, #4]
 800698c:	429a      	cmp	r2, r3
 800698e:	d13b      	bne.n	8006a08 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800699a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800699c:	429a      	cmp	r2, r3
 800699e:	d133      	bne.n	8006a08 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069aa:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d12b      	bne.n	8006a08 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069b8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d124      	bne.n	8006a08 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f958 	bl	8006c74 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80069c4:	e020      	b.n	8006a08 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80069c6:	7bbb      	ldrb	r3, [r7, #14]
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d01d      	beq.n	8006a08 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	2204      	movs	r2, #4
 80069d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80069d4:	e018      	b.n	8006a08 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 f867 	bl	8006aaa <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 f8da 	bl	8006b96 <CDC_ProcessReception>
      break;
 80069e2:	e014      	b.n	8006a0e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80069e4:	2100      	movs	r1, #0
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 ffef 	bl	80079ca <USBH_ClrFeature>
 80069ec:	4603      	mov	r3, r0
 80069ee:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80069f0:	7bbb      	ldrb	r3, [r7, #14]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10a      	bne.n	8006a0c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80069fe:	e005      	b.n	8006a0c <USBH_CDC_Process+0x120>

    default:
      break;
 8006a00:	bf00      	nop
 8006a02:	e004      	b.n	8006a0e <USBH_CDC_Process+0x122>
      break;
 8006a04:	bf00      	nop
 8006a06:	e002      	b.n	8006a0e <USBH_CDC_Process+0x122>
      break;
 8006a08:	bf00      	nop
 8006a0a:	e000      	b.n	8006a0e <USBH_CDC_Process+0x122>
      break;
 8006a0c:	bf00      	nop

  }

  return status;
 8006a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	370c      	adds	r7, #12
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b082      	sub	sp, #8
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
 8006a36:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	22a1      	movs	r2, #161	; 0xa1
 8006a3c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2221      	movs	r2, #33	; 0x21
 8006a42:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2207      	movs	r2, #7
 8006a54:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	2207      	movs	r2, #7
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f001 fa81 	bl	8007f64 <USBH_CtlReq>
 8006a62:	4603      	mov	r3, r0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3708      	adds	r7, #8
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2221      	movs	r2, #33	; 0x21
 8006a7a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2220      	movs	r2, #32
 8006a80:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2207      	movs	r2, #7
 8006a92:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	2207      	movs	r2, #7
 8006a98:	4619      	mov	r1, r3
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f001 fa62 	bl	8007f64 <USBH_CtlReq>
 8006aa0:	4603      	mov	r3, r0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3708      	adds	r7, #8
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b086      	sub	sp, #24
 8006aae:	af02      	add	r7, sp, #8
 8006ab0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ab8:	69db      	ldr	r3, [r3, #28]
 8006aba:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006abc:	2300      	movs	r3, #0
 8006abe:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d002      	beq.n	8006ad0 <CDC_ProcessTransmission+0x26>
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d023      	beq.n	8006b16 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006ace:	e05e      	b.n	8006b8e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	8b12      	ldrh	r2, [r2, #24]
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d90b      	bls.n	8006af4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	69d9      	ldr	r1, [r3, #28]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	8b1a      	ldrh	r2, [r3, #24]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	7b5b      	ldrb	r3, [r3, #13]
 8006ae8:	2001      	movs	r0, #1
 8006aea:	9000      	str	r0, [sp, #0]
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f001 fc48 	bl	8008382 <USBH_BulkSendData>
 8006af2:	e00b      	b.n	8006b0c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	7b5b      	ldrb	r3, [r3, #13]
 8006b02:	2001      	movs	r0, #1
 8006b04:	9000      	str	r0, [sp, #0]
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f001 fc3b 	bl	8008382 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2202      	movs	r2, #2
 8006b10:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006b14:	e03b      	b.n	8006b8e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	7b5b      	ldrb	r3, [r3, #13]
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f001 ff5f 	bl	80089e0 <USBH_LL_GetURBState>
 8006b22:	4603      	mov	r3, r0
 8006b24:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006b26:	7afb      	ldrb	r3, [r7, #11]
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d128      	bne.n	8006b7e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	8b12      	ldrh	r2, [r2, #24]
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d90e      	bls.n	8006b56 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	8b12      	ldrh	r2, [r2, #24]
 8006b40:	1a9a      	subs	r2, r3, r2
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	69db      	ldr	r3, [r3, #28]
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	8b12      	ldrh	r2, [r2, #24]
 8006b4e:	441a      	add	r2, r3
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	61da      	str	r2, [r3, #28]
 8006b54:	e002      	b.n	8006b5c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d004      	beq.n	8006b6e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006b6c:	e00e      	b.n	8006b8c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f868 	bl	8006c4c <USBH_CDC_TransmitCallback>
      break;
 8006b7c:	e006      	b.n	8006b8c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006b7e:	7afb      	ldrb	r3, [r7, #11]
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d103      	bne.n	8006b8c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006b8c:	bf00      	nop
  }
}
 8006b8e:	bf00      	nop
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b086      	sub	sp, #24
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ba4:	69db      	ldr	r3, [r3, #28]
 8006ba6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006bb2:	2b03      	cmp	r3, #3
 8006bb4:	d002      	beq.n	8006bbc <CDC_ProcessReception+0x26>
 8006bb6:	2b04      	cmp	r3, #4
 8006bb8:	d00e      	beq.n	8006bd8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006bba:	e043      	b.n	8006c44 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	6a19      	ldr	r1, [r3, #32]
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	8b5a      	ldrh	r2, [r3, #26]
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	7b1b      	ldrb	r3, [r3, #12]
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f001 fbff 	bl	80083cc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	2204      	movs	r2, #4
 8006bd2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006bd6:	e035      	b.n	8006c44 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	7b1b      	ldrb	r3, [r3, #12]
 8006bdc:	4619      	mov	r1, r3
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f001 fefe 	bl	80089e0 <USBH_LL_GetURBState>
 8006be4:	4603      	mov	r3, r0
 8006be6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006be8:	7cfb      	ldrb	r3, [r7, #19]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d129      	bne.n	8006c42 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	7b1b      	ldrb	r3, [r3, #12]
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f001 fe61 	bl	80088bc <USBH_LL_GetLastXferSize>
 8006bfa:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d016      	beq.n	8006c34 <CDC_ProcessReception+0x9e>
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	8b5b      	ldrh	r3, [r3, #26]
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d910      	bls.n	8006c34 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	1ad2      	subs	r2, r2, r3
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	6a1a      	ldr	r2, [r3, #32]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	441a      	add	r2, r3
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	2203      	movs	r2, #3
 8006c2e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006c32:	e006      	b.n	8006c42 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 f80f 	bl	8006c60 <USBH_CDC_ReceiveCallback>
      break;
 8006c42:	bf00      	nop
  }
}
 8006c44:	bf00      	nop
 8006c46:	3718      	adds	r7, #24
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006c54:	bf00      	nop
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006c68:	bf00      	nop
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	4613      	mov	r3, r2
 8006c94:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d101      	bne.n	8006ca0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	e029      	b.n	8006cf4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	79fa      	ldrb	r2, [r7, #7]
 8006ca4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f000 f81f 	bl	8006cfc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d003      	beq.n	8006cec <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f001 fd31 	bl	8008754 <USBH_LL_Init>

  return USBH_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006d04:	2300      	movs	r3, #0
 8006d06:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006d08:	2300      	movs	r3, #0
 8006d0a:	60fb      	str	r3, [r7, #12]
 8006d0c:	e009      	b.n	8006d22 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	33e0      	adds	r3, #224	; 0xe0
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4413      	add	r3, r2
 8006d18:	2200      	movs	r2, #0
 8006d1a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	3301      	adds	r3, #1
 8006d20:	60fb      	str	r3, [r7, #12]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2b0f      	cmp	r3, #15
 8006d26:	d9f2      	bls.n	8006d0e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006d28:	2300      	movs	r3, #0
 8006d2a:	60fb      	str	r3, [r7, #12]
 8006d2c:	e009      	b.n	8006d42 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006d38:	2200      	movs	r2, #0
 8006d3a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	60fb      	str	r3, [r7, #12]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d48:	d3f1      	bcc.n	8006d2e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2240      	movs	r2, #64	; 0x40
 8006d6e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3714      	adds	r7, #20
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006dae:	2300      	movs	r3, #0
 8006db0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d016      	beq.n	8006de6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d10e      	bne.n	8006de0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006dc8:	1c59      	adds	r1, r3, #1
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	33de      	adds	r3, #222	; 0xde
 8006dd4:	6839      	ldr	r1, [r7, #0]
 8006dd6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	73fb      	strb	r3, [r7, #15]
 8006dde:	e004      	b.n	8006dea <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006de0:	2302      	movs	r3, #2
 8006de2:	73fb      	strb	r3, [r7, #15]
 8006de4:	e001      	b.n	8006dea <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006de6:	2302      	movs	r3, #2
 8006de8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3714      	adds	r7, #20
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	460b      	mov	r3, r1
 8006e02:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006e04:	2300      	movs	r3, #0
 8006e06:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006e0e:	78fa      	ldrb	r2, [r7, #3]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d204      	bcs.n	8006e1e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	78fa      	ldrb	r2, [r7, #3]
 8006e18:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006e1c:	e001      	b.n	8006e22 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006e1e:	2302      	movs	r3, #2
 8006e20:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3714      	adds	r7, #20
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b087      	sub	sp, #28
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	4608      	mov	r0, r1
 8006e3a:	4611      	mov	r1, r2
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	4603      	mov	r3, r0
 8006e40:	70fb      	strb	r3, [r7, #3]
 8006e42:	460b      	mov	r3, r1
 8006e44:	70bb      	strb	r3, [r7, #2]
 8006e46:	4613      	mov	r3, r2
 8006e48:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006e58:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006e5a:	e025      	b.n	8006ea8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006e5c:	7dfb      	ldrb	r3, [r7, #23]
 8006e5e:	221a      	movs	r2, #26
 8006e60:	fb02 f303 	mul.w	r3, r2, r3
 8006e64:	3308      	adds	r3, #8
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	4413      	add	r3, r2
 8006e6a:	3302      	adds	r3, #2
 8006e6c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	795b      	ldrb	r3, [r3, #5]
 8006e72:	78fa      	ldrb	r2, [r7, #3]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d002      	beq.n	8006e7e <USBH_FindInterface+0x4e>
 8006e78:	78fb      	ldrb	r3, [r7, #3]
 8006e7a:	2bff      	cmp	r3, #255	; 0xff
 8006e7c:	d111      	bne.n	8006ea2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006e82:	78ba      	ldrb	r2, [r7, #2]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d002      	beq.n	8006e8e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006e88:	78bb      	ldrb	r3, [r7, #2]
 8006e8a:	2bff      	cmp	r3, #255	; 0xff
 8006e8c:	d109      	bne.n	8006ea2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006e92:	787a      	ldrb	r2, [r7, #1]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d002      	beq.n	8006e9e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006e98:	787b      	ldrb	r3, [r7, #1]
 8006e9a:	2bff      	cmp	r3, #255	; 0xff
 8006e9c:	d101      	bne.n	8006ea2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006e9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ea0:	e006      	b.n	8006eb0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006ea2:	7dfb      	ldrb	r3, [r7, #23]
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006ea8:	7dfb      	ldrb	r3, [r7, #23]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d9d6      	bls.n	8006e5c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006eae:	23ff      	movs	r3, #255	; 0xff
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	371c      	adds	r7, #28
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f001 fc81 	bl	80087cc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006eca:	2101      	movs	r1, #1
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f001 fd9a 	bl	8008a06 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3708      	adds	r7, #8
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b088      	sub	sp, #32
 8006ee0:	af04      	add	r7, sp, #16
 8006ee2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d102      	bne.n	8006efe <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2203      	movs	r2, #3
 8006efc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b0b      	cmp	r3, #11
 8006f06:	f200 81be 	bhi.w	8007286 <USBH_Process+0x3aa>
 8006f0a:	a201      	add	r2, pc, #4	; (adr r2, 8006f10 <USBH_Process+0x34>)
 8006f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f10:	08006f41 	.word	0x08006f41
 8006f14:	08006f73 	.word	0x08006f73
 8006f18:	08006fdb 	.word	0x08006fdb
 8006f1c:	08007221 	.word	0x08007221
 8006f20:	08007287 	.word	0x08007287
 8006f24:	0800707f 	.word	0x0800707f
 8006f28:	080071c7 	.word	0x080071c7
 8006f2c:	080070b5 	.word	0x080070b5
 8006f30:	080070d5 	.word	0x080070d5
 8006f34:	080070f5 	.word	0x080070f5
 8006f38:	08007139 	.word	0x08007139
 8006f3c:	08007209 	.word	0x08007209
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f000 819e 	beq.w	800728a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2201      	movs	r2, #1
 8006f52:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006f54:	20c8      	movs	r0, #200	; 0xc8
 8006f56:	f001 fd9d 	bl	8008a94 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f001 fc93 	bl	8008886 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006f70:	e18b      	b.n	800728a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d107      	bne.n	8006f8c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2202      	movs	r2, #2
 8006f88:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f8a:	e18d      	b.n	80072a8 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006f92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f96:	d914      	bls.n	8006fc2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	b2da      	uxtb	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006fae:	2b03      	cmp	r3, #3
 8006fb0:	d903      	bls.n	8006fba <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	220d      	movs	r2, #13
 8006fb6:	701a      	strb	r2, [r3, #0]
      break;
 8006fb8:	e176      	b.n	80072a8 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	701a      	strb	r2, [r3, #0]
      break;
 8006fc0:	e172      	b.n	80072a8 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006fc8:	f103 020a 	add.w	r2, r3, #10
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006fd2:	200a      	movs	r0, #10
 8006fd4:	f001 fd5e 	bl	8008a94 <USBH_Delay>
      break;
 8006fd8:	e166      	b.n	80072a8 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d005      	beq.n	8006ff0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006fea:	2104      	movs	r1, #4
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006ff0:	2064      	movs	r0, #100	; 0x64
 8006ff2:	f001 fd4f 	bl	8008a94 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f001 fc1e 	bl	8008838 <USBH_LL_GetSpeed>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	461a      	mov	r2, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2205      	movs	r2, #5
 800700a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800700c:	2100      	movs	r1, #0
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f001 fa29 	bl	8008466 <USBH_AllocPipe>
 8007014:	4603      	mov	r3, r0
 8007016:	461a      	mov	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800701c:	2180      	movs	r1, #128	; 0x80
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f001 fa21 	bl	8008466 <USBH_AllocPipe>
 8007024:	4603      	mov	r3, r0
 8007026:	461a      	mov	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	7919      	ldrb	r1, [r3, #4]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007040:	b292      	uxth	r2, r2
 8007042:	9202      	str	r2, [sp, #8]
 8007044:	2200      	movs	r2, #0
 8007046:	9201      	str	r2, [sp, #4]
 8007048:	9300      	str	r3, [sp, #0]
 800704a:	4603      	mov	r3, r0
 800704c:	2280      	movs	r2, #128	; 0x80
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f001 f9da 	bl	8008408 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	7959      	ldrb	r1, [r3, #5]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007068:	b292      	uxth	r2, r2
 800706a:	9202      	str	r2, [sp, #8]
 800706c:	2200      	movs	r2, #0
 800706e:	9201      	str	r2, [sp, #4]
 8007070:	9300      	str	r3, [sp, #0]
 8007072:	4603      	mov	r3, r0
 8007074:	2200      	movs	r2, #0
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f001 f9c6 	bl	8008408 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800707c:	e114      	b.n	80072a8 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 f918 	bl	80072b4 <USBH_HandleEnum>
 8007084:	4603      	mov	r3, r0
 8007086:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007088:	7bbb      	ldrb	r3, [r7, #14]
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b00      	cmp	r3, #0
 800708e:	f040 80fe 	bne.w	800728e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d103      	bne.n	80070ac <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2208      	movs	r2, #8
 80070a8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80070aa:	e0f0      	b.n	800728e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2207      	movs	r2, #7
 80070b0:	701a      	strb	r2, [r3, #0]
      break;
 80070b2:	e0ec      	b.n	800728e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f000 80e9 	beq.w	8007292 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070c6:	2101      	movs	r1, #1
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2208      	movs	r2, #8
 80070d0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80070d2:	e0de      	b.n	8007292 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80070da:	b29b      	uxth	r3, r3
 80070dc:	4619      	mov	r1, r3
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 fc2c 	bl	800793c <USBH_SetCfg>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f040 80d5 	bne.w	8007296 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2209      	movs	r2, #9
 80070f0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80070f2:	e0d0      	b.n	8007296 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80070fa:	f003 0320 	and.w	r3, r3, #32
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d016      	beq.n	8007130 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007102:	2101      	movs	r1, #1
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 fc3c 	bl	8007982 <USBH_SetFeature>
 800710a:	4603      	mov	r3, r0
 800710c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800710e:	7bbb      	ldrb	r3, [r7, #14]
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b00      	cmp	r3, #0
 8007114:	d103      	bne.n	800711e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	220a      	movs	r2, #10
 800711a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800711c:	e0bd      	b.n	800729a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800711e:	7bbb      	ldrb	r3, [r7, #14]
 8007120:	b2db      	uxtb	r3, r3
 8007122:	2b03      	cmp	r3, #3
 8007124:	f040 80b9 	bne.w	800729a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	220a      	movs	r2, #10
 800712c:	701a      	strb	r2, [r3, #0]
      break;
 800712e:	e0b4      	b.n	800729a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	220a      	movs	r2, #10
 8007134:	701a      	strb	r2, [r3, #0]
      break;
 8007136:	e0b0      	b.n	800729a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800713e:	2b00      	cmp	r3, #0
 8007140:	f000 80ad 	beq.w	800729e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800714c:	2300      	movs	r3, #0
 800714e:	73fb      	strb	r3, [r7, #15]
 8007150:	e016      	b.n	8007180 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007152:	7bfa      	ldrb	r2, [r7, #15]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	32de      	adds	r2, #222	; 0xde
 8007158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800715c:	791a      	ldrb	r2, [r3, #4]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007164:	429a      	cmp	r2, r3
 8007166:	d108      	bne.n	800717a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007168:	7bfa      	ldrb	r2, [r7, #15]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	32de      	adds	r2, #222	; 0xde
 800716e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007178:	e005      	b.n	8007186 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800717a:	7bfb      	ldrb	r3, [r7, #15]
 800717c:	3301      	adds	r3, #1
 800717e:	73fb      	strb	r3, [r7, #15]
 8007180:	7bfb      	ldrb	r3, [r7, #15]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d0e5      	beq.n	8007152 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800718c:	2b00      	cmp	r3, #0
 800718e:	d016      	beq.n	80071be <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	4798      	blx	r3
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d109      	bne.n	80071b6 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2206      	movs	r2, #6
 80071a6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071ae:	2103      	movs	r1, #3
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80071b4:	e073      	b.n	800729e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	220d      	movs	r2, #13
 80071ba:	701a      	strb	r2, [r3, #0]
      break;
 80071bc:	e06f      	b.n	800729e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	220d      	movs	r2, #13
 80071c2:	701a      	strb	r2, [r3, #0]
      break;
 80071c4:	e06b      	b.n	800729e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d017      	beq.n	8007200 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	4798      	blx	r3
 80071dc:	4603      	mov	r3, r0
 80071de:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80071e0:	7bbb      	ldrb	r3, [r7, #14]
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d103      	bne.n	80071f0 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	220b      	movs	r2, #11
 80071ec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80071ee:	e058      	b.n	80072a2 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80071f0:	7bbb      	ldrb	r3, [r7, #14]
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d154      	bne.n	80072a2 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	220d      	movs	r2, #13
 80071fc:	701a      	strb	r2, [r3, #0]
      break;
 80071fe:	e050      	b.n	80072a2 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	220d      	movs	r2, #13
 8007204:	701a      	strb	r2, [r3, #0]
      break;
 8007206:	e04c      	b.n	80072a2 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800720e:	2b00      	cmp	r3, #0
 8007210:	d049      	beq.n	80072a6 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007218:	695b      	ldr	r3, [r3, #20]
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	4798      	blx	r3
      }
      break;
 800721e:	e042      	b.n	80072a6 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f7ff fd67 	bl	8006cfc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007234:	2b00      	cmp	r3, #0
 8007236:	d009      	beq.n	800724c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007252:	2b00      	cmp	r3, #0
 8007254:	d005      	beq.n	8007262 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800725c:	2105      	movs	r1, #5
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b01      	cmp	r3, #1
 800726c:	d107      	bne.n	800727e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f7ff fe20 	bl	8006ebc <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800727c:	e014      	b.n	80072a8 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f001 faa4 	bl	80087cc <USBH_LL_Start>
      break;
 8007284:	e010      	b.n	80072a8 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007286:	bf00      	nop
 8007288:	e00e      	b.n	80072a8 <USBH_Process+0x3cc>
      break;
 800728a:	bf00      	nop
 800728c:	e00c      	b.n	80072a8 <USBH_Process+0x3cc>
      break;
 800728e:	bf00      	nop
 8007290:	e00a      	b.n	80072a8 <USBH_Process+0x3cc>
    break;
 8007292:	bf00      	nop
 8007294:	e008      	b.n	80072a8 <USBH_Process+0x3cc>
      break;
 8007296:	bf00      	nop
 8007298:	e006      	b.n	80072a8 <USBH_Process+0x3cc>
      break;
 800729a:	bf00      	nop
 800729c:	e004      	b.n	80072a8 <USBH_Process+0x3cc>
      break;
 800729e:	bf00      	nop
 80072a0:	e002      	b.n	80072a8 <USBH_Process+0x3cc>
      break;
 80072a2:	bf00      	nop
 80072a4:	e000      	b.n	80072a8 <USBH_Process+0x3cc>
      break;
 80072a6:	bf00      	nop
  }
  return USBH_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop

080072b4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b088      	sub	sp, #32
 80072b8:	af04      	add	r7, sp, #16
 80072ba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80072bc:	2301      	movs	r3, #1
 80072be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80072c0:	2301      	movs	r3, #1
 80072c2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	785b      	ldrb	r3, [r3, #1]
 80072c8:	2b07      	cmp	r3, #7
 80072ca:	f200 81c1 	bhi.w	8007650 <USBH_HandleEnum+0x39c>
 80072ce:	a201      	add	r2, pc, #4	; (adr r2, 80072d4 <USBH_HandleEnum+0x20>)
 80072d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d4:	080072f5 	.word	0x080072f5
 80072d8:	080073b3 	.word	0x080073b3
 80072dc:	0800741d 	.word	0x0800741d
 80072e0:	080074ab 	.word	0x080074ab
 80072e4:	08007515 	.word	0x08007515
 80072e8:	08007585 	.word	0x08007585
 80072ec:	080075cb 	.word	0x080075cb
 80072f0:	08007611 	.word	0x08007611
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80072f4:	2108      	movs	r1, #8
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 fa50 	bl	800779c <USBH_Get_DevDesc>
 80072fc:	4603      	mov	r3, r0
 80072fe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007300:	7bbb      	ldrb	r3, [r7, #14]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d130      	bne.n	8007368 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	7919      	ldrb	r1, [r3, #4]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800732a:	b292      	uxth	r2, r2
 800732c:	9202      	str	r2, [sp, #8]
 800732e:	2200      	movs	r2, #0
 8007330:	9201      	str	r2, [sp, #4]
 8007332:	9300      	str	r3, [sp, #0]
 8007334:	4603      	mov	r3, r0
 8007336:	2280      	movs	r2, #128	; 0x80
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f001 f865 	bl	8008408 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	7959      	ldrb	r1, [r3, #5]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007352:	b292      	uxth	r2, r2
 8007354:	9202      	str	r2, [sp, #8]
 8007356:	2200      	movs	r2, #0
 8007358:	9201      	str	r2, [sp, #4]
 800735a:	9300      	str	r3, [sp, #0]
 800735c:	4603      	mov	r3, r0
 800735e:	2200      	movs	r2, #0
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f001 f851 	bl	8008408 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007366:	e175      	b.n	8007654 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007368:	7bbb      	ldrb	r3, [r7, #14]
 800736a:	2b03      	cmp	r3, #3
 800736c:	f040 8172 	bne.w	8007654 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007376:	3301      	adds	r3, #1
 8007378:	b2da      	uxtb	r2, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007386:	2b03      	cmp	r3, #3
 8007388:	d903      	bls.n	8007392 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	220d      	movs	r2, #13
 800738e:	701a      	strb	r2, [r3, #0]
      break;
 8007390:	e160      	b.n	8007654 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	795b      	ldrb	r3, [r3, #5]
 8007396:	4619      	mov	r1, r3
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f001 f885 	bl	80084a8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	791b      	ldrb	r3, [r3, #4]
 80073a2:	4619      	mov	r1, r3
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f001 f87f 	bl	80084a8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	701a      	strb	r2, [r3, #0]
      break;
 80073b0:	e150      	b.n	8007654 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80073b2:	2112      	movs	r1, #18
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 f9f1 	bl	800779c <USBH_Get_DevDesc>
 80073ba:	4603      	mov	r3, r0
 80073bc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80073be:	7bbb      	ldrb	r3, [r7, #14]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d103      	bne.n	80073cc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2202      	movs	r2, #2
 80073c8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80073ca:	e145      	b.n	8007658 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073cc:	7bbb      	ldrb	r3, [r7, #14]
 80073ce:	2b03      	cmp	r3, #3
 80073d0:	f040 8142 	bne.w	8007658 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80073da:	3301      	adds	r3, #1
 80073dc:	b2da      	uxtb	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80073ea:	2b03      	cmp	r3, #3
 80073ec:	d903      	bls.n	80073f6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	220d      	movs	r2, #13
 80073f2:	701a      	strb	r2, [r3, #0]
      break;
 80073f4:	e130      	b.n	8007658 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	795b      	ldrb	r3, [r3, #5]
 80073fa:	4619      	mov	r1, r3
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f001 f853 	bl	80084a8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	791b      	ldrb	r3, [r3, #4]
 8007406:	4619      	mov	r1, r3
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f001 f84d 	bl	80084a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	701a      	strb	r2, [r3, #0]
      break;
 800741a:	e11d      	b.n	8007658 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800741c:	2101      	movs	r1, #1
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fa68 	bl	80078f4 <USBH_SetAddress>
 8007424:	4603      	mov	r3, r0
 8007426:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007428:	7bbb      	ldrb	r3, [r7, #14]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d132      	bne.n	8007494 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800742e:	2002      	movs	r0, #2
 8007430:	f001 fb30 	bl	8008a94 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2203      	movs	r2, #3
 8007440:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	7919      	ldrb	r1, [r3, #4]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007456:	b292      	uxth	r2, r2
 8007458:	9202      	str	r2, [sp, #8]
 800745a:	2200      	movs	r2, #0
 800745c:	9201      	str	r2, [sp, #4]
 800745e:	9300      	str	r3, [sp, #0]
 8007460:	4603      	mov	r3, r0
 8007462:	2280      	movs	r2, #128	; 0x80
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 ffcf 	bl	8008408 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	7959      	ldrb	r1, [r3, #5]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800747e:	b292      	uxth	r2, r2
 8007480:	9202      	str	r2, [sp, #8]
 8007482:	2200      	movs	r2, #0
 8007484:	9201      	str	r2, [sp, #4]
 8007486:	9300      	str	r3, [sp, #0]
 8007488:	4603      	mov	r3, r0
 800748a:	2200      	movs	r2, #0
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 ffbb 	bl	8008408 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007492:	e0e3      	b.n	800765c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007494:	7bbb      	ldrb	r3, [r7, #14]
 8007496:	2b03      	cmp	r3, #3
 8007498:	f040 80e0 	bne.w	800765c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	220d      	movs	r2, #13
 80074a0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	705a      	strb	r2, [r3, #1]
      break;
 80074a8:	e0d8      	b.n	800765c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80074aa:	2109      	movs	r1, #9
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 f99d 	bl	80077ec <USBH_Get_CfgDesc>
 80074b2:	4603      	mov	r3, r0
 80074b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80074b6:	7bbb      	ldrb	r3, [r7, #14]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d103      	bne.n	80074c4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2204      	movs	r2, #4
 80074c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80074c2:	e0cd      	b.n	8007660 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80074c4:	7bbb      	ldrb	r3, [r7, #14]
 80074c6:	2b03      	cmp	r3, #3
 80074c8:	f040 80ca 	bne.w	8007660 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80074d2:	3301      	adds	r3, #1
 80074d4:	b2da      	uxtb	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80074e2:	2b03      	cmp	r3, #3
 80074e4:	d903      	bls.n	80074ee <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	220d      	movs	r2, #13
 80074ea:	701a      	strb	r2, [r3, #0]
      break;
 80074ec:	e0b8      	b.n	8007660 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	795b      	ldrb	r3, [r3, #5]
 80074f2:	4619      	mov	r1, r3
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 ffd7 	bl	80084a8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	791b      	ldrb	r3, [r3, #4]
 80074fe:	4619      	mov	r1, r3
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 ffd1 	bl	80084a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	701a      	strb	r2, [r3, #0]
      break;
 8007512:	e0a5      	b.n	8007660 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800751a:	4619      	mov	r1, r3
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 f965 	bl	80077ec <USBH_Get_CfgDesc>
 8007522:	4603      	mov	r3, r0
 8007524:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007526:	7bbb      	ldrb	r3, [r7, #14]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d103      	bne.n	8007534 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2205      	movs	r2, #5
 8007530:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007532:	e097      	b.n	8007664 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007534:	7bbb      	ldrb	r3, [r7, #14]
 8007536:	2b03      	cmp	r3, #3
 8007538:	f040 8094 	bne.w	8007664 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007542:	3301      	adds	r3, #1
 8007544:	b2da      	uxtb	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007552:	2b03      	cmp	r3, #3
 8007554:	d903      	bls.n	800755e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	220d      	movs	r2, #13
 800755a:	701a      	strb	r2, [r3, #0]
      break;
 800755c:	e082      	b.n	8007664 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	795b      	ldrb	r3, [r3, #5]
 8007562:	4619      	mov	r1, r3
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 ff9f 	bl	80084a8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	791b      	ldrb	r3, [r3, #4]
 800756e:	4619      	mov	r1, r3
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 ff99 	bl	80084a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	701a      	strb	r2, [r3, #0]
      break;
 8007582:	e06f      	b.n	8007664 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800758a:	2b00      	cmp	r3, #0
 800758c:	d019      	beq.n	80075c2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800759a:	23ff      	movs	r3, #255	; 0xff
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f949 	bl	8007834 <USBH_Get_StringDesc>
 80075a2:	4603      	mov	r3, r0
 80075a4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80075a6:	7bbb      	ldrb	r3, [r7, #14]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d103      	bne.n	80075b4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2206      	movs	r2, #6
 80075b0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80075b2:	e059      	b.n	8007668 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075b4:	7bbb      	ldrb	r3, [r7, #14]
 80075b6:	2b03      	cmp	r3, #3
 80075b8:	d156      	bne.n	8007668 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2206      	movs	r2, #6
 80075be:	705a      	strb	r2, [r3, #1]
      break;
 80075c0:	e052      	b.n	8007668 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2206      	movs	r2, #6
 80075c6:	705a      	strb	r2, [r3, #1]
      break;
 80075c8:	e04e      	b.n	8007668 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d019      	beq.n	8007608 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80075e0:	23ff      	movs	r3, #255	; 0xff
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f926 	bl	8007834 <USBH_Get_StringDesc>
 80075e8:	4603      	mov	r3, r0
 80075ea:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80075ec:	7bbb      	ldrb	r3, [r7, #14]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d103      	bne.n	80075fa <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2207      	movs	r2, #7
 80075f6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80075f8:	e038      	b.n	800766c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075fa:	7bbb      	ldrb	r3, [r7, #14]
 80075fc:	2b03      	cmp	r3, #3
 80075fe:	d135      	bne.n	800766c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2207      	movs	r2, #7
 8007604:	705a      	strb	r2, [r3, #1]
      break;
 8007606:	e031      	b.n	800766c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2207      	movs	r2, #7
 800760c:	705a      	strb	r2, [r3, #1]
      break;
 800760e:	e02d      	b.n	800766c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007616:	2b00      	cmp	r3, #0
 8007618:	d017      	beq.n	800764a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007626:	23ff      	movs	r3, #255	; 0xff
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 f903 	bl	8007834 <USBH_Get_StringDesc>
 800762e:	4603      	mov	r3, r0
 8007630:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007632:	7bbb      	ldrb	r3, [r7, #14]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d102      	bne.n	800763e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007638:	2300      	movs	r3, #0
 800763a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800763c:	e018      	b.n	8007670 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800763e:	7bbb      	ldrb	r3, [r7, #14]
 8007640:	2b03      	cmp	r3, #3
 8007642:	d115      	bne.n	8007670 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007644:	2300      	movs	r3, #0
 8007646:	73fb      	strb	r3, [r7, #15]
      break;
 8007648:	e012      	b.n	8007670 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800764a:	2300      	movs	r3, #0
 800764c:	73fb      	strb	r3, [r7, #15]
      break;
 800764e:	e00f      	b.n	8007670 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007650:	bf00      	nop
 8007652:	e00e      	b.n	8007672 <USBH_HandleEnum+0x3be>
      break;
 8007654:	bf00      	nop
 8007656:	e00c      	b.n	8007672 <USBH_HandleEnum+0x3be>
      break;
 8007658:	bf00      	nop
 800765a:	e00a      	b.n	8007672 <USBH_HandleEnum+0x3be>
      break;
 800765c:	bf00      	nop
 800765e:	e008      	b.n	8007672 <USBH_HandleEnum+0x3be>
      break;
 8007660:	bf00      	nop
 8007662:	e006      	b.n	8007672 <USBH_HandleEnum+0x3be>
      break;
 8007664:	bf00      	nop
 8007666:	e004      	b.n	8007672 <USBH_HandleEnum+0x3be>
      break;
 8007668:	bf00      	nop
 800766a:	e002      	b.n	8007672 <USBH_HandleEnum+0x3be>
      break;
 800766c:	bf00      	nop
 800766e:	e000      	b.n	8007672 <USBH_HandleEnum+0x3be>
      break;
 8007670:	bf00      	nop
  }
  return Status;
 8007672:	7bfb      	ldrb	r3, [r7, #15]
}
 8007674:	4618      	mov	r0, r3
 8007676:	3710      	adds	r7, #16
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	683a      	ldr	r2, [r7, #0]
 800768a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800768e:	bf00      	nop
 8007690:	370c      	adds	r7, #12
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b082      	sub	sp, #8
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80076a8:	1c5a      	adds	r2, r3, #1
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 f804 	bl	80076be <USBH_HandleSof>
}
 80076b6:	bf00      	nop
 80076b8:	3708      	adds	r7, #8
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b082      	sub	sp, #8
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	2b0b      	cmp	r3, #11
 80076ce:	d10a      	bne.n	80076e6 <USBH_HandleSof+0x28>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d005      	beq.n	80076e6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076e0:	699b      	ldr	r3, [r3, #24]
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	4798      	blx	r3
  }
}
 80076e6:	bf00      	nop
 80076e8:	3708      	adds	r7, #8
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80076ee:	b480      	push	{r7}
 80076f0:	b083      	sub	sp, #12
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80076fe:	bf00      	nop
}
 8007700:	370c      	adds	r7, #12
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr

0800770a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800770a:	b480      	push	{r7}
 800770c:	b083      	sub	sp, #12
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800771a:	bf00      	nop
}
 800771c:	370c      	adds	r7, #12
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr

08007726 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007726:	b480      	push	{r7}
 8007728:	b083      	sub	sp, #12
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2201      	movs	r2, #1
 8007732:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f001 f844 	bl	8008802 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	791b      	ldrb	r3, [r3, #4]
 800777e:	4619      	mov	r1, r3
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fe91 	bl	80084a8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	795b      	ldrb	r3, [r3, #5]
 800778a:	4619      	mov	r1, r3
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 fe8b 	bl	80084a8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3708      	adds	r7, #8
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b086      	sub	sp, #24
 80077a0:	af02      	add	r7, sp, #8
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	460b      	mov	r3, r1
 80077a6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80077ae:	78fb      	ldrb	r3, [r7, #3]
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	9300      	str	r3, [sp, #0]
 80077b4:	4613      	mov	r3, r2
 80077b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80077ba:	2100      	movs	r1, #0
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 f864 	bl	800788a <USBH_GetDescriptor>
 80077c2:	4603      	mov	r3, r0
 80077c4:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80077c6:	7bfb      	ldrb	r3, [r7, #15]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d10a      	bne.n	80077e2 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f203 3026 	addw	r0, r3, #806	; 0x326
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80077d8:	78fa      	ldrb	r2, [r7, #3]
 80077da:	b292      	uxth	r2, r2
 80077dc:	4619      	mov	r1, r3
 80077de:	f000 f918 	bl	8007a12 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80077e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b086      	sub	sp, #24
 80077f0:	af02      	add	r7, sp, #8
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	460b      	mov	r3, r1
 80077f6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	331c      	adds	r3, #28
 80077fc:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80077fe:	887b      	ldrh	r3, [r7, #2]
 8007800:	9300      	str	r3, [sp, #0]
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007808:	2100      	movs	r1, #0
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f83d 	bl	800788a <USBH_GetDescriptor>
 8007810:	4603      	mov	r3, r0
 8007812:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007814:	7bfb      	ldrb	r3, [r7, #15]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d107      	bne.n	800782a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800781a:	887b      	ldrh	r3, [r7, #2]
 800781c:	461a      	mov	r2, r3
 800781e:	68b9      	ldr	r1, [r7, #8]
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 f987 	bl	8007b34 <USBH_ParseCfgDesc>
 8007826:	4603      	mov	r3, r0
 8007828:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800782a:	7bfb      	ldrb	r3, [r7, #15]
}
 800782c:	4618      	mov	r0, r3
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b088      	sub	sp, #32
 8007838:	af02      	add	r7, sp, #8
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	607a      	str	r2, [r7, #4]
 800783e:	461a      	mov	r2, r3
 8007840:	460b      	mov	r3, r1
 8007842:	72fb      	strb	r3, [r7, #11]
 8007844:	4613      	mov	r3, r2
 8007846:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007848:	7afb      	ldrb	r3, [r7, #11]
 800784a:	b29b      	uxth	r3, r3
 800784c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007850:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007858:	893b      	ldrh	r3, [r7, #8]
 800785a:	9300      	str	r3, [sp, #0]
 800785c:	460b      	mov	r3, r1
 800785e:	2100      	movs	r1, #0
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f000 f812 	bl	800788a <USBH_GetDescriptor>
 8007866:	4603      	mov	r3, r0
 8007868:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800786a:	7dfb      	ldrb	r3, [r7, #23]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d107      	bne.n	8007880 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007876:	893a      	ldrh	r2, [r7, #8]
 8007878:	6879      	ldr	r1, [r7, #4]
 800787a:	4618      	mov	r0, r3
 800787c:	f000 fb24 	bl	8007ec8 <USBH_ParseStringDesc>
  }

  return status;
 8007880:	7dfb      	ldrb	r3, [r7, #23]
}
 8007882:	4618      	mov	r0, r3
 8007884:	3718      	adds	r7, #24
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800788a:	b580      	push	{r7, lr}
 800788c:	b084      	sub	sp, #16
 800788e:	af00      	add	r7, sp, #0
 8007890:	60f8      	str	r0, [r7, #12]
 8007892:	607b      	str	r3, [r7, #4]
 8007894:	460b      	mov	r3, r1
 8007896:	72fb      	strb	r3, [r7, #11]
 8007898:	4613      	mov	r3, r2
 800789a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	789b      	ldrb	r3, [r3, #2]
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d11c      	bne.n	80078de <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80078a4:	7afb      	ldrb	r3, [r7, #11]
 80078a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80078aa:	b2da      	uxtb	r2, r3
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2206      	movs	r2, #6
 80078b4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	893a      	ldrh	r2, [r7, #8]
 80078ba:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80078bc:	893b      	ldrh	r3, [r7, #8]
 80078be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80078c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078c6:	d104      	bne.n	80078d2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f240 4209 	movw	r2, #1033	; 0x409
 80078ce:	829a      	strh	r2, [r3, #20]
 80078d0:	e002      	b.n	80078d8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2200      	movs	r2, #0
 80078d6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	8b3a      	ldrh	r2, [r7, #24]
 80078dc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80078de:	8b3b      	ldrh	r3, [r7, #24]
 80078e0:	461a      	mov	r2, r3
 80078e2:	6879      	ldr	r1, [r7, #4]
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	f000 fb3d 	bl	8007f64 <USBH_CtlReq>
 80078ea:	4603      	mov	r3, r0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3710      	adds	r7, #16
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	460b      	mov	r3, r1
 80078fe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	789b      	ldrb	r3, [r3, #2]
 8007904:	2b01      	cmp	r3, #1
 8007906:	d10f      	bne.n	8007928 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2205      	movs	r2, #5
 8007912:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007914:	78fb      	ldrb	r3, [r7, #3]
 8007916:	b29a      	uxth	r2, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007928:	2200      	movs	r2, #0
 800792a:	2100      	movs	r1, #0
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 fb19 	bl	8007f64 <USBH_CtlReq>
 8007932:	4603      	mov	r3, r0
}
 8007934:	4618      	mov	r0, r3
 8007936:	3708      	adds	r7, #8
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	460b      	mov	r3, r1
 8007946:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	789b      	ldrb	r3, [r3, #2]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d10e      	bne.n	800796e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2209      	movs	r2, #9
 800795a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	887a      	ldrh	r2, [r7, #2]
 8007960:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800796e:	2200      	movs	r2, #0
 8007970:	2100      	movs	r1, #0
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 faf6 	bl	8007f64 <USBH_CtlReq>
 8007978:	4603      	mov	r3, r0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3708      	adds	r7, #8
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007982:	b580      	push	{r7, lr}
 8007984:	b082      	sub	sp, #8
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
 800798a:	460b      	mov	r3, r1
 800798c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	789b      	ldrb	r3, [r3, #2]
 8007992:	2b01      	cmp	r3, #1
 8007994:	d10f      	bne.n	80079b6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2203      	movs	r2, #3
 80079a0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80079a2:	78fb      	ldrb	r3, [r7, #3]
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80079b6:	2200      	movs	r2, #0
 80079b8:	2100      	movs	r1, #0
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 fad2 	bl	8007f64 <USBH_CtlReq>
 80079c0:	4603      	mov	r3, r0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3708      	adds	r7, #8
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b082      	sub	sp, #8
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
 80079d2:	460b      	mov	r3, r1
 80079d4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	789b      	ldrb	r3, [r3, #2]
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d10f      	bne.n	80079fe <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2202      	movs	r2, #2
 80079e2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80079f0:	78fb      	ldrb	r3, [r7, #3]
 80079f2:	b29a      	uxth	r2, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80079fe:	2200      	movs	r2, #0
 8007a00:	2100      	movs	r1, #0
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 faae 	bl	8007f64 <USBH_CtlReq>
 8007a08:	4603      	mov	r3, r0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3708      	adds	r7, #8
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007a12:	b480      	push	{r7}
 8007a14:	b085      	sub	sp, #20
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	60f8      	str	r0, [r7, #12]
 8007a1a:	60b9      	str	r1, [r7, #8]
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	781a      	ldrb	r2, [r3, #0]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	785a      	ldrb	r2, [r3, #1]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	3302      	adds	r3, #2
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	3303      	adds	r3, #3
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	021b      	lsls	r3, r3, #8
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	4313      	orrs	r3, r2
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	791a      	ldrb	r2, [r3, #4]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	795a      	ldrb	r2, [r3, #5]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	799a      	ldrb	r2, [r3, #6]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	79da      	ldrb	r2, [r3, #7]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	79db      	ldrb	r3, [r3, #7]
 8007a70:	2b20      	cmp	r3, #32
 8007a72:	dc11      	bgt.n	8007a98 <USBH_ParseDevDesc+0x86>
 8007a74:	2b08      	cmp	r3, #8
 8007a76:	db16      	blt.n	8007aa6 <USBH_ParseDevDesc+0x94>
 8007a78:	3b08      	subs	r3, #8
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a80:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007a84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	bf14      	ite	ne
 8007a8c:	2301      	movne	r3, #1
 8007a8e:	2300      	moveq	r3, #0
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d102      	bne.n	8007a9c <USBH_ParseDevDesc+0x8a>
 8007a96:	e006      	b.n	8007aa6 <USBH_ParseDevDesc+0x94>
 8007a98:	2b40      	cmp	r3, #64	; 0x40
 8007a9a:	d104      	bne.n	8007aa6 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	79da      	ldrb	r2, [r3, #7]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	71da      	strb	r2, [r3, #7]
      break;
 8007aa4:	e003      	b.n	8007aae <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2240      	movs	r2, #64	; 0x40
 8007aaa:	71da      	strb	r2, [r3, #7]
      break;
 8007aac:	bf00      	nop
  }

  if (length > 8U)
 8007aae:	88fb      	ldrh	r3, [r7, #6]
 8007ab0:	2b08      	cmp	r3, #8
 8007ab2:	d939      	bls.n	8007b28 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	3308      	adds	r3, #8
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	3309      	adds	r3, #9
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	021b      	lsls	r3, r3, #8
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	b29a      	uxth	r2, r3
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	330a      	adds	r3, #10
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	330b      	adds	r3, #11
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	021b      	lsls	r3, r3, #8
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	b29a      	uxth	r2, r3
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	330c      	adds	r3, #12
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	b29a      	uxth	r2, r3
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	330d      	adds	r3, #13
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	021b      	lsls	r3, r3, #8
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	4313      	orrs	r3, r2
 8007b02:	b29a      	uxth	r2, r3
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	7b9a      	ldrb	r2, [r3, #14]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	7bda      	ldrb	r2, [r3, #15]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	7c1a      	ldrb	r2, [r3, #16]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	7c5a      	ldrb	r2, [r3, #17]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	745a      	strb	r2, [r3, #17]
  }
}
 8007b28:	bf00      	nop
 8007b2a:	3714      	adds	r7, #20
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b08c      	sub	sp, #48	; 0x30
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	4613      	mov	r3, r2
 8007b40:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007b48:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007b54:	2300      	movs	r3, #0
 8007b56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	781a      	ldrb	r2, [r3, #0]
 8007b68:	6a3b      	ldr	r3, [r7, #32]
 8007b6a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	785a      	ldrb	r2, [r3, #1]
 8007b70:	6a3b      	ldr	r3, [r7, #32]
 8007b72:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	3302      	adds	r3, #2
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	3303      	adds	r3, #3
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	021b      	lsls	r3, r3, #8
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b90:	bf28      	it	cs
 8007b92:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	6a3b      	ldr	r3, [r7, #32]
 8007b9a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	791a      	ldrb	r2, [r3, #4]
 8007ba0:	6a3b      	ldr	r3, [r7, #32]
 8007ba2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	795a      	ldrb	r2, [r3, #5]
 8007ba8:	6a3b      	ldr	r3, [r7, #32]
 8007baa:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	799a      	ldrb	r2, [r3, #6]
 8007bb0:	6a3b      	ldr	r3, [r7, #32]
 8007bb2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	79da      	ldrb	r2, [r3, #7]
 8007bb8:	6a3b      	ldr	r3, [r7, #32]
 8007bba:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	7a1a      	ldrb	r2, [r3, #8]
 8007bc0:	6a3b      	ldr	r3, [r7, #32]
 8007bc2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007bc4:	6a3b      	ldr	r3, [r7, #32]
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	2b09      	cmp	r3, #9
 8007bca:	d002      	beq.n	8007bd2 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007bcc:	6a3b      	ldr	r3, [r7, #32]
 8007bce:	2209      	movs	r2, #9
 8007bd0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007bd2:	88fb      	ldrh	r3, [r7, #6]
 8007bd4:	2b09      	cmp	r3, #9
 8007bd6:	f240 809d 	bls.w	8007d14 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007bda:	2309      	movs	r3, #9
 8007bdc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007bde:	2300      	movs	r3, #0
 8007be0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007be2:	e081      	b.n	8007ce8 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007be4:	f107 0316 	add.w	r3, r7, #22
 8007be8:	4619      	mov	r1, r3
 8007bea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bec:	f000 f99f 	bl	8007f2e <USBH_GetNextDesc>
 8007bf0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf4:	785b      	ldrb	r3, [r3, #1]
 8007bf6:	2b04      	cmp	r3, #4
 8007bf8:	d176      	bne.n	8007ce8 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	2b09      	cmp	r3, #9
 8007c00:	d002      	beq.n	8007c08 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c04:	2209      	movs	r2, #9
 8007c06:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007c08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c0c:	221a      	movs	r2, #26
 8007c0e:	fb02 f303 	mul.w	r3, r2, r3
 8007c12:	3308      	adds	r3, #8
 8007c14:	6a3a      	ldr	r2, [r7, #32]
 8007c16:	4413      	add	r3, r2
 8007c18:	3302      	adds	r3, #2
 8007c1a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007c1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c1e:	69f8      	ldr	r0, [r7, #28]
 8007c20:	f000 f87e 	bl	8007d20 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007c24:	2300      	movs	r3, #0
 8007c26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007c2e:	e043      	b.n	8007cb8 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007c30:	f107 0316 	add.w	r3, r7, #22
 8007c34:	4619      	mov	r1, r3
 8007c36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c38:	f000 f979 	bl	8007f2e <USBH_GetNextDesc>
 8007c3c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c40:	785b      	ldrb	r3, [r3, #1]
 8007c42:	2b05      	cmp	r3, #5
 8007c44:	d138      	bne.n	8007cb8 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	795b      	ldrb	r3, [r3, #5]
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d10f      	bne.n	8007c6e <USBH_ParseCfgDesc+0x13a>
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	799b      	ldrb	r3, [r3, #6]
 8007c52:	2b02      	cmp	r3, #2
 8007c54:	d10b      	bne.n	8007c6e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	79db      	ldrb	r3, [r3, #7]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d10f      	bne.n	8007c7e <USBH_ParseCfgDesc+0x14a>
 8007c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	2b09      	cmp	r3, #9
 8007c64:	d00b      	beq.n	8007c7e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c68:	2209      	movs	r2, #9
 8007c6a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007c6c:	e007      	b.n	8007c7e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	2b07      	cmp	r3, #7
 8007c74:	d004      	beq.n	8007c80 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c78:	2207      	movs	r2, #7
 8007c7a:	701a      	strb	r2, [r3, #0]
 8007c7c:	e000      	b.n	8007c80 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007c7e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007c80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c84:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007c88:	3201      	adds	r2, #1
 8007c8a:	00d2      	lsls	r2, r2, #3
 8007c8c:	211a      	movs	r1, #26
 8007c8e:	fb01 f303 	mul.w	r3, r1, r3
 8007c92:	4413      	add	r3, r2
 8007c94:	3308      	adds	r3, #8
 8007c96:	6a3a      	ldr	r2, [r7, #32]
 8007c98:	4413      	add	r3, r2
 8007c9a:	3304      	adds	r3, #4
 8007c9c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007c9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ca0:	69b9      	ldr	r1, [r7, #24]
 8007ca2:	68f8      	ldr	r0, [r7, #12]
 8007ca4:	f000 f86b 	bl	8007d7e <USBH_ParseEPDesc>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007cae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	791b      	ldrb	r3, [r3, #4]
 8007cbc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d204      	bcs.n	8007cce <USBH_ParseCfgDesc+0x19a>
 8007cc4:	6a3b      	ldr	r3, [r7, #32]
 8007cc6:	885a      	ldrh	r2, [r3, #2]
 8007cc8:	8afb      	ldrh	r3, [r7, #22]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d8b0      	bhi.n	8007c30 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	791b      	ldrb	r3, [r3, #4]
 8007cd2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d201      	bcs.n	8007cde <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	e01c      	b.n	8007d18 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007cde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d805      	bhi.n	8007cfc <USBH_ParseCfgDesc+0x1c8>
 8007cf0:	6a3b      	ldr	r3, [r7, #32]
 8007cf2:	885a      	ldrh	r2, [r3, #2]
 8007cf4:	8afb      	ldrh	r3, [r7, #22]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	f63f af74 	bhi.w	8007be4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007cfc:	6a3b      	ldr	r3, [r7, #32]
 8007cfe:	791b      	ldrb	r3, [r3, #4]
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	bf28      	it	cs
 8007d04:	2302      	movcs	r3, #2
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d201      	bcs.n	8007d14 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007d10:	2303      	movs	r3, #3
 8007d12:	e001      	b.n	8007d18 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007d14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3730      	adds	r7, #48	; 0x30
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	781a      	ldrb	r2, [r3, #0]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	785a      	ldrb	r2, [r3, #1]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	789a      	ldrb	r2, [r3, #2]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	78da      	ldrb	r2, [r3, #3]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	791a      	ldrb	r2, [r3, #4]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	795a      	ldrb	r2, [r3, #5]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	799a      	ldrb	r2, [r3, #6]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	79da      	ldrb	r2, [r3, #7]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	7a1a      	ldrb	r2, [r3, #8]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	721a      	strb	r2, [r3, #8]
}
 8007d72:	bf00      	nop
 8007d74:	370c      	adds	r7, #12
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr

08007d7e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007d7e:	b480      	push	{r7}
 8007d80:	b087      	sub	sp, #28
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	60f8      	str	r0, [r7, #12]
 8007d86:	60b9      	str	r1, [r7, #8]
 8007d88:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	781a      	ldrb	r2, [r3, #0]
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	785a      	ldrb	r2, [r3, #1]
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	789a      	ldrb	r2, [r3, #2]
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	78da      	ldrb	r2, [r3, #3]
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	3304      	adds	r3, #4
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	3305      	adds	r3, #5
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	021b      	lsls	r3, r3, #8
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	b29a      	uxth	r2, r3
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	799a      	ldrb	r2, [r3, #6]
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	889b      	ldrh	r3, [r3, #4]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d102      	bne.n	8007de0 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	75fb      	strb	r3, [r7, #23]
 8007dde:	e033      	b.n	8007e48 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	889b      	ldrh	r3, [r3, #4]
 8007de4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007de8:	f023 0307 	bic.w	r3, r3, #7
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	889b      	ldrh	r3, [r3, #4]
 8007df6:	b21a      	sxth	r2, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	3304      	adds	r3, #4
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	b299      	uxth	r1, r3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	3305      	adds	r3, #5
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	021b      	lsls	r3, r3, #8
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	430b      	orrs	r3, r1
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d110      	bne.n	8007e3a <USBH_ParseEPDesc+0xbc>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	3304      	adds	r3, #4
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	b299      	uxth	r1, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	3305      	adds	r3, #5
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	021b      	lsls	r3, r3, #8
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	430b      	orrs	r3, r1
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	b21b      	sxth	r3, r3
 8007e32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e36:	b21b      	sxth	r3, r3
 8007e38:	e001      	b.n	8007e3e <USBH_ParseEPDesc+0xc0>
 8007e3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	b21b      	sxth	r3, r3
 8007e42:	b29a      	uxth	r2, r3
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d116      	bne.n	8007e80 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	78db      	ldrb	r3, [r3, #3]
 8007e56:	f003 0303 	and.w	r3, r3, #3
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d005      	beq.n	8007e6a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	78db      	ldrb	r3, [r3, #3]
 8007e62:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007e66:	2b03      	cmp	r3, #3
 8007e68:	d127      	bne.n	8007eba <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	799b      	ldrb	r3, [r3, #6]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d003      	beq.n	8007e7a <USBH_ParseEPDesc+0xfc>
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	799b      	ldrb	r3, [r3, #6]
 8007e76:	2b10      	cmp	r3, #16
 8007e78:	d91f      	bls.n	8007eba <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	75fb      	strb	r3, [r7, #23]
 8007e7e:	e01c      	b.n	8007eba <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	78db      	ldrb	r3, [r3, #3]
 8007e84:	f003 0303 	and.w	r3, r3, #3
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d10a      	bne.n	8007ea2 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	799b      	ldrb	r3, [r3, #6]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d003      	beq.n	8007e9c <USBH_ParseEPDesc+0x11e>
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	799b      	ldrb	r3, [r3, #6]
 8007e98:	2b10      	cmp	r3, #16
 8007e9a:	d90e      	bls.n	8007eba <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007e9c:	2303      	movs	r3, #3
 8007e9e:	75fb      	strb	r3, [r7, #23]
 8007ea0:	e00b      	b.n	8007eba <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	78db      	ldrb	r3, [r3, #3]
 8007ea6:	f003 0303 	and.w	r3, r3, #3
 8007eaa:	2b03      	cmp	r3, #3
 8007eac:	d105      	bne.n	8007eba <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	799b      	ldrb	r3, [r3, #6]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d101      	bne.n	8007eba <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007eb6:	2303      	movs	r3, #3
 8007eb8:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	371c      	adds	r7, #28
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b087      	sub	sp, #28
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	3301      	adds	r3, #1
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	2b03      	cmp	r3, #3
 8007ede:	d120      	bne.n	8007f22 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	1e9a      	subs	r2, r3, #2
 8007ee6:	88fb      	ldrh	r3, [r7, #6]
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	bf28      	it	cs
 8007eec:	4613      	movcs	r3, r2
 8007eee:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	3302      	adds	r3, #2
 8007ef4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	82fb      	strh	r3, [r7, #22]
 8007efa:	e00b      	b.n	8007f14 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007efc:	8afb      	ldrh	r3, [r7, #22]
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	4413      	add	r3, r2
 8007f02:	781a      	ldrb	r2, [r3, #0]
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007f0e:	8afb      	ldrh	r3, [r7, #22]
 8007f10:	3302      	adds	r3, #2
 8007f12:	82fb      	strh	r3, [r7, #22]
 8007f14:	8afa      	ldrh	r2, [r7, #22]
 8007f16:	8abb      	ldrh	r3, [r7, #20]
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d3ef      	bcc.n	8007efc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	701a      	strb	r2, [r3, #0]
  }
}
 8007f22:	bf00      	nop
 8007f24:	371c      	adds	r7, #28
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr

08007f2e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007f2e:	b480      	push	{r7}
 8007f30:	b085      	sub	sp, #20
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
 8007f36:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	881a      	ldrh	r2, [r3, #0]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	4413      	add	r3, r2
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	4413      	add	r3, r2
 8007f54:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007f56:	68fb      	ldr	r3, [r7, #12]
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3714      	adds	r7, #20
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b086      	sub	sp, #24
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	4613      	mov	r3, r2
 8007f70:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007f72:	2301      	movs	r3, #1
 8007f74:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	789b      	ldrb	r3, [r3, #2]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d002      	beq.n	8007f84 <USBH_CtlReq+0x20>
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d00f      	beq.n	8007fa2 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007f82:	e027      	b.n	8007fd4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	68ba      	ldr	r2, [r7, #8]
 8007f88:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	88fa      	ldrh	r2, [r7, #6]
 8007f8e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2201      	movs	r2, #1
 8007f94:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2202      	movs	r2, #2
 8007f9a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	75fb      	strb	r3, [r7, #23]
      break;
 8007fa0:	e018      	b.n	8007fd4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	f000 f81c 	bl	8007fe0 <USBH_HandleControl>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007fac:	7dfb      	ldrb	r3, [r7, #23]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d002      	beq.n	8007fb8 <USBH_CtlReq+0x54>
 8007fb2:	7dfb      	ldrb	r3, [r7, #23]
 8007fb4:	2b03      	cmp	r3, #3
 8007fb6:	d106      	bne.n	8007fc6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	761a      	strb	r2, [r3, #24]
      break;
 8007fc4:	e005      	b.n	8007fd2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007fc6:	7dfb      	ldrb	r3, [r7, #23]
 8007fc8:	2b02      	cmp	r3, #2
 8007fca:	d102      	bne.n	8007fd2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	709a      	strb	r2, [r3, #2]
      break;
 8007fd2:	bf00      	nop
  }
  return status;
 8007fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3718      	adds	r7, #24
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
	...

08007fe0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b086      	sub	sp, #24
 8007fe4:	af02      	add	r7, sp, #8
 8007fe6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007fec:	2300      	movs	r3, #0
 8007fee:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	7e1b      	ldrb	r3, [r3, #24]
 8007ff4:	3b01      	subs	r3, #1
 8007ff6:	2b0a      	cmp	r3, #10
 8007ff8:	f200 8156 	bhi.w	80082a8 <USBH_HandleControl+0x2c8>
 8007ffc:	a201      	add	r2, pc, #4	; (adr r2, 8008004 <USBH_HandleControl+0x24>)
 8007ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008002:	bf00      	nop
 8008004:	08008031 	.word	0x08008031
 8008008:	0800804b 	.word	0x0800804b
 800800c:	080080b5 	.word	0x080080b5
 8008010:	080080db 	.word	0x080080db
 8008014:	08008113 	.word	0x08008113
 8008018:	0800813d 	.word	0x0800813d
 800801c:	0800818f 	.word	0x0800818f
 8008020:	080081b1 	.word	0x080081b1
 8008024:	080081ed 	.word	0x080081ed
 8008028:	08008213 	.word	0x08008213
 800802c:	08008251 	.word	0x08008251
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f103 0110 	add.w	r1, r3, #16
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	795b      	ldrb	r3, [r3, #5]
 800803a:	461a      	mov	r2, r3
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 f943 	bl	80082c8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2202      	movs	r2, #2
 8008046:	761a      	strb	r2, [r3, #24]
      break;
 8008048:	e139      	b.n	80082be <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	795b      	ldrb	r3, [r3, #5]
 800804e:	4619      	mov	r1, r3
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 fcc5 	bl	80089e0 <USBH_LL_GetURBState>
 8008056:	4603      	mov	r3, r0
 8008058:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800805a:	7bbb      	ldrb	r3, [r7, #14]
 800805c:	2b01      	cmp	r3, #1
 800805e:	d11e      	bne.n	800809e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	7c1b      	ldrb	r3, [r3, #16]
 8008064:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008068:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	8adb      	ldrh	r3, [r3, #22]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00a      	beq.n	8008088 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008072:	7b7b      	ldrb	r3, [r7, #13]
 8008074:	2b80      	cmp	r3, #128	; 0x80
 8008076:	d103      	bne.n	8008080 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2203      	movs	r2, #3
 800807c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800807e:	e115      	b.n	80082ac <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2205      	movs	r2, #5
 8008084:	761a      	strb	r2, [r3, #24]
      break;
 8008086:	e111      	b.n	80082ac <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008088:	7b7b      	ldrb	r3, [r7, #13]
 800808a:	2b80      	cmp	r3, #128	; 0x80
 800808c:	d103      	bne.n	8008096 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2209      	movs	r2, #9
 8008092:	761a      	strb	r2, [r3, #24]
      break;
 8008094:	e10a      	b.n	80082ac <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2207      	movs	r2, #7
 800809a:	761a      	strb	r2, [r3, #24]
      break;
 800809c:	e106      	b.n	80082ac <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800809e:	7bbb      	ldrb	r3, [r7, #14]
 80080a0:	2b04      	cmp	r3, #4
 80080a2:	d003      	beq.n	80080ac <USBH_HandleControl+0xcc>
 80080a4:	7bbb      	ldrb	r3, [r7, #14]
 80080a6:	2b02      	cmp	r3, #2
 80080a8:	f040 8100 	bne.w	80082ac <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	220b      	movs	r2, #11
 80080b0:	761a      	strb	r2, [r3, #24]
      break;
 80080b2:	e0fb      	b.n	80082ac <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080ba:	b29a      	uxth	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6899      	ldr	r1, [r3, #8]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	899a      	ldrh	r2, [r3, #12]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	791b      	ldrb	r3, [r3, #4]
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 f93a 	bl	8008346 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2204      	movs	r2, #4
 80080d6:	761a      	strb	r2, [r3, #24]
      break;
 80080d8:	e0f1      	b.n	80082be <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	791b      	ldrb	r3, [r3, #4]
 80080de:	4619      	mov	r1, r3
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 fc7d 	bl	80089e0 <USBH_LL_GetURBState>
 80080e6:	4603      	mov	r3, r0
 80080e8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80080ea:	7bbb      	ldrb	r3, [r7, #14]
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d102      	bne.n	80080f6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2209      	movs	r2, #9
 80080f4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80080f6:	7bbb      	ldrb	r3, [r7, #14]
 80080f8:	2b05      	cmp	r3, #5
 80080fa:	d102      	bne.n	8008102 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80080fc:	2303      	movs	r3, #3
 80080fe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008100:	e0d6      	b.n	80082b0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008102:	7bbb      	ldrb	r3, [r7, #14]
 8008104:	2b04      	cmp	r3, #4
 8008106:	f040 80d3 	bne.w	80082b0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	220b      	movs	r2, #11
 800810e:	761a      	strb	r2, [r3, #24]
      break;
 8008110:	e0ce      	b.n	80082b0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6899      	ldr	r1, [r3, #8]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	899a      	ldrh	r2, [r3, #12]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	795b      	ldrb	r3, [r3, #5]
 800811e:	2001      	movs	r0, #1
 8008120:	9000      	str	r0, [sp, #0]
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 f8ea 	bl	80082fc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800812e:	b29a      	uxth	r2, r3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2206      	movs	r2, #6
 8008138:	761a      	strb	r2, [r3, #24]
      break;
 800813a:	e0c0      	b.n	80082be <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	795b      	ldrb	r3, [r3, #5]
 8008140:	4619      	mov	r1, r3
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 fc4c 	bl	80089e0 <USBH_LL_GetURBState>
 8008148:	4603      	mov	r3, r0
 800814a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800814c:	7bbb      	ldrb	r3, [r7, #14]
 800814e:	2b01      	cmp	r3, #1
 8008150:	d103      	bne.n	800815a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2207      	movs	r2, #7
 8008156:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008158:	e0ac      	b.n	80082b4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800815a:	7bbb      	ldrb	r3, [r7, #14]
 800815c:	2b05      	cmp	r3, #5
 800815e:	d105      	bne.n	800816c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	220c      	movs	r2, #12
 8008164:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008166:	2303      	movs	r3, #3
 8008168:	73fb      	strb	r3, [r7, #15]
      break;
 800816a:	e0a3      	b.n	80082b4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800816c:	7bbb      	ldrb	r3, [r7, #14]
 800816e:	2b02      	cmp	r3, #2
 8008170:	d103      	bne.n	800817a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2205      	movs	r2, #5
 8008176:	761a      	strb	r2, [r3, #24]
      break;
 8008178:	e09c      	b.n	80082b4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800817a:	7bbb      	ldrb	r3, [r7, #14]
 800817c:	2b04      	cmp	r3, #4
 800817e:	f040 8099 	bne.w	80082b4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	220b      	movs	r2, #11
 8008186:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008188:	2302      	movs	r3, #2
 800818a:	73fb      	strb	r3, [r7, #15]
      break;
 800818c:	e092      	b.n	80082b4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	791b      	ldrb	r3, [r3, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	2100      	movs	r1, #0
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 f8d5 	bl	8008346 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80081a2:	b29a      	uxth	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2208      	movs	r2, #8
 80081ac:	761a      	strb	r2, [r3, #24]

      break;
 80081ae:	e086      	b.n	80082be <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	791b      	ldrb	r3, [r3, #4]
 80081b4:	4619      	mov	r1, r3
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 fc12 	bl	80089e0 <USBH_LL_GetURBState>
 80081bc:	4603      	mov	r3, r0
 80081be:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80081c0:	7bbb      	ldrb	r3, [r7, #14]
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d105      	bne.n	80081d2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	220d      	movs	r2, #13
 80081ca:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80081cc:	2300      	movs	r3, #0
 80081ce:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80081d0:	e072      	b.n	80082b8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80081d2:	7bbb      	ldrb	r3, [r7, #14]
 80081d4:	2b04      	cmp	r3, #4
 80081d6:	d103      	bne.n	80081e0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	220b      	movs	r2, #11
 80081dc:	761a      	strb	r2, [r3, #24]
      break;
 80081de:	e06b      	b.n	80082b8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80081e0:	7bbb      	ldrb	r3, [r7, #14]
 80081e2:	2b05      	cmp	r3, #5
 80081e4:	d168      	bne.n	80082b8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80081e6:	2303      	movs	r3, #3
 80081e8:	73fb      	strb	r3, [r7, #15]
      break;
 80081ea:	e065      	b.n	80082b8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	795b      	ldrb	r3, [r3, #5]
 80081f0:	2201      	movs	r2, #1
 80081f2:	9200      	str	r2, [sp, #0]
 80081f4:	2200      	movs	r2, #0
 80081f6:	2100      	movs	r1, #0
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 f87f 	bl	80082fc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008204:	b29a      	uxth	r2, r3
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	220a      	movs	r2, #10
 800820e:	761a      	strb	r2, [r3, #24]
      break;
 8008210:	e055      	b.n	80082be <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	795b      	ldrb	r3, [r3, #5]
 8008216:	4619      	mov	r1, r3
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 fbe1 	bl	80089e0 <USBH_LL_GetURBState>
 800821e:	4603      	mov	r3, r0
 8008220:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008222:	7bbb      	ldrb	r3, [r7, #14]
 8008224:	2b01      	cmp	r3, #1
 8008226:	d105      	bne.n	8008234 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008228:	2300      	movs	r3, #0
 800822a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	220d      	movs	r2, #13
 8008230:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008232:	e043      	b.n	80082bc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008234:	7bbb      	ldrb	r3, [r7, #14]
 8008236:	2b02      	cmp	r3, #2
 8008238:	d103      	bne.n	8008242 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2209      	movs	r2, #9
 800823e:	761a      	strb	r2, [r3, #24]
      break;
 8008240:	e03c      	b.n	80082bc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008242:	7bbb      	ldrb	r3, [r7, #14]
 8008244:	2b04      	cmp	r3, #4
 8008246:	d139      	bne.n	80082bc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	220b      	movs	r2, #11
 800824c:	761a      	strb	r2, [r3, #24]
      break;
 800824e:	e035      	b.n	80082bc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	7e5b      	ldrb	r3, [r3, #25]
 8008254:	3301      	adds	r3, #1
 8008256:	b2da      	uxtb	r2, r3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	765a      	strb	r2, [r3, #25]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	7e5b      	ldrb	r3, [r3, #25]
 8008260:	2b02      	cmp	r3, #2
 8008262:	d806      	bhi.n	8008272 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2201      	movs	r2, #1
 800826e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008270:	e025      	b.n	80082be <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008278:	2106      	movs	r1, #6
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	795b      	ldrb	r3, [r3, #5]
 8008288:	4619      	mov	r1, r3
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f90c 	bl	80084a8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	791b      	ldrb	r3, [r3, #4]
 8008294:	4619      	mov	r1, r3
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 f906 	bl	80084a8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80082a2:	2302      	movs	r3, #2
 80082a4:	73fb      	strb	r3, [r7, #15]
      break;
 80082a6:	e00a      	b.n	80082be <USBH_HandleControl+0x2de>

    default:
      break;
 80082a8:	bf00      	nop
 80082aa:	e008      	b.n	80082be <USBH_HandleControl+0x2de>
      break;
 80082ac:	bf00      	nop
 80082ae:	e006      	b.n	80082be <USBH_HandleControl+0x2de>
      break;
 80082b0:	bf00      	nop
 80082b2:	e004      	b.n	80082be <USBH_HandleControl+0x2de>
      break;
 80082b4:	bf00      	nop
 80082b6:	e002      	b.n	80082be <USBH_HandleControl+0x2de>
      break;
 80082b8:	bf00      	nop
 80082ba:	e000      	b.n	80082be <USBH_HandleControl+0x2de>
      break;
 80082bc:	bf00      	nop
  }

  return status;
 80082be:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b088      	sub	sp, #32
 80082cc:	af04      	add	r7, sp, #16
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	4613      	mov	r3, r2
 80082d4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80082d6:	79f9      	ldrb	r1, [r7, #7]
 80082d8:	2300      	movs	r3, #0
 80082da:	9303      	str	r3, [sp, #12]
 80082dc:	2308      	movs	r3, #8
 80082de:	9302      	str	r3, [sp, #8]
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	9301      	str	r3, [sp, #4]
 80082e4:	2300      	movs	r3, #0
 80082e6:	9300      	str	r3, [sp, #0]
 80082e8:	2300      	movs	r3, #0
 80082ea:	2200      	movs	r2, #0
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f000 fb46 	bl	800897e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3710      	adds	r7, #16
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b088      	sub	sp, #32
 8008300:	af04      	add	r7, sp, #16
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	4611      	mov	r1, r2
 8008308:	461a      	mov	r2, r3
 800830a:	460b      	mov	r3, r1
 800830c:	80fb      	strh	r3, [r7, #6]
 800830e:	4613      	mov	r3, r2
 8008310:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008318:	2b00      	cmp	r3, #0
 800831a:	d001      	beq.n	8008320 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800831c:	2300      	movs	r3, #0
 800831e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008320:	7979      	ldrb	r1, [r7, #5]
 8008322:	7e3b      	ldrb	r3, [r7, #24]
 8008324:	9303      	str	r3, [sp, #12]
 8008326:	88fb      	ldrh	r3, [r7, #6]
 8008328:	9302      	str	r3, [sp, #8]
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	9301      	str	r3, [sp, #4]
 800832e:	2301      	movs	r3, #1
 8008330:	9300      	str	r3, [sp, #0]
 8008332:	2300      	movs	r3, #0
 8008334:	2200      	movs	r2, #0
 8008336:	68f8      	ldr	r0, [r7, #12]
 8008338:	f000 fb21 	bl	800897e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b088      	sub	sp, #32
 800834a:	af04      	add	r7, sp, #16
 800834c:	60f8      	str	r0, [r7, #12]
 800834e:	60b9      	str	r1, [r7, #8]
 8008350:	4611      	mov	r1, r2
 8008352:	461a      	mov	r2, r3
 8008354:	460b      	mov	r3, r1
 8008356:	80fb      	strh	r3, [r7, #6]
 8008358:	4613      	mov	r3, r2
 800835a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800835c:	7979      	ldrb	r1, [r7, #5]
 800835e:	2300      	movs	r3, #0
 8008360:	9303      	str	r3, [sp, #12]
 8008362:	88fb      	ldrh	r3, [r7, #6]
 8008364:	9302      	str	r3, [sp, #8]
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	9301      	str	r3, [sp, #4]
 800836a:	2301      	movs	r3, #1
 800836c:	9300      	str	r3, [sp, #0]
 800836e:	2300      	movs	r3, #0
 8008370:	2201      	movs	r2, #1
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	f000 fb03 	bl	800897e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008378:	2300      	movs	r3, #0

}
 800837a:	4618      	mov	r0, r3
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008382:	b580      	push	{r7, lr}
 8008384:	b088      	sub	sp, #32
 8008386:	af04      	add	r7, sp, #16
 8008388:	60f8      	str	r0, [r7, #12]
 800838a:	60b9      	str	r1, [r7, #8]
 800838c:	4611      	mov	r1, r2
 800838e:	461a      	mov	r2, r3
 8008390:	460b      	mov	r3, r1
 8008392:	80fb      	strh	r3, [r7, #6]
 8008394:	4613      	mov	r3, r2
 8008396:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d001      	beq.n	80083a6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80083a2:	2300      	movs	r3, #0
 80083a4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80083a6:	7979      	ldrb	r1, [r7, #5]
 80083a8:	7e3b      	ldrb	r3, [r7, #24]
 80083aa:	9303      	str	r3, [sp, #12]
 80083ac:	88fb      	ldrh	r3, [r7, #6]
 80083ae:	9302      	str	r3, [sp, #8]
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	9301      	str	r3, [sp, #4]
 80083b4:	2301      	movs	r3, #1
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	2302      	movs	r3, #2
 80083ba:	2200      	movs	r2, #0
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f000 fade 	bl	800897e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3710      	adds	r7, #16
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b088      	sub	sp, #32
 80083d0:	af04      	add	r7, sp, #16
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	4611      	mov	r1, r2
 80083d8:	461a      	mov	r2, r3
 80083da:	460b      	mov	r3, r1
 80083dc:	80fb      	strh	r3, [r7, #6]
 80083de:	4613      	mov	r3, r2
 80083e0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80083e2:	7979      	ldrb	r1, [r7, #5]
 80083e4:	2300      	movs	r3, #0
 80083e6:	9303      	str	r3, [sp, #12]
 80083e8:	88fb      	ldrh	r3, [r7, #6]
 80083ea:	9302      	str	r3, [sp, #8]
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	9301      	str	r3, [sp, #4]
 80083f0:	2301      	movs	r3, #1
 80083f2:	9300      	str	r3, [sp, #0]
 80083f4:	2302      	movs	r3, #2
 80083f6:	2201      	movs	r2, #1
 80083f8:	68f8      	ldr	r0, [r7, #12]
 80083fa:	f000 fac0 	bl	800897e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80083fe:	2300      	movs	r3, #0
}
 8008400:	4618      	mov	r0, r3
 8008402:	3710      	adds	r7, #16
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b086      	sub	sp, #24
 800840c:	af04      	add	r7, sp, #16
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	4608      	mov	r0, r1
 8008412:	4611      	mov	r1, r2
 8008414:	461a      	mov	r2, r3
 8008416:	4603      	mov	r3, r0
 8008418:	70fb      	strb	r3, [r7, #3]
 800841a:	460b      	mov	r3, r1
 800841c:	70bb      	strb	r3, [r7, #2]
 800841e:	4613      	mov	r3, r2
 8008420:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008422:	7878      	ldrb	r0, [r7, #1]
 8008424:	78ba      	ldrb	r2, [r7, #2]
 8008426:	78f9      	ldrb	r1, [r7, #3]
 8008428:	8b3b      	ldrh	r3, [r7, #24]
 800842a:	9302      	str	r3, [sp, #8]
 800842c:	7d3b      	ldrb	r3, [r7, #20]
 800842e:	9301      	str	r3, [sp, #4]
 8008430:	7c3b      	ldrb	r3, [r7, #16]
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	4603      	mov	r3, r0
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 fa53 	bl	80088e2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	3708      	adds	r7, #8
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}

08008446 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b082      	sub	sp, #8
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
 800844e:	460b      	mov	r3, r1
 8008450:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008452:	78fb      	ldrb	r3, [r7, #3]
 8008454:	4619      	mov	r1, r3
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 fa72 	bl	8008940 <USBH_LL_ClosePipe>

  return USBH_OK;
 800845c:	2300      	movs	r3, #0
}
 800845e:	4618      	mov	r0, r3
 8008460:	3708      	adds	r7, #8
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008466:	b580      	push	{r7, lr}
 8008468:	b084      	sub	sp, #16
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
 800846e:	460b      	mov	r3, r1
 8008470:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 f836 	bl	80084e4 <USBH_GetFreePipe>
 8008478:	4603      	mov	r3, r0
 800847a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800847c:	89fb      	ldrh	r3, [r7, #14]
 800847e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008482:	4293      	cmp	r3, r2
 8008484:	d00a      	beq.n	800849c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008486:	78fa      	ldrb	r2, [r7, #3]
 8008488:	89fb      	ldrh	r3, [r7, #14]
 800848a:	f003 030f 	and.w	r3, r3, #15
 800848e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008492:	6879      	ldr	r1, [r7, #4]
 8008494:	33e0      	adds	r3, #224	; 0xe0
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	440b      	add	r3, r1
 800849a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800849c:	89fb      	ldrh	r3, [r7, #14]
 800849e:	b2db      	uxtb	r3, r3
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	460b      	mov	r3, r1
 80084b2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80084b4:	78fb      	ldrb	r3, [r7, #3]
 80084b6:	2b0f      	cmp	r3, #15
 80084b8:	d80d      	bhi.n	80084d6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80084ba:	78fb      	ldrb	r3, [r7, #3]
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	33e0      	adds	r3, #224	; 0xe0
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4413      	add	r3, r2
 80084c4:	685a      	ldr	r2, [r3, #4]
 80084c6:	78fb      	ldrb	r3, [r7, #3]
 80084c8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80084cc:	6879      	ldr	r1, [r7, #4]
 80084ce:	33e0      	adds	r3, #224	; 0xe0
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	440b      	add	r3, r1
 80084d4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b085      	sub	sp, #20
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80084ec:	2300      	movs	r3, #0
 80084ee:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80084f0:	2300      	movs	r3, #0
 80084f2:	73fb      	strb	r3, [r7, #15]
 80084f4:	e00f      	b.n	8008516 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80084f6:	7bfb      	ldrb	r3, [r7, #15]
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	33e0      	adds	r3, #224	; 0xe0
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	4413      	add	r3, r2
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008506:	2b00      	cmp	r3, #0
 8008508:	d102      	bne.n	8008510 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800850a:	7bfb      	ldrb	r3, [r7, #15]
 800850c:	b29b      	uxth	r3, r3
 800850e:	e007      	b.n	8008520 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008510:	7bfb      	ldrb	r3, [r7, #15]
 8008512:	3301      	adds	r3, #1
 8008514:	73fb      	strb	r3, [r7, #15]
 8008516:	7bfb      	ldrb	r3, [r7, #15]
 8008518:	2b0f      	cmp	r3, #15
 800851a:	d9ec      	bls.n	80084f6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800851c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008520:	4618      	mov	r0, r3
 8008522:	3714      	adds	r7, #20
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008530:	2201      	movs	r2, #1
 8008532:	490e      	ldr	r1, [pc, #56]	; (800856c <MX_USB_HOST_Init+0x40>)
 8008534:	480e      	ldr	r0, [pc, #56]	; (8008570 <MX_USB_HOST_Init+0x44>)
 8008536:	f7fe fba7 	bl	8006c88 <USBH_Init>
 800853a:	4603      	mov	r3, r0
 800853c:	2b00      	cmp	r3, #0
 800853e:	d001      	beq.n	8008544 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008540:	f7f8 fb92 	bl	8000c68 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008544:	490b      	ldr	r1, [pc, #44]	; (8008574 <MX_USB_HOST_Init+0x48>)
 8008546:	480a      	ldr	r0, [pc, #40]	; (8008570 <MX_USB_HOST_Init+0x44>)
 8008548:	f7fe fc2c 	bl	8006da4 <USBH_RegisterClass>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d001      	beq.n	8008556 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008552:	f7f8 fb89 	bl	8000c68 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008556:	4806      	ldr	r0, [pc, #24]	; (8008570 <MX_USB_HOST_Init+0x44>)
 8008558:	f7fe fcb0 	bl	8006ebc <USBH_Start>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d001      	beq.n	8008566 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008562:	f7f8 fb81 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008566:	bf00      	nop
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	0800858d 	.word	0x0800858d
 8008570:	20000244 	.word	0x20000244
 8008574:	20000010 	.word	0x20000010

08008578 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800857c:	4802      	ldr	r0, [pc, #8]	; (8008588 <MX_USB_HOST_Process+0x10>)
 800857e:	f7fe fcad 	bl	8006edc <USBH_Process>
}
 8008582:	bf00      	nop
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	20000244 	.word	0x20000244

0800858c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	460b      	mov	r3, r1
 8008596:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008598:	78fb      	ldrb	r3, [r7, #3]
 800859a:	3b01      	subs	r3, #1
 800859c:	2b04      	cmp	r3, #4
 800859e:	d819      	bhi.n	80085d4 <USBH_UserProcess+0x48>
 80085a0:	a201      	add	r2, pc, #4	; (adr r2, 80085a8 <USBH_UserProcess+0x1c>)
 80085a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a6:	bf00      	nop
 80085a8:	080085d5 	.word	0x080085d5
 80085ac:	080085c5 	.word	0x080085c5
 80085b0:	080085d5 	.word	0x080085d5
 80085b4:	080085cd 	.word	0x080085cd
 80085b8:	080085bd 	.word	0x080085bd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80085bc:	4b09      	ldr	r3, [pc, #36]	; (80085e4 <USBH_UserProcess+0x58>)
 80085be:	2203      	movs	r2, #3
 80085c0:	701a      	strb	r2, [r3, #0]
  break;
 80085c2:	e008      	b.n	80085d6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80085c4:	4b07      	ldr	r3, [pc, #28]	; (80085e4 <USBH_UserProcess+0x58>)
 80085c6:	2202      	movs	r2, #2
 80085c8:	701a      	strb	r2, [r3, #0]
  break;
 80085ca:	e004      	b.n	80085d6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80085cc:	4b05      	ldr	r3, [pc, #20]	; (80085e4 <USBH_UserProcess+0x58>)
 80085ce:	2201      	movs	r2, #1
 80085d0:	701a      	strb	r2, [r3, #0]
  break;
 80085d2:	e000      	b.n	80085d6 <USBH_UserProcess+0x4a>

  default:
  break;
 80085d4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80085d6:	bf00      	nop
 80085d8:	370c      	adds	r7, #12
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop
 80085e4:	2000061c 	.word	0x2000061c

080085e8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b08a      	sub	sp, #40	; 0x28
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085f0:	f107 0314 	add.w	r3, r7, #20
 80085f4:	2200      	movs	r2, #0
 80085f6:	601a      	str	r2, [r3, #0]
 80085f8:	605a      	str	r2, [r3, #4]
 80085fa:	609a      	str	r2, [r3, #8]
 80085fc:	60da      	str	r2, [r3, #12]
 80085fe:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008608:	d147      	bne.n	800869a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800860a:	2300      	movs	r3, #0
 800860c:	613b      	str	r3, [r7, #16]
 800860e:	4b25      	ldr	r3, [pc, #148]	; (80086a4 <HAL_HCD_MspInit+0xbc>)
 8008610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008612:	4a24      	ldr	r2, [pc, #144]	; (80086a4 <HAL_HCD_MspInit+0xbc>)
 8008614:	f043 0301 	orr.w	r3, r3, #1
 8008618:	6313      	str	r3, [r2, #48]	; 0x30
 800861a:	4b22      	ldr	r3, [pc, #136]	; (80086a4 <HAL_HCD_MspInit+0xbc>)
 800861c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800861e:	f003 0301 	and.w	r3, r3, #1
 8008622:	613b      	str	r3, [r7, #16]
 8008624:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008626:	f44f 7300 	mov.w	r3, #512	; 0x200
 800862a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800862c:	2300      	movs	r3, #0
 800862e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008630:	2300      	movs	r3, #0
 8008632:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008634:	f107 0314 	add.w	r3, r7, #20
 8008638:	4619      	mov	r1, r3
 800863a:	481b      	ldr	r0, [pc, #108]	; (80086a8 <HAL_HCD_MspInit+0xc0>)
 800863c:	f7f8 ff84 	bl	8001548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008640:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008646:	2302      	movs	r3, #2
 8008648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800864a:	2300      	movs	r3, #0
 800864c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800864e:	2303      	movs	r3, #3
 8008650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008652:	230a      	movs	r3, #10
 8008654:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008656:	f107 0314 	add.w	r3, r7, #20
 800865a:	4619      	mov	r1, r3
 800865c:	4812      	ldr	r0, [pc, #72]	; (80086a8 <HAL_HCD_MspInit+0xc0>)
 800865e:	f7f8 ff73 	bl	8001548 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008662:	4b10      	ldr	r3, [pc, #64]	; (80086a4 <HAL_HCD_MspInit+0xbc>)
 8008664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008666:	4a0f      	ldr	r2, [pc, #60]	; (80086a4 <HAL_HCD_MspInit+0xbc>)
 8008668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800866c:	6353      	str	r3, [r2, #52]	; 0x34
 800866e:	2300      	movs	r3, #0
 8008670:	60fb      	str	r3, [r7, #12]
 8008672:	4b0c      	ldr	r3, [pc, #48]	; (80086a4 <HAL_HCD_MspInit+0xbc>)
 8008674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008676:	4a0b      	ldr	r2, [pc, #44]	; (80086a4 <HAL_HCD_MspInit+0xbc>)
 8008678:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800867c:	6453      	str	r3, [r2, #68]	; 0x44
 800867e:	4b09      	ldr	r3, [pc, #36]	; (80086a4 <HAL_HCD_MspInit+0xbc>)
 8008680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008686:	60fb      	str	r3, [r7, #12]
 8008688:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800868a:	2200      	movs	r2, #0
 800868c:	2100      	movs	r1, #0
 800868e:	2043      	movs	r0, #67	; 0x43
 8008690:	f7f8 ff15 	bl	80014be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008694:	2043      	movs	r0, #67	; 0x43
 8008696:	f7f8 ff2e 	bl	80014f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800869a:	bf00      	nop
 800869c:	3728      	adds	r7, #40	; 0x28
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	40023800 	.word	0x40023800
 80086a8:	40020000 	.word	0x40020000

080086ac <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7fe ffed 	bl	800769a <USBH_LL_IncTimer>
}
 80086c0:	bf00      	nop
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7ff f825 	bl	8007726 <USBH_LL_Connect>
}
 80086dc:	bf00      	nop
 80086de:	3708      	adds	r7, #8
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7ff f82e 	bl	8007754 <USBH_LL_Disconnect>
}
 80086f8:	bf00      	nop
 80086fa:	3708      	adds	r7, #8
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	460b      	mov	r3, r1
 800870a:	70fb      	strb	r3, [r7, #3]
 800870c:	4613      	mov	r3, r2
 800870e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008710:	bf00      	nop
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800872a:	4618      	mov	r0, r3
 800872c:	f7fe ffdf 	bl	80076ee <USBH_LL_PortEnabled>
}
 8008730:	bf00      	nop
 8008732:	3708      	adds	r7, #8
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008746:	4618      	mov	r0, r3
 8008748:	f7fe ffdf 	bl	800770a <USBH_LL_PortDisabled>
}
 800874c:	bf00      	nop
 800874e:	3708      	adds	r7, #8
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008762:	2b01      	cmp	r3, #1
 8008764:	d12a      	bne.n	80087bc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008766:	4a18      	ldr	r2, [pc, #96]	; (80087c8 <USBH_LL_Init+0x74>)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4a15      	ldr	r2, [pc, #84]	; (80087c8 <USBH_LL_Init+0x74>)
 8008772:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008776:	4b14      	ldr	r3, [pc, #80]	; (80087c8 <USBH_LL_Init+0x74>)
 8008778:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800877c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800877e:	4b12      	ldr	r3, [pc, #72]	; (80087c8 <USBH_LL_Init+0x74>)
 8008780:	2208      	movs	r2, #8
 8008782:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008784:	4b10      	ldr	r3, [pc, #64]	; (80087c8 <USBH_LL_Init+0x74>)
 8008786:	2201      	movs	r2, #1
 8008788:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800878a:	4b0f      	ldr	r3, [pc, #60]	; (80087c8 <USBH_LL_Init+0x74>)
 800878c:	2200      	movs	r2, #0
 800878e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008790:	4b0d      	ldr	r3, [pc, #52]	; (80087c8 <USBH_LL_Init+0x74>)
 8008792:	2202      	movs	r2, #2
 8008794:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008796:	4b0c      	ldr	r3, [pc, #48]	; (80087c8 <USBH_LL_Init+0x74>)
 8008798:	2200      	movs	r2, #0
 800879a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800879c:	480a      	ldr	r0, [pc, #40]	; (80087c8 <USBH_LL_Init+0x74>)
 800879e:	f7f9 f889 	bl	80018b4 <HAL_HCD_Init>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d001      	beq.n	80087ac <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80087a8:	f7f8 fa5e 	bl	8000c68 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80087ac:	4806      	ldr	r0, [pc, #24]	; (80087c8 <USBH_LL_Init+0x74>)
 80087ae:	f7f9 fc6c 	bl	800208a <HAL_HCD_GetCurrentFrame>
 80087b2:	4603      	mov	r3, r0
 80087b4:	4619      	mov	r1, r3
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f7fe ff60 	bl	800767c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3708      	adds	r7, #8
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	20000620 	.word	0x20000620

080087cc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087d4:	2300      	movs	r3, #0
 80087d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087d8:	2300      	movs	r3, #0
 80087da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7f9 fbdb 	bl	8001f9e <HAL_HCD_Start>
 80087e8:	4603      	mov	r3, r0
 80087ea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80087ec:	7bfb      	ldrb	r3, [r7, #15]
 80087ee:	4618      	mov	r0, r3
 80087f0:	f000 f95c 	bl	8008aac <USBH_Get_USB_Status>
 80087f4:	4603      	mov	r3, r0
 80087f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}

08008802 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008802:	b580      	push	{r7, lr}
 8008804:	b084      	sub	sp, #16
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800880a:	2300      	movs	r3, #0
 800880c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800880e:	2300      	movs	r3, #0
 8008810:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008818:	4618      	mov	r0, r3
 800881a:	f7f9 fbe3 	bl	8001fe4 <HAL_HCD_Stop>
 800881e:	4603      	mov	r3, r0
 8008820:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008822:	7bfb      	ldrb	r3, [r7, #15]
 8008824:	4618      	mov	r0, r3
 8008826:	f000 f941 	bl	8008aac <USBH_Get_USB_Status>
 800882a:	4603      	mov	r3, r0
 800882c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800882e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008830:	4618      	mov	r0, r3
 8008832:	3710      	adds	r7, #16
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008840:	2301      	movs	r3, #1
 8008842:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800884a:	4618      	mov	r0, r3
 800884c:	f7f9 fc2b 	bl	80020a6 <HAL_HCD_GetCurrentSpeed>
 8008850:	4603      	mov	r3, r0
 8008852:	2b02      	cmp	r3, #2
 8008854:	d00c      	beq.n	8008870 <USBH_LL_GetSpeed+0x38>
 8008856:	2b02      	cmp	r3, #2
 8008858:	d80d      	bhi.n	8008876 <USBH_LL_GetSpeed+0x3e>
 800885a:	2b00      	cmp	r3, #0
 800885c:	d002      	beq.n	8008864 <USBH_LL_GetSpeed+0x2c>
 800885e:	2b01      	cmp	r3, #1
 8008860:	d003      	beq.n	800886a <USBH_LL_GetSpeed+0x32>
 8008862:	e008      	b.n	8008876 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008864:	2300      	movs	r3, #0
 8008866:	73fb      	strb	r3, [r7, #15]
    break;
 8008868:	e008      	b.n	800887c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800886a:	2301      	movs	r3, #1
 800886c:	73fb      	strb	r3, [r7, #15]
    break;
 800886e:	e005      	b.n	800887c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008870:	2302      	movs	r3, #2
 8008872:	73fb      	strb	r3, [r7, #15]
    break;
 8008874:	e002      	b.n	800887c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008876:	2301      	movs	r3, #1
 8008878:	73fb      	strb	r3, [r7, #15]
    break;
 800887a:	bf00      	nop
  }
  return  speed;
 800887c:	7bfb      	ldrb	r3, [r7, #15]
}
 800887e:	4618      	mov	r0, r3
 8008880:	3710      	adds	r7, #16
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b084      	sub	sp, #16
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800888e:	2300      	movs	r3, #0
 8008890:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008892:	2300      	movs	r3, #0
 8008894:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800889c:	4618      	mov	r0, r3
 800889e:	f7f9 fbbe 	bl	800201e <HAL_HCD_ResetPort>
 80088a2:	4603      	mov	r3, r0
 80088a4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80088a6:	7bfb      	ldrb	r3, [r7, #15]
 80088a8:	4618      	mov	r0, r3
 80088aa:	f000 f8ff 	bl	8008aac <USBH_Get_USB_Status>
 80088ae:	4603      	mov	r3, r0
 80088b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3710      	adds	r7, #16
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b082      	sub	sp, #8
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	460b      	mov	r3, r1
 80088c6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80088ce:	78fa      	ldrb	r2, [r7, #3]
 80088d0:	4611      	mov	r1, r2
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7f9 fbc5 	bl	8002062 <HAL_HCD_HC_GetXferCount>
 80088d8:	4603      	mov	r3, r0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3708      	adds	r7, #8
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80088e2:	b590      	push	{r4, r7, lr}
 80088e4:	b089      	sub	sp, #36	; 0x24
 80088e6:	af04      	add	r7, sp, #16
 80088e8:	6078      	str	r0, [r7, #4]
 80088ea:	4608      	mov	r0, r1
 80088ec:	4611      	mov	r1, r2
 80088ee:	461a      	mov	r2, r3
 80088f0:	4603      	mov	r3, r0
 80088f2:	70fb      	strb	r3, [r7, #3]
 80088f4:	460b      	mov	r3, r1
 80088f6:	70bb      	strb	r3, [r7, #2]
 80088f8:	4613      	mov	r3, r2
 80088fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088fc:	2300      	movs	r3, #0
 80088fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008900:	2300      	movs	r3, #0
 8008902:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800890a:	787c      	ldrb	r4, [r7, #1]
 800890c:	78ba      	ldrb	r2, [r7, #2]
 800890e:	78f9      	ldrb	r1, [r7, #3]
 8008910:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008912:	9302      	str	r3, [sp, #8]
 8008914:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008918:	9301      	str	r3, [sp, #4]
 800891a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800891e:	9300      	str	r3, [sp, #0]
 8008920:	4623      	mov	r3, r4
 8008922:	f7f9 f829 	bl	8001978 <HAL_HCD_HC_Init>
 8008926:	4603      	mov	r3, r0
 8008928:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800892a:	7bfb      	ldrb	r3, [r7, #15]
 800892c:	4618      	mov	r0, r3
 800892e:	f000 f8bd 	bl	8008aac <USBH_Get_USB_Status>
 8008932:	4603      	mov	r3, r0
 8008934:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008936:	7bbb      	ldrb	r3, [r7, #14]
}
 8008938:	4618      	mov	r0, r3
 800893a:	3714      	adds	r7, #20
 800893c:	46bd      	mov	sp, r7
 800893e:	bd90      	pop	{r4, r7, pc}

08008940 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	460b      	mov	r3, r1
 800894a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800894c:	2300      	movs	r3, #0
 800894e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008950:	2300      	movs	r3, #0
 8008952:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800895a:	78fa      	ldrb	r2, [r7, #3]
 800895c:	4611      	mov	r1, r2
 800895e:	4618      	mov	r0, r3
 8008960:	f7f9 f899 	bl	8001a96 <HAL_HCD_HC_Halt>
 8008964:	4603      	mov	r3, r0
 8008966:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008968:	7bfb      	ldrb	r3, [r7, #15]
 800896a:	4618      	mov	r0, r3
 800896c:	f000 f89e 	bl	8008aac <USBH_Get_USB_Status>
 8008970:	4603      	mov	r3, r0
 8008972:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008974:	7bbb      	ldrb	r3, [r7, #14]
}
 8008976:	4618      	mov	r0, r3
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800897e:	b590      	push	{r4, r7, lr}
 8008980:	b089      	sub	sp, #36	; 0x24
 8008982:	af04      	add	r7, sp, #16
 8008984:	6078      	str	r0, [r7, #4]
 8008986:	4608      	mov	r0, r1
 8008988:	4611      	mov	r1, r2
 800898a:	461a      	mov	r2, r3
 800898c:	4603      	mov	r3, r0
 800898e:	70fb      	strb	r3, [r7, #3]
 8008990:	460b      	mov	r3, r1
 8008992:	70bb      	strb	r3, [r7, #2]
 8008994:	4613      	mov	r3, r2
 8008996:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008998:	2300      	movs	r3, #0
 800899a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800899c:	2300      	movs	r3, #0
 800899e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80089a6:	787c      	ldrb	r4, [r7, #1]
 80089a8:	78ba      	ldrb	r2, [r7, #2]
 80089aa:	78f9      	ldrb	r1, [r7, #3]
 80089ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80089b0:	9303      	str	r3, [sp, #12]
 80089b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80089b4:	9302      	str	r3, [sp, #8]
 80089b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b8:	9301      	str	r3, [sp, #4]
 80089ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80089be:	9300      	str	r3, [sp, #0]
 80089c0:	4623      	mov	r3, r4
 80089c2:	f7f9 f88b 	bl	8001adc <HAL_HCD_HC_SubmitRequest>
 80089c6:	4603      	mov	r3, r0
 80089c8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80089ca:	7bfb      	ldrb	r3, [r7, #15]
 80089cc:	4618      	mov	r0, r3
 80089ce:	f000 f86d 	bl	8008aac <USBH_Get_USB_Status>
 80089d2:	4603      	mov	r3, r0
 80089d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3714      	adds	r7, #20
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd90      	pop	{r4, r7, pc}

080089e0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	460b      	mov	r3, r1
 80089ea:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089f2:	78fa      	ldrb	r2, [r7, #3]
 80089f4:	4611      	mov	r1, r2
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7f9 fb1f 	bl	800203a <HAL_HCD_HC_GetURBState>
 80089fc:	4603      	mov	r3, r0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3708      	adds	r7, #8
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}

08008a06 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b082      	sub	sp, #8
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
 8008a0e:	460b      	mov	r3, r1
 8008a10:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d103      	bne.n	8008a24 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008a1c:	78fb      	ldrb	r3, [r7, #3]
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f000 f870 	bl	8008b04 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008a24:	20c8      	movs	r0, #200	; 0xc8
 8008a26:	f7f8 fc27 	bl	8001278 <HAL_Delay>
  return USBH_OK;
 8008a2a:	2300      	movs	r3, #0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3708      	adds	r7, #8
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b085      	sub	sp, #20
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	70fb      	strb	r3, [r7, #3]
 8008a40:	4613      	mov	r3, r2
 8008a42:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a4a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008a4c:	78fb      	ldrb	r3, [r7, #3]
 8008a4e:	68fa      	ldr	r2, [r7, #12]
 8008a50:	212c      	movs	r1, #44	; 0x2c
 8008a52:	fb01 f303 	mul.w	r3, r1, r3
 8008a56:	4413      	add	r3, r2
 8008a58:	333b      	adds	r3, #59	; 0x3b
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d009      	beq.n	8008a74 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008a60:	78fb      	ldrb	r3, [r7, #3]
 8008a62:	68fa      	ldr	r2, [r7, #12]
 8008a64:	212c      	movs	r1, #44	; 0x2c
 8008a66:	fb01 f303 	mul.w	r3, r1, r3
 8008a6a:	4413      	add	r3, r2
 8008a6c:	3354      	adds	r3, #84	; 0x54
 8008a6e:	78ba      	ldrb	r2, [r7, #2]
 8008a70:	701a      	strb	r2, [r3, #0]
 8008a72:	e008      	b.n	8008a86 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008a74:	78fb      	ldrb	r3, [r7, #3]
 8008a76:	68fa      	ldr	r2, [r7, #12]
 8008a78:	212c      	movs	r1, #44	; 0x2c
 8008a7a:	fb01 f303 	mul.w	r3, r1, r3
 8008a7e:	4413      	add	r3, r2
 8008a80:	3355      	adds	r3, #85	; 0x55
 8008a82:	78ba      	ldrb	r2, [r7, #2]
 8008a84:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3714      	adds	r7, #20
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b082      	sub	sp, #8
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f7f8 fbeb 	bl	8001278 <HAL_Delay>
}
 8008aa2:	bf00      	nop
 8008aa4:	3708      	adds	r7, #8
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
	...

08008aac <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b085      	sub	sp, #20
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008aba:	79fb      	ldrb	r3, [r7, #7]
 8008abc:	2b03      	cmp	r3, #3
 8008abe:	d817      	bhi.n	8008af0 <USBH_Get_USB_Status+0x44>
 8008ac0:	a201      	add	r2, pc, #4	; (adr r2, 8008ac8 <USBH_Get_USB_Status+0x1c>)
 8008ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac6:	bf00      	nop
 8008ac8:	08008ad9 	.word	0x08008ad9
 8008acc:	08008adf 	.word	0x08008adf
 8008ad0:	08008ae5 	.word	0x08008ae5
 8008ad4:	08008aeb 	.word	0x08008aeb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	73fb      	strb	r3, [r7, #15]
    break;
 8008adc:	e00b      	b.n	8008af6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008ade:	2302      	movs	r3, #2
 8008ae0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ae2:	e008      	b.n	8008af6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ae8:	e005      	b.n	8008af6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008aea:	2302      	movs	r3, #2
 8008aec:	73fb      	strb	r3, [r7, #15]
    break;
 8008aee:	e002      	b.n	8008af6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008af0:	2302      	movs	r3, #2
 8008af2:	73fb      	strb	r3, [r7, #15]
    break;
 8008af4:	bf00      	nop
  }
  return usb_status;
 8008af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3714      	adds	r7, #20
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008b0e:	79fb      	ldrb	r3, [r7, #7]
 8008b10:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008b12:	79fb      	ldrb	r3, [r7, #7]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d102      	bne.n	8008b1e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	73fb      	strb	r3, [r7, #15]
 8008b1c:	e001      	b.n	8008b22 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008b22:	7bfb      	ldrb	r3, [r7, #15]
 8008b24:	461a      	mov	r2, r3
 8008b26:	2101      	movs	r1, #1
 8008b28:	4803      	ldr	r0, [pc, #12]	; (8008b38 <MX_DriverVbusFS+0x34>)
 8008b2a:	f7f8 fe91 	bl	8001850 <HAL_GPIO_WritePin>
}
 8008b2e:	bf00      	nop
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	40020800 	.word	0x40020800

08008b3c <__errno>:
 8008b3c:	4b01      	ldr	r3, [pc, #4]	; (8008b44 <__errno+0x8>)
 8008b3e:	6818      	ldr	r0, [r3, #0]
 8008b40:	4770      	bx	lr
 8008b42:	bf00      	nop
 8008b44:	20000030 	.word	0x20000030

08008b48 <__libc_init_array>:
 8008b48:	b570      	push	{r4, r5, r6, lr}
 8008b4a:	4d0d      	ldr	r5, [pc, #52]	; (8008b80 <__libc_init_array+0x38>)
 8008b4c:	4c0d      	ldr	r4, [pc, #52]	; (8008b84 <__libc_init_array+0x3c>)
 8008b4e:	1b64      	subs	r4, r4, r5
 8008b50:	10a4      	asrs	r4, r4, #2
 8008b52:	2600      	movs	r6, #0
 8008b54:	42a6      	cmp	r6, r4
 8008b56:	d109      	bne.n	8008b6c <__libc_init_array+0x24>
 8008b58:	4d0b      	ldr	r5, [pc, #44]	; (8008b88 <__libc_init_array+0x40>)
 8008b5a:	4c0c      	ldr	r4, [pc, #48]	; (8008b8c <__libc_init_array+0x44>)
 8008b5c:	f000 f92e 	bl	8008dbc <_init>
 8008b60:	1b64      	subs	r4, r4, r5
 8008b62:	10a4      	asrs	r4, r4, #2
 8008b64:	2600      	movs	r6, #0
 8008b66:	42a6      	cmp	r6, r4
 8008b68:	d105      	bne.n	8008b76 <__libc_init_array+0x2e>
 8008b6a:	bd70      	pop	{r4, r5, r6, pc}
 8008b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b70:	4798      	blx	r3
 8008b72:	3601      	adds	r6, #1
 8008b74:	e7ee      	b.n	8008b54 <__libc_init_array+0xc>
 8008b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b7a:	4798      	blx	r3
 8008b7c:	3601      	adds	r6, #1
 8008b7e:	e7f2      	b.n	8008b66 <__libc_init_array+0x1e>
 8008b80:	08008e08 	.word	0x08008e08
 8008b84:	08008e08 	.word	0x08008e08
 8008b88:	08008e08 	.word	0x08008e08
 8008b8c:	08008e0c 	.word	0x08008e0c

08008b90 <malloc>:
 8008b90:	4b02      	ldr	r3, [pc, #8]	; (8008b9c <malloc+0xc>)
 8008b92:	4601      	mov	r1, r0
 8008b94:	6818      	ldr	r0, [r3, #0]
 8008b96:	f000 b87f 	b.w	8008c98 <_malloc_r>
 8008b9a:	bf00      	nop
 8008b9c:	20000030 	.word	0x20000030

08008ba0 <free>:
 8008ba0:	4b02      	ldr	r3, [pc, #8]	; (8008bac <free+0xc>)
 8008ba2:	4601      	mov	r1, r0
 8008ba4:	6818      	ldr	r0, [r3, #0]
 8008ba6:	f000 b80b 	b.w	8008bc0 <_free_r>
 8008baa:	bf00      	nop
 8008bac:	20000030 	.word	0x20000030

08008bb0 <memset>:
 8008bb0:	4402      	add	r2, r0
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d100      	bne.n	8008bba <memset+0xa>
 8008bb8:	4770      	bx	lr
 8008bba:	f803 1b01 	strb.w	r1, [r3], #1
 8008bbe:	e7f9      	b.n	8008bb4 <memset+0x4>

08008bc0 <_free_r>:
 8008bc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bc2:	2900      	cmp	r1, #0
 8008bc4:	d044      	beq.n	8008c50 <_free_r+0x90>
 8008bc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bca:	9001      	str	r0, [sp, #4]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	f1a1 0404 	sub.w	r4, r1, #4
 8008bd2:	bfb8      	it	lt
 8008bd4:	18e4      	addlt	r4, r4, r3
 8008bd6:	f000 f8e3 	bl	8008da0 <__malloc_lock>
 8008bda:	4a1e      	ldr	r2, [pc, #120]	; (8008c54 <_free_r+0x94>)
 8008bdc:	9801      	ldr	r0, [sp, #4]
 8008bde:	6813      	ldr	r3, [r2, #0]
 8008be0:	b933      	cbnz	r3, 8008bf0 <_free_r+0x30>
 8008be2:	6063      	str	r3, [r4, #4]
 8008be4:	6014      	str	r4, [r2, #0]
 8008be6:	b003      	add	sp, #12
 8008be8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008bec:	f000 b8de 	b.w	8008dac <__malloc_unlock>
 8008bf0:	42a3      	cmp	r3, r4
 8008bf2:	d908      	bls.n	8008c06 <_free_r+0x46>
 8008bf4:	6825      	ldr	r5, [r4, #0]
 8008bf6:	1961      	adds	r1, r4, r5
 8008bf8:	428b      	cmp	r3, r1
 8008bfa:	bf01      	itttt	eq
 8008bfc:	6819      	ldreq	r1, [r3, #0]
 8008bfe:	685b      	ldreq	r3, [r3, #4]
 8008c00:	1949      	addeq	r1, r1, r5
 8008c02:	6021      	streq	r1, [r4, #0]
 8008c04:	e7ed      	b.n	8008be2 <_free_r+0x22>
 8008c06:	461a      	mov	r2, r3
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	b10b      	cbz	r3, 8008c10 <_free_r+0x50>
 8008c0c:	42a3      	cmp	r3, r4
 8008c0e:	d9fa      	bls.n	8008c06 <_free_r+0x46>
 8008c10:	6811      	ldr	r1, [r2, #0]
 8008c12:	1855      	adds	r5, r2, r1
 8008c14:	42a5      	cmp	r5, r4
 8008c16:	d10b      	bne.n	8008c30 <_free_r+0x70>
 8008c18:	6824      	ldr	r4, [r4, #0]
 8008c1a:	4421      	add	r1, r4
 8008c1c:	1854      	adds	r4, r2, r1
 8008c1e:	42a3      	cmp	r3, r4
 8008c20:	6011      	str	r1, [r2, #0]
 8008c22:	d1e0      	bne.n	8008be6 <_free_r+0x26>
 8008c24:	681c      	ldr	r4, [r3, #0]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	6053      	str	r3, [r2, #4]
 8008c2a:	4421      	add	r1, r4
 8008c2c:	6011      	str	r1, [r2, #0]
 8008c2e:	e7da      	b.n	8008be6 <_free_r+0x26>
 8008c30:	d902      	bls.n	8008c38 <_free_r+0x78>
 8008c32:	230c      	movs	r3, #12
 8008c34:	6003      	str	r3, [r0, #0]
 8008c36:	e7d6      	b.n	8008be6 <_free_r+0x26>
 8008c38:	6825      	ldr	r5, [r4, #0]
 8008c3a:	1961      	adds	r1, r4, r5
 8008c3c:	428b      	cmp	r3, r1
 8008c3e:	bf04      	itt	eq
 8008c40:	6819      	ldreq	r1, [r3, #0]
 8008c42:	685b      	ldreq	r3, [r3, #4]
 8008c44:	6063      	str	r3, [r4, #4]
 8008c46:	bf04      	itt	eq
 8008c48:	1949      	addeq	r1, r1, r5
 8008c4a:	6021      	streq	r1, [r4, #0]
 8008c4c:	6054      	str	r4, [r2, #4]
 8008c4e:	e7ca      	b.n	8008be6 <_free_r+0x26>
 8008c50:	b003      	add	sp, #12
 8008c52:	bd30      	pop	{r4, r5, pc}
 8008c54:	20000924 	.word	0x20000924

08008c58 <sbrk_aligned>:
 8008c58:	b570      	push	{r4, r5, r6, lr}
 8008c5a:	4e0e      	ldr	r6, [pc, #56]	; (8008c94 <sbrk_aligned+0x3c>)
 8008c5c:	460c      	mov	r4, r1
 8008c5e:	6831      	ldr	r1, [r6, #0]
 8008c60:	4605      	mov	r5, r0
 8008c62:	b911      	cbnz	r1, 8008c6a <sbrk_aligned+0x12>
 8008c64:	f000 f88c 	bl	8008d80 <_sbrk_r>
 8008c68:	6030      	str	r0, [r6, #0]
 8008c6a:	4621      	mov	r1, r4
 8008c6c:	4628      	mov	r0, r5
 8008c6e:	f000 f887 	bl	8008d80 <_sbrk_r>
 8008c72:	1c43      	adds	r3, r0, #1
 8008c74:	d00a      	beq.n	8008c8c <sbrk_aligned+0x34>
 8008c76:	1cc4      	adds	r4, r0, #3
 8008c78:	f024 0403 	bic.w	r4, r4, #3
 8008c7c:	42a0      	cmp	r0, r4
 8008c7e:	d007      	beq.n	8008c90 <sbrk_aligned+0x38>
 8008c80:	1a21      	subs	r1, r4, r0
 8008c82:	4628      	mov	r0, r5
 8008c84:	f000 f87c 	bl	8008d80 <_sbrk_r>
 8008c88:	3001      	adds	r0, #1
 8008c8a:	d101      	bne.n	8008c90 <sbrk_aligned+0x38>
 8008c8c:	f04f 34ff 	mov.w	r4, #4294967295
 8008c90:	4620      	mov	r0, r4
 8008c92:	bd70      	pop	{r4, r5, r6, pc}
 8008c94:	20000928 	.word	0x20000928

08008c98 <_malloc_r>:
 8008c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c9c:	1ccd      	adds	r5, r1, #3
 8008c9e:	f025 0503 	bic.w	r5, r5, #3
 8008ca2:	3508      	adds	r5, #8
 8008ca4:	2d0c      	cmp	r5, #12
 8008ca6:	bf38      	it	cc
 8008ca8:	250c      	movcc	r5, #12
 8008caa:	2d00      	cmp	r5, #0
 8008cac:	4607      	mov	r7, r0
 8008cae:	db01      	blt.n	8008cb4 <_malloc_r+0x1c>
 8008cb0:	42a9      	cmp	r1, r5
 8008cb2:	d905      	bls.n	8008cc0 <_malloc_r+0x28>
 8008cb4:	230c      	movs	r3, #12
 8008cb6:	603b      	str	r3, [r7, #0]
 8008cb8:	2600      	movs	r6, #0
 8008cba:	4630      	mov	r0, r6
 8008cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cc0:	4e2e      	ldr	r6, [pc, #184]	; (8008d7c <_malloc_r+0xe4>)
 8008cc2:	f000 f86d 	bl	8008da0 <__malloc_lock>
 8008cc6:	6833      	ldr	r3, [r6, #0]
 8008cc8:	461c      	mov	r4, r3
 8008cca:	bb34      	cbnz	r4, 8008d1a <_malloc_r+0x82>
 8008ccc:	4629      	mov	r1, r5
 8008cce:	4638      	mov	r0, r7
 8008cd0:	f7ff ffc2 	bl	8008c58 <sbrk_aligned>
 8008cd4:	1c43      	adds	r3, r0, #1
 8008cd6:	4604      	mov	r4, r0
 8008cd8:	d14d      	bne.n	8008d76 <_malloc_r+0xde>
 8008cda:	6834      	ldr	r4, [r6, #0]
 8008cdc:	4626      	mov	r6, r4
 8008cde:	2e00      	cmp	r6, #0
 8008ce0:	d140      	bne.n	8008d64 <_malloc_r+0xcc>
 8008ce2:	6823      	ldr	r3, [r4, #0]
 8008ce4:	4631      	mov	r1, r6
 8008ce6:	4638      	mov	r0, r7
 8008ce8:	eb04 0803 	add.w	r8, r4, r3
 8008cec:	f000 f848 	bl	8008d80 <_sbrk_r>
 8008cf0:	4580      	cmp	r8, r0
 8008cf2:	d13a      	bne.n	8008d6a <_malloc_r+0xd2>
 8008cf4:	6821      	ldr	r1, [r4, #0]
 8008cf6:	3503      	adds	r5, #3
 8008cf8:	1a6d      	subs	r5, r5, r1
 8008cfa:	f025 0503 	bic.w	r5, r5, #3
 8008cfe:	3508      	adds	r5, #8
 8008d00:	2d0c      	cmp	r5, #12
 8008d02:	bf38      	it	cc
 8008d04:	250c      	movcc	r5, #12
 8008d06:	4629      	mov	r1, r5
 8008d08:	4638      	mov	r0, r7
 8008d0a:	f7ff ffa5 	bl	8008c58 <sbrk_aligned>
 8008d0e:	3001      	adds	r0, #1
 8008d10:	d02b      	beq.n	8008d6a <_malloc_r+0xd2>
 8008d12:	6823      	ldr	r3, [r4, #0]
 8008d14:	442b      	add	r3, r5
 8008d16:	6023      	str	r3, [r4, #0]
 8008d18:	e00e      	b.n	8008d38 <_malloc_r+0xa0>
 8008d1a:	6822      	ldr	r2, [r4, #0]
 8008d1c:	1b52      	subs	r2, r2, r5
 8008d1e:	d41e      	bmi.n	8008d5e <_malloc_r+0xc6>
 8008d20:	2a0b      	cmp	r2, #11
 8008d22:	d916      	bls.n	8008d52 <_malloc_r+0xba>
 8008d24:	1961      	adds	r1, r4, r5
 8008d26:	42a3      	cmp	r3, r4
 8008d28:	6025      	str	r5, [r4, #0]
 8008d2a:	bf18      	it	ne
 8008d2c:	6059      	strne	r1, [r3, #4]
 8008d2e:	6863      	ldr	r3, [r4, #4]
 8008d30:	bf08      	it	eq
 8008d32:	6031      	streq	r1, [r6, #0]
 8008d34:	5162      	str	r2, [r4, r5]
 8008d36:	604b      	str	r3, [r1, #4]
 8008d38:	4638      	mov	r0, r7
 8008d3a:	f104 060b 	add.w	r6, r4, #11
 8008d3e:	f000 f835 	bl	8008dac <__malloc_unlock>
 8008d42:	f026 0607 	bic.w	r6, r6, #7
 8008d46:	1d23      	adds	r3, r4, #4
 8008d48:	1af2      	subs	r2, r6, r3
 8008d4a:	d0b6      	beq.n	8008cba <_malloc_r+0x22>
 8008d4c:	1b9b      	subs	r3, r3, r6
 8008d4e:	50a3      	str	r3, [r4, r2]
 8008d50:	e7b3      	b.n	8008cba <_malloc_r+0x22>
 8008d52:	6862      	ldr	r2, [r4, #4]
 8008d54:	42a3      	cmp	r3, r4
 8008d56:	bf0c      	ite	eq
 8008d58:	6032      	streq	r2, [r6, #0]
 8008d5a:	605a      	strne	r2, [r3, #4]
 8008d5c:	e7ec      	b.n	8008d38 <_malloc_r+0xa0>
 8008d5e:	4623      	mov	r3, r4
 8008d60:	6864      	ldr	r4, [r4, #4]
 8008d62:	e7b2      	b.n	8008cca <_malloc_r+0x32>
 8008d64:	4634      	mov	r4, r6
 8008d66:	6876      	ldr	r6, [r6, #4]
 8008d68:	e7b9      	b.n	8008cde <_malloc_r+0x46>
 8008d6a:	230c      	movs	r3, #12
 8008d6c:	603b      	str	r3, [r7, #0]
 8008d6e:	4638      	mov	r0, r7
 8008d70:	f000 f81c 	bl	8008dac <__malloc_unlock>
 8008d74:	e7a1      	b.n	8008cba <_malloc_r+0x22>
 8008d76:	6025      	str	r5, [r4, #0]
 8008d78:	e7de      	b.n	8008d38 <_malloc_r+0xa0>
 8008d7a:	bf00      	nop
 8008d7c:	20000924 	.word	0x20000924

08008d80 <_sbrk_r>:
 8008d80:	b538      	push	{r3, r4, r5, lr}
 8008d82:	4d06      	ldr	r5, [pc, #24]	; (8008d9c <_sbrk_r+0x1c>)
 8008d84:	2300      	movs	r3, #0
 8008d86:	4604      	mov	r4, r0
 8008d88:	4608      	mov	r0, r1
 8008d8a:	602b      	str	r3, [r5, #0]
 8008d8c:	f7f8 f990 	bl	80010b0 <_sbrk>
 8008d90:	1c43      	adds	r3, r0, #1
 8008d92:	d102      	bne.n	8008d9a <_sbrk_r+0x1a>
 8008d94:	682b      	ldr	r3, [r5, #0]
 8008d96:	b103      	cbz	r3, 8008d9a <_sbrk_r+0x1a>
 8008d98:	6023      	str	r3, [r4, #0]
 8008d9a:	bd38      	pop	{r3, r4, r5, pc}
 8008d9c:	2000092c 	.word	0x2000092c

08008da0 <__malloc_lock>:
 8008da0:	4801      	ldr	r0, [pc, #4]	; (8008da8 <__malloc_lock+0x8>)
 8008da2:	f000 b809 	b.w	8008db8 <__retarget_lock_acquire_recursive>
 8008da6:	bf00      	nop
 8008da8:	20000930 	.word	0x20000930

08008dac <__malloc_unlock>:
 8008dac:	4801      	ldr	r0, [pc, #4]	; (8008db4 <__malloc_unlock+0x8>)
 8008dae:	f000 b804 	b.w	8008dba <__retarget_lock_release_recursive>
 8008db2:	bf00      	nop
 8008db4:	20000930 	.word	0x20000930

08008db8 <__retarget_lock_acquire_recursive>:
 8008db8:	4770      	bx	lr

08008dba <__retarget_lock_release_recursive>:
 8008dba:	4770      	bx	lr

08008dbc <_init>:
 8008dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dbe:	bf00      	nop
 8008dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dc2:	bc08      	pop	{r3}
 8008dc4:	469e      	mov	lr, r3
 8008dc6:	4770      	bx	lr

08008dc8 <_fini>:
 8008dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dca:	bf00      	nop
 8008dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dce:	bc08      	pop	{r3}
 8008dd0:	469e      	mov	lr, r3
 8008dd2:	4770      	bx	lr
